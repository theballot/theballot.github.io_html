<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: email | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/email/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How hard could it be to create an email?]]></title>
    <link href="http://artsy.github.io/blog/2018/11/19/mjml/"/>
    <updated>2018-11-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/11/19/mjml</id>
    <content type="html"><![CDATA[<!-- OUTLINE -->


<p>Let's talk about email HTML.</p>

<p>If you've never worked on emails before, you might think the process works something like this:</p>

<ol>
<li>Write some HTML, but maybe with a few more tables than you usually use since emails like those.</li>
<li>Render it in your browser. Nice! Looking great.</li>
<li>Send yourself a quick test. Just like in your browser! Sweet!</li>
<li>Send that PR and move on to the next thing.</li>
</ol>


<p><img src="/images/2018-11-19-mjml/example.png" alt="/images/2018-11-19-mjml/example.png" /></p>

<p>In reality, it's more like this:</p>

<ol>
<li>Write some HTML with more tables than you think could possibly be necessary. There's no way it'll break with all
these tables, right?</li>
<li>Render it in the browser. Cool, looks fine.</li>
<li>Send yourself a test, and send one to a service like <a href="https://www.litmus.com">Litmus</a> or
<a href="https://www.emailonacid.com">Email on Acid</a> that renders the email in dozens of clients</li>
<li>Looking good in Gmail...good in Apple mail...wait why is it completely broken in Outlook 2007 (and 2010, 2013,
and 2019)? And Yahoo Mail on Internet Explorer? Shoot.</li>
<li>Better add some more tables. That's usually the solution.</li>
<li>Well...that didn't work. Find a post from 2009 in a forum for Netscape enthusiasts that implies you might want
to add an extra Outlook-only table using <code>&lt;!--[if mso | IE]&gt;</code> with
<code>role="presentation" and cellpadding="0" cellspacing="0"</code>. Maybe that'll work.</li>
<li>Outlook 2007 is fixed! Nice! Oh...but now it looks broken on iPhones. Back to the drawing board.</li>
</ol>


<p><img src="/images/2018-11-19-mjml/outlook-2019-broken.png" alt="/images/2018-11-19-mjml/outlook-2019-broken.png" /></p>

<!-- more -->


<p>And after a few hours, you've probably squished most bugs on most clients and are ready to ship it, but also ready
to tear your hair out. Creating emails that render gracefully in clients that were built 15 years ago and in
clients that were built this year isn't easily done. That's where MJML comes in.</p>

<a name="What.is.MJML."></a>
<h2>What is MJML?</h2>

<p><a href="https://mjml.io">MJML</a>, short for Mailjet Markup Language, is a markup language that is written like simplified HTML/CSS
and renders email-friendly, responsive HTML. So instead of having to code a few thousand lines of complex HTML, you
code a couple hundred lines of MJML, and it outputs code that looks good on <em>every single client</em>.</p>

<pre><code class="html">&lt;mjml&gt;
  &lt;mj-head&gt;
    &lt;!-- global styles --&gt;
    &lt;mj-attributes&gt;
      &lt;mj-text
        font-family="HelveticaNeue, Helvetica, Arial, sans-serif"
        font-size="14px"
        line-height="21px"
        padding="0"
      /&gt;
      &lt;mj-section padding="0" /&gt;
    &lt;/mj-attributes&gt;
  &lt;/mj-head&gt;
  &lt;mj-body width="450px" background-color="#fff"&gt;
    &lt;mj-section padding="20px" border="1px solid #e5e5e5"  border-bottom="0"&gt;
      &lt;mj-group&gt;
        &lt;mj-column vertical-align="middle" width="19%"&gt;
          &lt;mj-image width="66px" align="left" padding="0" src="jared-french-prose.png"/&gt;
        &lt;/mj-column&gt;
        &lt;mj-column padding-left="20px" vertical-align="middle" width="81%"&gt;
          &lt;mj-text&gt;Order #B135790&lt;/mj-text&gt;
          &lt;mj-text&gt;Jared French&lt;/mj-text&gt;
          &lt;mj-text&gt;Prose, ca. 1948&lt;/mj-text&gt;
        &lt;/mj-column&gt;
      &lt;/mj-group&gt;
    &lt;/mj-section&gt;
  &lt;/mj-body&gt;
&lt;/mjml&gt;
</code></pre>

<p>Looking good in Outlook 2007:
<img src="/images/2018-11-19-mjml/outlook-2007-fixed.png" alt="/images/2018-11-19-mjml/outlook-2007-fixed.png" /></p>

<p>It feels pretty magical.</p>

<p>When the marketing team was getting ready to revamp our user-facing emails in summer 2017, we found MJML and
thought, "hey, this could make life a lot simpler in the long run." It took some time to get comfortable with it,
but maybe not as much as you'd think due to its similarities with HTML.</p>

<p>It can be tricky figuring out how to accomplish something really, really specific in MJML. Our design team sent
over templates with pretty specific needs—mobile vs. desktop padding, for example, and it took us a while to learn
how to make those types of tricky changes (though still less time than it would have taken in raw HTML, I'm sure).</p>

<a name="Limitations"></a>
<h2>Limitations</h2>

<p>Of course, MJML is still limited by the boundaries of email clients. It can't make gifs render in old versions of
Outlook, or fix the way Lotus Notes ignores stated image widths in favor of actual widths. We've run into issues
with background images that MJML couldn't completely alleviate on all clients (they're pretty poorly supported),
and because lots of mobile clients don't support media queries, we've had to develop in a way that makes sure our
desktop layouts and sizes will look good on small screens.</p>

<p>And it's worth noting that the HTML file output by MJML is going to be large. On our biggest emails, the ones
featuring articles, artists, artworks, events, ads, and more, we've had to deal with clipping by minifying our
output (which comes with its own share of difficulties, since again, things that work fine when minifying for web
will break email clients). If you're curious, we use the <a href="http://kangax.github.io/html-minifier/">Kangax Minifier</a>
with <a href="/images/2018-11-19-mjml/kangax-settings.png">these particular settings</a>.</p>

<p>One thing that's helped tremendously with these issues is MJML's great
<a href="https://slacking-inviter.herokuapp.com/">Slack community</a>. Both the devs of MJML and several avid users (including
both of us) are good about answering questions from new and seasoned users alike.</p>

<a name="Bringing.MJML.to.Engineering"></a>
<h2>Bringing MJML to Engineering</h2>

<p>Part of what the email marketing team appreciated about MJML is that it could be written by someone who just knew
HTML and CSS—you don't have to be an experienced programmer to make it work. The engineering team wasn't much
involved with the development of the Marketing team's emails in MJML, but when they began working on new
transactional emails for <a href="https://www.artsy.net/collect?acquireable=true">Buy Now</a> inventory, Erik (on Engineering)
and Matt (on Marketing) sat down together to see if it could be a good fit for them as well.</p>

<p>Artsy's transactional emails cover everything from internal reporting to messaging for gallery partners, art
collectors and auction bidders. As these emails have evolved and become more complex, our approaches to balancing
beauty with stability have pushed the limits of reasonable human effort. Similar to how frontend frameworks like
<a href="https://getbootstrap.com/">Bootstrap</a> added a level of comfortable abstraction to stylesheets, or the way your
React.js <code>&lt;Button /&gt;</code> component became so much more than a plain old <code>&lt;button /&gt;</code>, MJML's xml 'components' abstract
the messy bits away.</p>

<a name="State.of.the..Email..Union"></a>
<h2>State of the (Email) Union</h2>

<p>Today, we're using MJML for all of our B2C emails, a few of our B2B emails, and our new transactional emails (all
three are generated by different mail services, so it takes some time to bring them all up to date). We've found
that we're able to iterate on designs much faster, and our emails look better in more clients than they ever have
before.</p>

<p>What else have we learned during this process? MJML takes a bit of time to master, especially the idea of
<code>&lt;mj-head&gt;</code> as a kind of global stylesheet and the <code>body --&gt; section --&gt; column</code> flow. Once we got comfortable with
conventions like this, though, life before MJML became hard to imagine. It has offered Artsy the chance to raise
the level of accessibility of design <em>and</em> speed of development in this niche area, a major win for the engineering
team and cross-team collaboration as a whole.</p>

<p>For more information or to get started using MJML, <a href="https://mjml.io">check out their website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Notifications and Personalized Emails Efficiently]]></title>
    <link href="http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently/"/>
    <updated>2014-04-24T16:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently</id>
    <content type="html"><![CDATA[<p>We recently launched a new personalized email here at <a href="https://artsy.net">Artsy</a> that features content that a given user might find interesting. The goal of this post is to describe how we built a backend system that efficiently generates these e-mails for all our users. I'll talk about the first, naive implementation that had performance problems right away, and how the second implementation (currently in production) solved those issues, and whose behavior at scale is well-defined and understood. I won't go into the details of the design and layout of the mail itself and how we render the content - there are several earlier blog posts that deal with those: <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a>, <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a>.</p>

<p><img src="/images/2014-04-24-generating-notifications-and-personalized-emails-efficiently/percy_example.png" alt="Personalized Email Example" /></p>

<!-- more -->


<a name="Deciding.What.Content.to.Include"></a>
<h3>Deciding What Content to Include</h3>

<p>First, we had to decide what types of personalized content we wanted to feature in our mails. Users can follow artists and galleries, and so this seemed like a great place to start. We'd like to let you know about new artworks that have been uploaded by artists that you follow, as well as new shows that have been added by galleries you follow, or that are exhibiting artists you follow. Since we have location data for our galleries and our users (accomplished thru an onboarding flow, or thru geo-locating their IP address), we also want to include new shows that are opening near you. Additionally, we have a recommendations engine that recommends artworks to users based on their preferences and activity on the site, and we'd like to show some of the latest and best of such recommendations.</p>

<a name="Initial.Implementation.Ideas"></a>
<h3>Initial Implementation Ideas</h3>

<p>My first thought was to have an observer (really just some <code>after_save</code> callbacks) that will wait for data to get into a state where a user can be validly notified, and in a background task write these notifications to interested users. Here's how the base setup of our <code>Notification</code> model looked:</p>

<pre><code class="ruby">class Notification
  include Mongoid::Document
  include Mongoid::Timestamps

  belongs_to :user
  belongs_to :notifiable, polymorphic: true, inverse_of: :notifications
end
</code></pre>

<p>It's a simple join of the user and the <code>notifiable</code> (the object/action that a user is being notified about).</p>

<p>Then, a specific notification (such as one for published artworks by artists you follow) can inherit from this and look like:</p>

<pre><code class="ruby">class PublishedArtworkNotification &lt; Notification
  def self.notify!(artwork_id)
    user_ids = FollowArtist.where(artist: artwork.artist).pluck("user_id")
    user_ids.each_slice(100) do |uids|
      PublishedArtworkNotification.delay(queue: :any, priority: 6).create_for_users(artwork_id, uids)
    end
  end

  def self.create_for_users(artwork, uids)
    uids.each do |uid|
      PublishedArtworkNotification.create!(user_id: uid, notifiable_id: artwork_id, notifiable_type: 'Artwork')
    end
  end
end
</code></pre>

<p>Then, the <code>after_save</code> hook on an <code>Artwork</code> model is:</p>

<pre><code class="ruby">def delay_notify
  PublishedArtworkNotification.delay(queue: :any).notify!(self.id) if self.published_changed? &amp;&amp; self.published
end
</code></pre>

<p>So, when an artwork is published, we run <code>notify!</code> in the background for the respective notification. That method will pull all interested users (via following the artist), and then spawn off more background processes to write the notifications in batches of 100. We batched these writes to avoid any one background process taking too long (an artist such as <a href="https://artsy.net/artist/andy-warhol">Andy Warhol</a> has around twelve thousand followers currently), and also ran them at a lower priority to avoid blocking other jobs in our queue.</p>

<p>The other types of notifications were all implemented similarly (via an observer on the model, and a specific <code>Notification</code> class inheriting from the base class). We also added some other logic into the base <code>Notification</code> class such as some uniqueness constraints, as well as an ability to mark notifications as 'sent' or 'invalid'. However, we ran into serious performance/scaling issues fairly quickly, and had to re-implement this scheme.</p>

<a name="Performance.Bottlenecks"></a>
<h3>Performance Bottlenecks</h3>

<p>All of these records were being written to one collection in <a href="https://www.mongodb.org/">MongoDB</a>, and the size of this collection grew quite rapidly. It's size almost immediately dwarfed the size of any of our other collections, and the number of records quickly reached into the tens of millions. This led to problems: writing new notifications started to crawl to a standstill. We had several indices on this collection to aid in querying, and these made the insertion of new notifications very non-performant, and also started to affect overall database performance. Querying against this collection degraded quickly and started to similarly affect database performance. Archiving old records also proved next to impossible. We couldn't simply drop the entire collection, but had to prune records. This similarly was totally non-performant and was adversely affecting database and site performance. We needed to come up with a new implementation for <code>Notification</code>, and addressing these issues was essential.</p>

<a name="Resolving.Performance.Bottlenecks"></a>
<h3>Resolving Performance Bottlenecks</h3>

<p>So, we decided on a scheme where each day would result in a new <code>Notifications</code> collection (name keyed on the date), named <code>notifications_20140101</code>, <code>notifications_20140102</code>, etc. Each of these collections would have an <code>_id</code> field that corresponds to a user_id, and an <code>events</code> array (or 'stack' if you will) that records the id's of notified objects, as well as the type of notification. An example of a record in that collection is:</p>

<pre><code class="json">{"_id"=&gt;"5106b619f56337db300001f8",
 "events"=&gt;[{"t"=&gt;"NearbyShow", "o"=&gt;"533998b1c9dc24c371000041"},
            {"t"=&gt;"NearbyShow", "o"=&gt;"5345774cc9dc246d580003d0"},
            {"t"=&gt;"NearbyShow", "o"=&gt;"5335af4fa09a67145300028c"},
            {"t"=&gt;"NearbyShow", "o"=&gt;"533f1174a09a67298900007b"},
            {"t"=&gt;"ArtworkPublished", "o"=&gt;"5334647b139b2165160000d8"}]
}
</code></pre>

<p>So, here we see all of my notifications for April 22, 2014. On that day, I was notified about 4 shows opening near my location, and one artwork added by an artist I follow. Incidentally, that artwork was a piece by <a href="https://artsy.net/artist/rob-wynne">Rob Wynne</a> entitled <a href="https://artsy.net/artwork/rob-wynne-youre-dreaming">You're Dreaming</a>. The show notifications were for NYC-area shows opening at <a href="https://artsy.net/klein-sun-gallery">Klein Sun Gallery</a>, <a href="https://artsy.net/garis-and-hahn">Garis &amp; Hahn</a>, <a href="https://artsy.net/miyako-yoshinaga-gallery">Miyako Yoshinaga Gallery</a> and <a href="https://artsy.net/dodgegallery">DODGEgallery</a>.</p>

<p>A couple of nice things about this implementation is it limits the size of a collection: any one day's collection will scale directly with the number of users, which seems reasonable. Our earlier implementation scaled with the product of the number of users and amount of content on Artsy, which is clearly problematic. Also, archiving old notifications is as simple as dropping a particular day's collection, which is very performant. However, querying and assembling these notifications is a bit trickier than in the naive implementation, as well as marking which events have already been sent to a user, so as to avoid duplicating any content in between mailings.</p>

<p>Let's see how we rewrite the notification generation in this scheme:</p>

<pre><code class="ruby">module NotificationService

  def self.notify_many!(user_ids, object_id, type)
    events = events_from(object_id, type)
    user_ids.each do |user_id|
      notify_with_events(user_id, events)
    end
  end

  private

  def self.notify_with_events(user_id, events)
    collection.find(_id: user_id).upsert('$push' =&gt; { events: { '$each' =&gt; events } })
  end

  def self.events_from(object_ids, type)
    Array(object_ids).map do |object_id|
      {
        't' =&gt; type,
        'o' =&gt; object_id
      }
    end
  end

  # collection storing notifications for the given day
  def self.collection(date = Date.today)
    Mongoid.default_session.with(safe: false)[collection_name(date)]
  end

  def self.collection_name(date)
    "notifications_#{date.to_s(:number)}"
  end

end
</code></pre>

<p>Here's how the <code>after_save</code> callback looks now:</p>

<pre><code class="ruby">def notify_published
  NotificationService.notify_many!(user_ids, self, 'ArtworkPublished') if self.published_changed? &amp;&amp; self.published
end
</code></pre>

<p>Let's take a look at what's going on here. When an artwork is published, we call <code>notify_many!</code> in the <code>NotificationService</code> module. That will determine the correct collection (keyed by the date) using the <code>collection</code> and <code>collection_name</code> helpers. We build our events stack with the <code>events_from</code> helper, and then do an <code>upsert</code> with a <code>$push</code> to either insert or update that user's events for that day. Due to the fast performance of this scheme, we also no longer have to batch notification creation. As a sample benchmark, writing this type of notification to our <a href="https://artsy.net/artist/andy-warhol">Warhol</a> followers takes under 15 seconds.</p>

<p>Ok, so we seem to have solved some of our issues: namely writing and archiving notifications is performant, and we understand the behavior of these collections as the number of users and content on the site grows. Now let's look at how we can query against this scheme in an efficient manner, and also how we can mark events as 'seen' to avoid emailing out duplicates.</p>

<a name="Marking.Notifications.as.Flushed.and.Retrieving.Notifications"></a>
<h3>Marking Notifications as Flushed and Retrieving Notifications</h3>

<p>We decided to push a <code>flushed</code> event onto the user's stack after we send out notifications, and analogously, when we are querying a user's notifications, we want to throw away notifications that occur before a <code>flushed</code> event. Here's that method, in our <code>NotificationService</code> module:</p>

<pre><code class="ruby"># Mark all events until this point "seen." Pushes a {flushed: &lt;id&gt;}
# hash on to events array.
def self.flush!(user_id, since = Date.today - 7.days)
  flushed = { 'flushed' =&gt; Moped::BSON::ObjectId.new }
  collections_since(since).each do |coll|
    coll.find(_id: user_id).update('$push' =&gt; { events: flushed })
  end
  flushed  # return "id" of flushed marker, in case useful later
end

private

def self.collections_since(date)
  (date..Date.today).map { |d| collection(d) }
end
</code></pre>

<p>Pretty simple. We push the appropriate event onto every collection that was under consideration via the <code>collections_since</code> helper. When we send out a personalized email we accumulate the last 7 day's worth of activity for you, and so after we generate/send a mail for a user, we can simply say <code>NotificationService.flush!(user)</code>. Here's how that day's notifications for me looks after the <code>flushed</code> event:</p>

<pre><code class="json">  {"_id"=&gt;"5106b619f56337db300001f8",
   "events"=&gt;[{"t"=&gt;"NearbyShow", "o"=&gt;"5338504e139b21f2a9000362"},
              {"t"=&gt;"FollowedArtistShow", "o"=&gt;"533ddba3a09a6764f60006b6"}, {"t"=&gt;"NearbyShow", "o"=&gt;"533ddba3a09a6764f60006b6"},
              {"flushed"=&gt;"5352b346b504f5f3690002fe"}]
  }
</code></pre>

<p>For the last piece of the puzzle, let's look at how we query against this scheme and compile together all notifications that are applicable for a given user:</p>

<pre><code class="ruby">module NotificationService
  NOTIFICATION_TYPES = {
    'FollowedArtistShow' =&gt; PartnerShow,
    'FollowedPartnerShow' =&gt; PartnerShow,
    'NearbyShow' =&gt; PartnerShow,
    'ArtworkPublished' =&gt; Artwork,
    'ArtworkSuggested' =&gt; Artwork
  }

  class Notification &lt; Struct.new(:type, :object_id)
    def object
      @object ||= NOTIFICATION_TYPES[type].find(object_id)
    end

    def applicable?
      object.try(:notifiable?) || false
    end
  end

# Return applicable notifications for user since given date.
def self.get(user_id, since = Date.today - 7.days)
  collections_since(since)
    .map { |coll| coll.find(_id: user_id).one }.compact
    .flat_map { |doc| doc['events'].slice_before { |ev| ev['flushed'] }.to_a.last }
    .reject { |ev| ev['flushed'] }.uniq
    .map { |ev| Notification.new(ev['t'], ev['o']) }.select(&amp;:applicable?)
end
</code></pre>

<p>We introduce a lite-weight <code>Notification</code> class that will load the object, as well as perform an additional check. We use the previously introduced <code>collections_since</code> helper to retrieve all the notification collections under consideration. We query each and build up an array of all events from a user's stack. We remove events that occurred prior to a <code>flushed</code> event in a given collection and the <code>flushed</code> events themselves. Then we actually load all the objects and return the ones that are still <code>applicable?</code>. That final <code>applicable?</code> check is to allow us to filter out content at run-time that is no longer valid. For example, if an artwork is published and the correct event is written out to users, but before the user can be notified the artwork is unpublished, this can serve as a run-time check to not include that work. <code>def notifiable?</code> can thus be implemented in the <code>Artwork</code> model like so:</p>

<pre><code class="ruby">def notifiable?
  published?
end
</code></pre>

<p>And...that's basically it! Throughout the week as partners are uploading their shows/fair booths/artworks, these records are being opportunistically written to that day's notification collection, in a performant and scalable fashion. Then when we want to send you a personalized email, we pull all your appropriate notifications via the <code>get</code> routine in our <code>NotificationService</code>, and primarily using the technique described in <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a> we make sure we cache/memoize all such data. Using the tips in <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a> we can render this content and support various devices/email clients. We parallelize and batch the generation/sending of our e-mails as well. This whole system, from notification generation to actually emailing users, is running successfully and smoothly in production.</p>

<a name="Next.Steps"></a>
<h3>Next Steps</h3>

<p>I think this type of infrastructure can easily be adapted to serve as a feed on a front-end or other client app. An API to serve up these notifications (AKA feed items) can be built and different feed items can then be rendered or aggregated at load-time. Simple client-side polling can even be set up to alert a user if something has happened that interests them <em>while</em> they're browsing! I think push notifications and other messaging can be handled by this system as well.</p>

<p>I'd love to hear any feedback and thoughts, and hopefully you've found this post informative and interesting. Please leave any feedback in the comments and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Helper to Group Artworks into a Pinterest-style Layout for Email]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/"/>
    <updated>2014-03-17T19:32:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email</id>
    <content type="html"><![CDATA[<p><img src="/images/2014-03-17-ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/two-column-layout.png" alt="Example of two column layout" /></p>

<p>Something we'd like to do is email our users some suggested artworks as part of their personalized emails. The layout of those suggestions should look something like our newly re-designed <a href="https://artsy.net/browse/artworks?price_range=-1%3A1000000000000">Browse</a> page, with a 'salon' style layout. Here's some simple Ruby code that can group artworks into columns for you, that can then be directly rendered in an email (via <a href="http://haml.info/">Haml</a>, <a href="http://mustache.github.io/">Mustache</a>, <a href="http://jade-lang.com/">Jade</a>, or your templating language of choice.)</p>

<!-- more -->


<a name="The.code"></a>
<h2>The code</h2>

<p>First let's look at the code, and then I'll describe it:</p>

<pre><code class="ruby">module ArtworkColumns
  # Return an array of artworks grouped together in sub arrays by being added to the shortest 'column'
  # based on a fixed width and aspect ratios.
  #
  # @param {Array} artworks The array of artworks to group into columns
  # @param {Number} num_columns The number of columns to group them into
  # @param {Number} width The width the images will be displayed at
  #
  # @return {Array} An array of artworks grouped into sub arrays by being added to the shortest one.
  def self.artwork_columns(artworks, num_columns, width)
    artwork_cols = []

    # Initialize columns
    num_columns.times do
      artwork_cols &lt;&lt; []
    end

    artworks.each do |artwork|
      add_to_shortest_column!(artwork_cols, artwork, width)
    end

    artwork_cols
  end

  private

  # Adds artwork to shortest column
  def self.add_to_shortest_column!(artwork_cols, artwork, width)
    min_height = column_height(artwork_cols[0], width)
    min_column_idx = 0

    artwork_cols.each_with_index do |column, idx|
      height = column_height(column, width)
      if height &lt; min_height
        min_height = height
        min_column_idx = idx
      end
    end

    artwork_cols[min_column_idx] &lt;&lt; artwork
  end

  # Calculate sum of heights of artworks in column
  def self.column_height(artwork_col, width)
    height = 0
    artwork_col.each do |artwork|
      if (aspect_ratio = artwork.default_image.aspect_ratio)
        height += (width / aspect_ratio).floor
      else
        height += width
      end
    end
    height
  end
</code></pre>

<p>The algorithm is quite simple (original JS idea and implementation courtesy of Artsy's <a href="https://github.com/gib">Gib</a>). The inputs are fairly obvious, an array of artworks to be grouped, the number of columns to group them into, and the width of each column.</p>

<p>We then simply iterate over all our artworks, and add them to whichever column is shortest. This way we end up with several columns that are for the most part equally sized in height, and as they all have different aspect ratios, when they are rendered in a table, you wind up with a nice looking 'dynamic' layout. The height of each column is calculated as the sum of the heights of the artworks in each column. The heights are derived from the inputted widths and aspect ratios of the images.</p>

<p>Here's how you might iterate over the returned column groupings and render a layout similar to the above:</p>

<pre><code class="haml">- artwork_suggestions.each_with_index do |artwork_arr, idx|
  %td{ id: 'artwork-column', style: "width: 290px;padding-top:20px;text-align:left;" }
    - artwork_array.each do |artwork|
      %a{ href: "#{canonical_url}/artwork/#{artwork.slug}?#{@utm_params}" }&lt;
        %img{ id: 'artwork', src: "#{artwork.default_image.image_url(:large)}", style: "width: 290px;" }
      %br
      &lt;!-- additional artwork details, title, artist, etc. --&gt;
</code></pre>

<p>These few lines of Ruby code have allowed us to move logic out of Haml (yuck!) and into Ruby (yay!) and allow <a href="http://haml.info/">Haml</a> to just focus on rendering the objects passed in (certainly via loops and conditionals, etc.)</p>

<p>That's all for now! In my next post I'll talk about how I use the Presenter pattern and memoization to move even more logic out of templates (and save some database calls while we're at it!)</p>

<p>Thanks again! Post any comments or tips of your own here, and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Tips for Email Layout and Responsiveness]]></title>
    <link href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/"/>
    <updated>2014-03-17T12:36:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness</id>
    <content type="html"><![CDATA[<p><img src="/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/analytics.png" alt="Example of Analytics Email" /></p>

<p>Email can be one of the most powerful ways to engage with your users, and can serve a multitude of purposes. It can be used as a way to highlight selected content (weekly/monthly newsletters, 'year in review', etc.), provide a service to users (analytics breakdown of visits to your profile/favorites page), or re-engage with users (new feature announcements, etc.). Here at Artsy we use all of these kinds of emails and have found them to be a very valuable asset. However, best practices for template layout and CSS (keeping in mind the variety of devices and screen sizes that your users have) are quite different from, and very far behind, the current HTML5 standards and practices for making beautiful web pages. In this article, I'd like to present some techniques I've successfully used at Artsy to create emails that look good on your browser or mobile device, in some of the most popular email clients out there.</p>

<!-- more -->


<a name="The.Main.Difference.Between.Email.and.Web"></a>
<h2>The Main Difference Between Email and Web</h2>

<p>A fundamental difference between email and web, and which essentially accounts for the completely different methodology and rules you should follow for emails, is that of the rendering client. In 2014, (assuming you are not supporting certain legacy versions of Internet Explorer and other old versions), browsers for the most part will render passed in HTML and CSS in a standard fashion. While there are some notable exceptions still, graceful degradation is quite possible. That is because the only 'interpreter' of your HTML is the end user's browser, which operates under a certain set of known rules. With emails however, the interpreter is the end user's mail client of choice, which can be: native iOS apps, web apps, and even standalone desktop applications. All of these do their own parsing/interpreting before rendering, which can cause HTML that results in a nice looking web page to look totally broken in an email, as well as the same exact email looking remarkably different across mail clients. One of the main reasons why email clients do this is to remove things that might interfere with the rendering of the mail client itself, or any security risks.</p>

<p>Also of note is that the use of Javascript within an email is of course, not possible. Additionally, the HTML that will be emailed to your users needs to be sent as one file with inlined CSS. You can use a tool like <a href="https://github.com/premailer/premailer/">premailer</a> to allow you to develop your CSS separately and then convert to an inline style.</p>

<a name="Some.Basics.about.Tables"></a>
<h2>Some Basics about Tables</h2>

<p>Yes, it's 2014, and yes, we're going to talk about tables on an engineering blog. That's because for emails, tables are going to be your main tool to position and lay out your content. Two of the most common CSS selectors (<code>position</code> and <code>display</code>) are bad ideas to use in email. They are mostly unsupported by mail clients (which will reach in and rewrite your HTML/CSS) and will lead to unexpected looking output. However, you can achieve virtually any layout desired using tables.</p>

<p>Here is sample HTML that generates the top part of the email shown above. While it may make your eyes bleed from the table use, notice we are able to achieve the beginnings of a basic 3-column layout, with equal-width columns and centered headers/text with no position-related CSS.</p>

<p>``` html</p>

<table border='0' cellpadding='0' cellspacing='0' style='margin: 0 20px; table-layout: fixed;' width='600px'>
  <tr>
    <td align='center' colspan='3' style='padding: 0px 0px 15px' valign='middle'>
      <font color='black' style='font-family: Georgia, serif;font-size: 16px; line-height: 1.3em; letter-spacing:2px;text-transform:uppercase;'>
        Cats Galore at the Cat Art Fair 2014
      </font>
    </td>
  </tr>
  <tr>
    <td align='left' style='padding: 0px 0px 15px; border-right: 1px solid grey;' valign='middle'>
      <font color='black' style='font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;'>
        <div style='text-align: center; font-size: 23px;'>
          24
        </div>
        <div style='text-align: center;'>
          works
          in your booth
        </div>
      </font>
    </td>
    <td align='middle' style='padding: 0px 0px 15px; border-right: 1px solid grey;' valign='middle'>
      <font color='black' style='font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;'>
        <div style='text-align: center; font-size: 23px;'>
          3,086
        </div>
        <div style='text-align: center;'>
          total artwork views
        </div>
      </font>
    </td>
    <td align='right' valign='middle'>
    <font color='black' style='font-family: Georgia, serif;font-size: 16px; line-height: 1.3em;'>
      <div style='text-align: center; font-size: 23px;'>
        471
      </div>
      <div style='text-align: center;'>
        cities reached
      </div>
    </font>
    </td>
  </tr>
  <!-- more content below -->
</table>


<pre><code>
Now under this we present a heatmap and table of top views by city. For that we use the same 3-column table, except specify a colspan of 2 on the column that contains the heatmap. That is because we would like that column to take up a width equal to the first 2 columns of the equally spaced three at the top, and the table of top views will take up the last column. Here's that markup:
</code></pre>

<pre><code>&lt;tr&gt;
&lt;td align='left' colspan='2' style='padding: 0px 0px 15pxl; width: 66%;' valign='middle'&gt;
  &lt;div&gt;
    &lt;img src='link_to_heatmap.png' width='400px'&gt;
  &lt;/div&gt;
&lt;/td&gt;
&lt;td align='right' style='padding: 0px 23px 15px; width: 33%; text-align:left;' valign='middle'&gt;
  &lt;font color='black' style='font-family: Georgia, serif;font-size: 12px; line-height: 1.3em; font-weight:bold;'&gt;
    Top 10 Cities
  &lt;/font&gt;
  &lt;font color='black' style='font-family: Georgia, serif;font-size: 12px; line-height: 1.3em;'&gt;
    New York
    21.66%
    &lt;br&gt;
    London
    3.34%
    &lt;br&gt;
    &lt;!-- 'br' separated string of views --&gt;
  &lt;/font&gt;
&lt;/td&gt;
</code></pre>

<p>  </tr>
```</p>

<p>Notice that again we are using no position or display related CSS. However, now our table has a 3 column section and a 2 column section, and we are well on our way to creating a nice email! I kept these as separate rows in the same table, but could have equivalently had each of them be their own table with no ill effects and almost the same markup. Depending on your design and layout, you may need to have multiple tables (nested and not) to support different widths and column layouts, however they should all just <em>work</em>.</p>

<a name="Background.Images.and.Overlayed.Text"></a>
<h2>Background Images and Overlayed Text</h2>

<p>Ok, so tables are all well and good and you can achieve a lot using them, and without having to use any display or position CSS. But what if you want to overlay text on an image? (or even another image over an image)? On a web page, there are many ways to accomplish that, but they all use CSS that you really should not be using in emails (namely: <code>position</code>, <code>display</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, and most layout properties besides padding. Also, no negative padding please!). But no worries, because you can still accomplish that using background images!</p>

<p>Here is an example from our current welcome mail to users:</p>

<p><img src="/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/welcome_desktop.png" alt="Example of Welcome Mail" /></p>

<p>The top part (the iPhone pic) is actually two images (the picture, and the App Store logo), as well as some text overlayed on top. Here is the HTML to accomplish that:</p>

<p>``` html</p>

<table cellpadding='0' cellspacing='0' id='iphone-table' style='border: 0;padding:10px 0px 15px 0px;width:625px' width='625'>
  <tr>
    <td align='left' valign='middle'>
      <table background='link_to_phone.png' cellpadding='0' cellspacing='0' height='265' style='height:265px;width:625px' width='625'>
        <tr>
          <td style='padding-top:57px;padding-right:53px;padding-left:375px;text-align:center;'>
            <div style='line-height:26px;'>
              <font style='text-transform: uppercase; font-size: 19px; font-family: Georgia, serif; color: white;-webkit-font-smoothing:antialiased;'>
                Download Artsy for iPhone
              </font>
            </div>
            <div style='padding-top:10px;'>
              <font style='font-size: 14px; font-family: Georgia, serif; color: white;-webkit-font-smoothing:antialiased;'>
                The art world in your pocket.
              </font>
            </div>
          </td>
        </tr>
        <tr>
          <td align='right' style='padding-right:82px;vertical-align:top;'>
            <a href='https://itunes.apple.com/us/app/artsy-art-world-in-your-pocket/id703796080?ls=1&amp;mt=8'>
              <img src='app_store.png' style='border: none; outline: none; vertical-align:top;' width='140px'>
            </a>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>


<pre><code>
I chose to use a separate table to hold this content, where the background image for this table is the picture of the iPhone in hand. That table (with a background of the photo) has two rows, each with one column. The first row which is for the top part of the image, contains the 'Download' white text. That is positioned within the column through padding, which is well supported by most mail clients (as long as it's positive padding that is!) The second row, for the bottom part of the image, is a picture of the 'Download on the App Store' logo, and we chose to put that in an anchor tag and link to the App Store. You could have alternatively made this image a background as well to achieve the same overlay effect, as well as added more overlaid text, etc.

Essentially, to overlay text on images, and images on images - your only option in email is to use background images.

## Mobile Responsiveness

Ok, at this point we know how to craft some 'dynamic' layouts, (multi-column, sidebar, etc) and can overlay text and images for added effect. Now let's think about how this should work/look on a mobile device. Media queries will be our tool of choice here (well supported by mobile mail clients, with a notable exception being the Gmail iOS app.)

Something to keep in mind, depending on your use case, is to potentially design the email in the first place with mobile in mind. This can mean larger font sizes across the layout, as well as a single or two column layout max for your content. Since you have much less screen space to work with on mobile, the media queries we are going to use will largely be to increase font sizes, as well as using 'width' and 'float' to force a two column layout into one column (as an example). Depending on the mail design, this can be simple to do, or quite tricky. It's worth considering this in your initial designs.

Now the first thing to do is to include the following meta tag in your HTML:
</code></pre>

<p>  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
```</p>

<p>This will tell the browser to treat the viewport size as the size of the device that is being used. This combined with media queries will enable us to create mobile emails.</p>

<p>As an example, consider the following two images. The first is the desktop version of the top part of a personalized weekly mail (blog post on how we efficiently generate these to come!), and the second is the mobile version of that same mail.</p>

<p><img src="/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_desktop.png" alt="Example of Personalized Desktop" /></p>

<p><img src="/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_summary.png" alt="Example of Personalized Mobile" /></p>

<p>The markup for this is pretty vanilla (similar to above, 3 column layout in a table). For mobile, we want to left-align everything and trim things down to one column. Of note here is that we are truncating text with ellipsis in the desktop version, and when the content reflows to one column we actually have <em>more</em> room to reveal the text (but still keeping truncation in just in case), so we have to enclose the text in a <code>div</code> (must have a block element for truncation)</p>

<p>Here is how we truncate text:</p>

<pre><code class="html">  &lt;div id='row-to-expand' style='white-space:nowrap;overflow:hidden;text-overflow:ellipsis;width:150px;'&gt;
    Some really long text that will get truncated
  &lt;/div&gt;
</code></pre>

<p>We specify a width on a block-level element and then use the ellipsis trick. Here's another screenshot of the truncation in action:</p>

<p><img src="/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_shows.png" alt="Example of Shows Listing" /></p>

<p> Our first media query can be something like:</p>

<pre><code class="css">  @media (max-device-width: 320px){
    div[id='row-to-expand']{
      width: 260px !important;
    }
  }
</code></pre>

<p>We've set the breakpoint at 320px (vertical layout on an iPhone), and at widths less than or equal to that, this rule will kick in. Note the '!important' at the end (all of our media queries will have that to allow them to override the existing inline CSS). This is enough to expand that div and reveal more text.</p>

<p>Here's the media queries for the rest of this section that transforms the three column layout into one:</p>

<pre><code class="css">  @media (max-device-width: 320px){
    td[id='summary-col']{
      float: left !important;
    }
    td[id='summary-header']{
      float: right !important;
      width: 300px !important;
    }
    td[id='nested-summary-col']{
      width: 300px !important;
      float: left !important;
      padding: 0px !important;
    }
    table[id='summary']{
      width: 300px !important;
    }
  }
</code></pre>

<p>where the <code>td[id='nested-summary-col']</code> are the <code>td</code>s that hold the thumbnail and artist or gallery name.
Essentially all we are doing is changing the width of the container/parent table to 300px, and then making the width of each <code>td</code> 300px and adding a float. This will force your table to now be a one column layout- easy!</p>

<a name="Some.misc..email.tweaks"></a>
<h3>Some misc. email tweaks</h3>

<p>Sometimes it becomes necessary to hide/show certain things for mobile or desktop. This can be a bit tricky due to not being able to use <code>display:none;</code> , so here are a few things I've found that worked:</p>

<ul>
<li><code>width: 0px;</code> (works for hiding images)</li>
<li><code>line-height: 0px;</code> (works for hiding text)</li>
<li><code>font-size: 0px;</code> (works for hiding text)</li>
</ul>


<p>Another thing you might encounter is that text links automatically become blue in email. This is because many mail clients will take an un-styled or black link text and make them a default blue color. An easy hack to get around this is to explicitly color your links something like '#000001'. This 'almost-black' will be left untouched by mail clients, yet is close enough to black that the naked eye can't perceive the difference.</p>

<p>Here's a screenshot of an <a href="https://github.com/desandro/isotope">isotope</a> or <a href="https://www.pinterest.com/">Pinterest</a> column style layout, with truncation of text, and resized for mobile (running the full gamut of tricks):</p>

<p><img src="/images/2014-03-17-some-tips-for-email-layout-and-responsiveness/personalized_suggestions.png" alt="Example of Personalized Suggestions" /></p>

<p><a href="https://gist.github.com/mzikherman/9610125">Here is a gist</a> I use to prepare artworks for a columnar display like this. You pass in a collection of artworks (where each artwork is arbitrarily sized), and the number of columns and width of the desired output. It will return the artworks grouped into columns that can be directly rendered in an email, while respecting aspect ratios and ensuring the columns are of <em>approximately</em> equal height - resulting in a dynamic feeling layout. For this email, we group this set of artworks into 2 coumns, with each column having a width of 300px (for desktop).</p>

<a name="Great.tools.to.use:"></a>
<h2>Great tools to use:</h2>

<ul>
<li><a href="https://github.com/premailer/premailer/">Premailer</a> This will enable you to develop CSS in a sane (ie- not inline) way, and then at generation/compile time, inline it for you.</li>
<li><a href="http://litmus.com/">Litmus</a> Using Litmus's VM's with different OS's and mail clients, you can preview how a sample email will look among all sorts of different configurations. I recommend figuring out what mail clients/browsers/OS's you want to target and making sure you test all your emails here.</li>
<li><a href="http://haml.info/">Haml</a> (or any templating language of choice). A lot of the blocks of content in our mails are dynamically generated, and Haml's conditionals and looping syntax, as well as
Ruby-style string evaluation has proven invaluable.</li>
</ul>


<hr />

<p>That's all for now! With a lot of trial and error, I've built up a toolbelt of tricks, techniques and hacks I've been using to develop responsive and pretty emails quickly. I think of the limited set of tools at my disposal as a puzzle with which you can still create great looking and responsive layouts to feature your content. Previewing mails using <a href="http://mailchimp.com/features/inbox-inspector/">Inbox Inspector</a> have enabled me to craft, deploy, and send them to our users with confidence. Post any comments or tips of your own here, and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Normalizing GMail E-Mail Addresses with CanonicalEmails]]></title>
    <link href="http://artsy.github.io/blog/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails/"/>
    <updated>2013-06-23T12:21:00+00:00</updated>
    <id>http://artsy.github.io/blog/2013/06/23/normalizing-gmail-email-addresses-with-canonical-emails</id>
    <content type="html"><![CDATA[<p>A whopping 49% of Artsy users have "gmail.com" email addresses. The next domain name, "hotmail.com", doesn't even come close, with only 6%.</p>

<p><img src="/images/2013-06-23-normalizing-gmail-email-addresses-with-canonical-emails/artsy-email-domains.png" /></p>

<p>GMail addresses ignore periods and are case-insensitive. For example, "Donald.Duck@gmail.com" and "donaldduck@gmail.com" are the same account. You can log-in to GMail with both. Users often register with the former and try to log-in to Artsy with the latter. With so many GMail users, expect a dozen support emails per day.</p>

<p>The solution is to normalize these emails into a canonical form.</p>

<!-- more -->


<p>We use our newly open-sourced gem called <a href="https://github.com/dblock/canonical-emails">canonical-emails</a>. It patches <code>Mail::Address</code> methods at runtime.</p>

<pre><code class="ruby">module CanonicalEmails
  module GMail
    def self.transform(value)
      Mail::Address.new(value).tap do |email|
        if email.domain &amp;&amp; [ "gmail.com" ].include?(email.domain.downcase)
          email.instance_eval do
            def get_local
              value = super
              value.gsub(".", "").downcase if value
            end
            def domain
              value = super
              value.downcase if value
            end
          end
        end if value
      end
    end

  end
end
</code></pre>

<p>It would be great to see contributions to our gem if you have knowledge of special handling with other email providers!</p>

<p>On the application side, Artsy stores both the original email address entered by the user and the canonical representation and perform all lookups by the canonical value.</p>

<pre><code class="ruby">class User
  include Mongoid::Document
  include CanonicalEmail::Extensions

  field :email, type: String
  field :lookup_email, type: String
  before_save :update_lookup_email
  canonical_email :email, CanonicalEmails::GMail, CanonicalEmails::Downcase

  def self.find_by_email(email)
    email = CanonicalEmails::GMail.transform(email).to_s
    email = CanonicalEmails::Downcase.transform(email).address
    first(lookup_email: email)
  end

  private

  def update_lookup_email
    self.lookup_email = self.canonical_email
  end

end
</code></pre>

<p>What is your email domain breakdown? Here's the MongoDB/Mongoid/ruby map/reduce that I used to get the graph above.</p>

<pre><code class="ruby">map = %Q{
  function() {
    emit((this.email).split("@")[1], { count: 1 });
  }
}

reduce = %Q{
  function(key, values) {
    var result = { count: 0 };
    values.forEach(function(value) {
      result.count += value.count;
    });
    return result;
  }
}

User.all.map_reduce(map, reduce)
  .out(inline: true)
  .sort_by{ |v| -v["value"]["count"] }
  .take(10)
  .map { |v| { v["_id"] =&gt; v["value"]["count"] / User.count }}
</code></pre>

<p>Raw output for our top 10.</p>

<pre><code>[
  { "gmail.com" =&gt; 0.49 },
  { "hotmail.com" =&gt; 0.06 },
  { "yahoo.com" =&gt; 0.057 },
  { "aol.com" =&gt; 0.017 },
  { "me.com" =&gt; 0.015 },
  { "mac.com" =&gt; 0.012 },
  { "comcast.net" =&gt; 0.008 },
  { "msn.com" =&gt; 0.003 },
  { "mail.ru" =&gt; 0.003 },
  { "verizon.net" =&gt; 0.003 }
]
</code></pre>
]]></content>
  </entry>
  
</feed>
