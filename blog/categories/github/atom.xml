<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Reverts: Rolling Forward While Rolling Back]]></title>
    <link href="http://artsy.github.io/blog/2017/10/26/Git-Reverts/"/>
    <updated>2017-10-26T14:18:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/10/26/Git-Reverts</id>
    <content type="html"><![CDATA[<p>I don‚Äôt revert code changes often. Usually, I‚Äôm a fan of "rolling forward" with a fix, rather than rolling back. But sometimes, revert-and-fix is just the ticket. I had to do so recently, and it brought up some interesting challenges, so I thought I‚Äôd share.</p>

<!-- more -->


<p>Here‚Äôs the scenario. Some recent changes I was making to Gravity, our core API service, had a pretty big ripple effect. Gravity is a big app, with over 100k LOC, so the tests take a long time to run. For this reason, we have our CI server set up to only run the tests it thinks are applicable for the changes in each commit in a pull request. That way, we can get pretty fast feedback on individual commits. But because Ruby is dynamic, the detection of which tests to run is imperfect. So, we run all the tests when a PR is merged to <code>master</code>, as a blocking step before the changes are actually deployed to our staging environment.</p>

<p>This makes it possible to ‚Äúbreak the build‚Äù, where the <code>master</code> branch no longer is valid with respect to its tests, which is exactly what happened. The staging build of my changes failed, and it rendered our whole team unable to ship changes until the build was fixed.</p>

<blockquote><p>Eek!</p></blockquote>

<p>No big deal, that‚Äôs what reverts are for, and GitHub makes it quite easy to revert a pull request. If nobody merged anything to <code>master</code> that required conflict resolution with the changes in your PR, you can pretty much painlessly and immediately revert. Which I did.</p>

<blockquote><p>Great!</p></blockquote>

<p>Now I had time to fix those tests, without worrying about blocking anyone. I checked out the original branch and pretty quickly figured out what changes I needed to make to fix the tests. Then I pushed that branch up to origin to make a new PR.</p>

<blockquote><p>Drat! Merge conflicts. Right, I need to either merge or rebase from <code>master</code> to get everything up-to-date.</p></blockquote>

<p>And that‚Äôs when I hit the problem. Now that I had reverted my original changes, those <em>undos</em> are considered the canonical history, rather than the original changes I had tried to make! So both <code>git merge master</code> and <code>git rebase master</code> left me with only the tiny fixes to the failing tests, but my actual meaningful changes still removed.</p>

<blockquote><p>Conundrum.</p></blockquote>

<p>The solution I came up with was to <em>revert my revert</em>. The PR that the original revert button created also presented a revert button after it was merged. So I hit that button, and it created an amusingly titled <code>Revert "Revert ‚ÄúMy original title‚Äù‚Äù</code>. I <code>git stash</code>d my fixes, <code>git fetch</code>d the branch GitHub created for this newest PR down to my local, and <code>git checkout</code>d the this branch. This effectively was my original changes on top of their rollback, on top of those same changes ‚Äî crucially, with changes other developers had made in the meantime mixed in there somewhere. I then <code>git stash pop</code>d my fixes.</p>

<blockquote><p>Phew!</p></blockquote>

<p>In conclusion, rolling back presents some interesting challenges, in the context of how Git considers history. If I've messed up a local branch, I might just give up and <code>git reset --hard</code> to get it back to a known good commit. But when it comes to the <code>master</code> branch, you have to be able to wiggle your way out of tricky situations. GitHub‚Äôs reverts are a viable option for keeping the <em>history</em> rolling forward as you undo and redo work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using GitHub Issues for Blog Comments]]></title>
    <link href="http://artsy.github.io/blog/2017/07/15/Comments-are-on/"/>
    <updated>2017-07-15T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/07/15/Comments-are-on</id>
    <content type="html"><![CDATA[<p>I've worked on a few large-scale OSS projects, and I believe that people find it easier to just leave a comment and rely on a contributor to explain a problem rather than consulting the documentation. I consider doing everything you can to make people find their own answers a strong part of <a href="/blog/2016/07/03/handling-big-projects/">defensive open source</a>.</p>

<p>For the posts I write, I have an even lower tolerance for comments. For example, I added the ability to turn off comments per-post and haven't allowed comments on any posts I've written here. A lot of transitory discussion around an article happens on twitter via <a href="https://twitter.com/ArtsyOpenSource/">@ArtsyOpenSource</a>.</p>

<p>I'm willing to give it another shot though, and so I got around to creating a simple system for allowing opt-in comments on posts using GitHub Issues. The rest of this post will be about how you can do it also, and a bit about why I think GitHub Issues are a happy medium for the comments.</p>

<!-- more -->




<div><div class="comment"><div class="comment-header"><a class="comment-username" href="https://github.com/orta"><img src="https://avatars6.githubusercontent.com/u/49038?v=4" alt="" width="40" height="40">orta</a> commented <a class="comment-date" href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-313158506">2 days ago</a></div><div class="comment-body"><p>Comments can be worth a shot.</p>
<p>With a static site like ours it can be a bit tricky, but with an external server and some simple JavaScript it can work out <g-emoji alias="+1" fallback-src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png" ios-version="6.0">üëç</g-emoji>.</p></div></div></div>


<a name="Getting.set.up"></a>
<h1>Getting set up</h1>

<p>The general concept is that you have some JavaScript in your page which requests a list of comments from GitHub. These are available as a JSON API, you can grab that then style the results. Sounds easy right?</p>

<p>Turns out to be a bit more complicated. GitHub's API has rate-limits for IP addresses, and they're reasonably low. So, you'll want to use authenticated requests, but you don't really want to include your access tokens inside the JavaScript on your blog.</p>

<p>I've worked around this with a project called <a href="https://github.com/orta/gh-commentify">gh-commentify</a>, a node app whose job is to wrap your comment API requests with an access token. You can create your own instance on heroku using <a href="https://heroku.com/deploy?template=https://github.com/orta/gh-commentify">this link</a>. It gets scoped to a single org/user, so you can avoid others using your heroku instance for their blog.</p>

<p>From there you need to be able to declare in a post what issue it is hooked up to. This blog uses Jekyll, which has <a href="https://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a> on posts. So, I edited our post templates to look for a key <code>comment_id</code>.</p>

<p>From there you need to grab the comments JSON, and move them into the DOM.</p>

<p>I based my work on these two posts:</p>

<ul>
<li><a href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html">GitHub hosted comments for GitHub hosted blogs</a></li>
<li><a href="http://donw.io/post/github-comments/">Replacing Disqus with Github Comments</a></li>
</ul>


<p>However this version is more reliable (GitHub authenticated requests) and has fewer dependencies (no jQuery for example).</p>

<p>
<code>html
{% if page.comment_id %}
  &lt;article class='post'&gt;
    {% include gh_comments.html %}
  &lt;/article&gt;
{% endif %}
</code>
</p>

<p>This then imports the required JavaScript into the page. It feels a lot like this:</p>

<p></p>

<pre><code class="javascript">var writeToComment = function(element, html) {
  var element = document.createElement(element)
  element.innerHTML = html
  document.getElementById("comments").appendChild(element)
}

var loadComments = function(data) {
  writeToComment("h2", "Comments")

  for (var i = 0; i &lt; data.length; i++) {
    var commentHTML = [...]
    writeToComment("div", commentHTML)
  }

  var callToAction = [...]
  writeToComment("div", callToAction)
}

var writeFirstComment = function() {
  var callToAction = [...]
  writeToComment("div", callToAction)
}

// This is mostly there now: http://caniuse.com/#feat=fetch
if (window.fetch) {
  var url =
    "https://artsy-blog-gh-commentify.herokuapp.com/repos/artsy/artsy.github.io/issues/{{ page.comment_id }}/comments"

  window
    .fetch(url, { Accept: "application/vnd.github.v3.html+json" })
    .then(function(response) {
      return response.json()
    })
    .then(function(json) {
      if(json.length) {
        loadComments(json)
      } else {
        writeFirstComment()
      }
    })
}
</code></pre>

<p></p>

<p>No-one is going to award this JavaScript with a prize for elegance, but it works just fine. That's basically it, you can edit the DOM however you want.</p>

<p>The full PR for these changes is here: <a href="https://github.com/artsy/artsy.github.io/pull/363">artsy.github.io#363</a> - and you can see the current <a href="https://github.com/artsy/artsy.github.io/blob/source/_includes/gh_comments.html">HTML/JS here</a>.</p>

<a name="Styling"></a>
<h1>Styling</h1>

<p>The style of our comments are built to evoke the GitHub UI for issues. This is done to prime people for a relatively different type of comment creation, but still feel like it's a part of the Artsy OSS style.</p>

<p><img src="/images/comments-are-on/example-comment.png"></p>

<div><div class="comment"><div class="comment-header"><a class="comment-username" href="https://github.com/orta"><img src="https://avatars6.githubusercontent.com/u/49038?v=4" alt="" width="40" height="40">orta</a> commented <a class="comment-date" href="https://github.com/artsy/artsy.github.io/issues/355#issuecomment-313158506">10 days ago</a></div><div class="comment-body"><p>This is done and dusted.</p>
</div></div></div>


<a name="Why.GitHub."></a>
<h1>Why GitHub?</h1>

<p>It's easier for you to keep track of the conversations, you're likely already having a lot of conversations in a place like GitHub. This means you can use the same flow and tools as your daily job, not relying on a third party service's emails.</p>

<p>You have good admin tools: you can edit comments, block and report problematic users. These are tools that you have for all repos.</p>

<p>People will be using their developer accounts, which I'd like to hope they will take pride in. You're probably more likely to get high quality responses. The lack of threading is a bit of a shame in this context, but we've lived with it in GitHub Issues for this long, so I'm OK with this.</p>

<p>This setup makes it trivial to drop comments from the blog anytime, and you still have all the comments around in a constructive way after. We don't have to hope that other services have export features and open data. Everything public is <a href="https://github.com/blog/2298-github-data-ready-for-you-to-explore-with-bigquery">open data</a> on GitHub.</p>

<p>So: low maintenance, works on static sites, data isn't silo-ed and it's more likely to result in positive interactions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Uses GitHub to Build Artsy]]></title>
    <link href="http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy/"/>
    <updated>2012-01-29T14:26:00+00:00</updated>
    <id>http://artsy.github.io/blog/2012/01/29/how-art-dot-sy-uses-github-to-build-art-dot-sy</id>
    <content type="html"><![CDATA[<p><a href="http://zachholman.com/">Zach Holman</a> gave a good talk on <a href="http://zachholman.com/talk/how-github-uses-github-to-build-github">How GitHub uses GitHub to build GitHub</a> at Rubyconf. It was great to hear how similar our own processes are at Artsy, with a few notable differences.</p>

<p>Artsy engineers store almost everything on GitHub. We use GitHub Wikis, but don't use GitHub Issues much. We work in 3-week sprints with <a href="http://pivotaltracker.com/">Pivotal Tracker</a> instead. This blog is on GitHub. And, of course, we have our own Hubot which feeds funny animated GIFs after each successful deploy to our IRC channel.</p>

<p>The most interesting part for me was around these two slides.</p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull.png" alt="Pull" /></p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-fork.png" alt="Fork" /></p>

<p>Zach emphasized that you don't need forks to make pull requests. While technically true, I find forks particularly useful to keep things clean.</p>

<p>At Artsy we use personal forks to work on features, create topical branches and make pull requests into the master from there. This is the workflow of the vast majority of open-source projects too. Now, Zach is right, you don't want to create any second class developers - our entire team has write access to the master. We use pull requests from forks to do peer code reviews, even for trivial things. I would typically make a pull request including the person I'd like to code review my changes in the title. Here's an example.</p>

<p><img src="/images/2012-01-29-how-art-dot-sy-uses-github-to-build-art-dot-sy/github-pull-request.png" alt="Targeted Pull Request" /></p>

<p>(Notice the use of hash rocket. Zach, Ruby has transcended our lives too.)</p>

<p>Working on forks keeps developer branches away from "master". The main repository only has three branches: "master", "staging" and "production" and each developer can make up whatever branching strategy they like in individual forks.</p>

<p>Code reviews have nothing to do with hierarchy or organization, any developer will code review any other developer's work. We tend to avoid using the same person for two subsequent code reviews to prevent excessive buddying. Zach called his pull requests "collective experiments" - a place for active discussions, rejections and praise. I really like that. Each of my rejected pull requests has been a great learning experience.</p>
]]></content>
  </entry>
  
</feed>
