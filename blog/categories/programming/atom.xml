<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Conditional types in TypeScript]]></title>
    <link href="http://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript/"/>
    <updated>2018-11-21T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/11/21/conditional-types-in-typescript</id>
    <content type="html"><![CDATA[<p>This year TypeScript gained a new feature that punches far above its weight.</p>

<blockquote><p>Working through our (enormous) backlog of unsorted TypeScript "Suggestions" and it's remarkable how many of them
are solved by conditional types.</p></blockquote>

<p>-- <a href="https://twitter.com/SeaRyanC/status/1029846761718702081">Ryan Cavanaugh</a>, TypeScript maintainer</p>

<p>Conditional types probably aren't something you'll write every day, but you might end up using them indirectly all
the time. That's because they're great for 'plumbing' or 'framework' code, for dealing with API boundaries and
other behind-the-scenes kinda stuff. So, dear reader, read on! It's always good to learn how the sausage is made.
Then you can make sausage of your own.</p>

<p>Typewurst! üå≠</p>

<!-- more -->


<p><em>Note: This is a straightforward adaptation of a 35-minute presentation given at
<a href="https://www.meetup.com/Futurice-London-Beer-Tech/events/255295412/">Futurice London's TypeScript Night meetup</a>,
and therefore provides more context than an ordinary blog post might. I hope a lot of that context is interesting
and useful even for seasoned TypeScript developers. If you'd prefer a no-frills experience, check out the
<a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html">TypeScript 2.8 Release notes</a> .</em></p>

<a name="Your.first.conditional.type"></a>
<h2>Your first conditional type</h2>

<p>Here's some plain JavaScript</p>

<pre><code class="ts">function process(text) {
  return text &amp;&amp; text.replace(/f/g, "p")
}

process("foo").toUpperCase()
</code></pre>

<p>Reading the code, it's clear to a human that the <code>.toUpperCase()</code> method call is safe. We can tell that whenever a
string is passed in to <code>process</code>, a string will be returned.</p>

<p>But notice that we could also pass something like <code>null</code> into the function, in which case <code>null</code> would be returned.
Then calling <code>.toUpperCase()</code> on the result would be an error.</p>

<p>Let's add basic types to this function so we can let TypeScript worry about whether we are using it safely or not.</p>

<pre><code class="ts">function process(text: string | null): string | null {
  return text &amp;&amp; text.replace(/f/g, "p")
}
</code></pre>

<p>Seems sensible. What happens if we try to use it like before?</p>

<pre><code class="ts">//            ‚åÑ Type Error! :(
process("foo").toUpperCase()
</code></pre>

<p>TypeScript complains because it thinks that the result of <code>process("foo")</code> might be <code>null</code>, even though we clever
humans know that it won't be. It can't figure out the runtime semantics of the function on its own.</p>

<p>One way of helping TS understand the function better is to use 'overloading'. Overloading involves providing
multiple type signatures for a single function, and letting TypeScript figure out which one to use in any given
context.</p>

<pre><code class="ts">function process(text: null): null;
function process(text: string): string;
function process(text: any) {
  ...
}
</code></pre>

<p>Here we've said that if we pass a <code>string</code>, it returns a <code>string</code>, and if we pass <code>null</code>, it returns <code>null</code>. <em>(The
<code>any</code> type is ignored but still needs to be there for some reason</em> ü§∑‚ÄçÔ∏è<em>)</em></p>

<p>That works nicely:</p>

<pre><code class="ts">// All clear!
process("foo").toUpperCase()
//           ‚åÑ Type Error! :)
process(null).toUpperCase()
</code></pre>

<p>But there's another use case that doesn't work:</p>

<pre><code class="ts">declare const maybeFoo: string | null

//      ‚åÑ Type Error! :(
process(maybeFoo)
</code></pre>

<p>TypeScript won't let us pass something that is of type <code>string | null</code> because it's not smart enough to collapse
the overloaded signatures when that's possible. So we can either add yet another overload signature for the
<code>string | null</code> case, or we can be like <span style="white-space: nowrap; font-family: sans-serif;">(‚ïØ¬∞‚ñ°¬∞)‚ïØÔ∏µ
‚îª‚îÅ‚îª</span> and switch to using <strong>conditional types</strong>.</p>

<pre><code class="ts">function process&lt;T extends string | null&gt;(
  text: T
): T extends string ? string : null {
  ...
}
</code></pre>

<p>Here we've introduced a type variable <code>T</code> for the <code>text</code> parameter. We can then use <code>T</code> as part of a conditional
return type: <code>T extends string ? string : null</code>. You probably noticed that this looks just like a ternary
expression! Indeed, it's doing the same kind of thing, but within the type system at compile time.</p>

<p>And that takes care of all our use cases:</p>

<pre><code class="ts">typeof process("foo") // =&gt; string
typeof process(null) // =&gt; null
typeof process(maybeFoo) // =&gt; string | null
</code></pre>

<p>So that's what a conditional type is! A kind of ternary type expression. It always has this form:</p>

<pre><code>A extends B ? C : D
</code></pre>

<p><code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code> can be any old type expressions, but all the important stuff is happening on the left there.
In the <code>A extends B</code> condition.</p>

<a name="Assignability"></a>
<h2>Assignability</h2>

<p>This <code>extends</code> keyword is the heart of a conditional type. <code>A extends B</code> means precisely that any value of type <code>A</code>
can safely be assigned to a variable of type <code>B</code>. In type system jargon we can say that "A is <em>assignable</em> to B".</p>

<pre><code class="ts">declare const a: A
const b: B = a
// type check succeeds only if A is assignable to B
</code></pre>

<p>TypeScript decides which types are assignable to each other using an approach called 'structural typing'. This kind
of type system started appearing in mainstream languages relatively recently (in the last 10 years or so), and
might be a little counterintuitive if you come from a Java or C# background.</p>

<p>You may have heard of 'duck typing' in relation to dynamically-typed languages. The phrase 'duck typing' comes from
the proverb</p>

<blockquote><p>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.</p></blockquote>

<p>In duck typing, you judge a thing by how it behaves, rather than what it is called or who its parents are. It's a
kind of meritocracy. Structural typing is a way of applying that same idea to a static compile-time type system.</p>

<p>So TypeScript only cares about what types can do, not what they are called or where they exist in a type hierarchy.</p>

<p>Take this simple example:</p>

<pre><code class="ts">class A {}
class B {}

const b: B = new A() // ‚úî all good
const a: A = new B() // ‚úî all good

new A() instanceof B // =&gt; false
</code></pre>

<p>TypeScript is happy treating two completely unrelated classes as equivalent because they have the same <em>structure</em>
and the same <em>capabilities</em>. Meanwhile, when checking the types at runtime, we discover that they are actually not
equivalent.</p>

<p>This is a notable example of where the semantics of TypeScript are at odds with JavaScript. It might seem like a
problem, but in practice structural typing is a lot more flexible than Java-esque 'nominal' typing, where names and
hierarchy matter. The two aren't mutually exclusive, however. Some languages, like Scala and Flow, allow you to mix
and match to suit particular problems.</p>

<p>Aside from that, the way that assignability works with structural typing is very intuitive.</p>

<pre><code class="ts">interface Shape {
  color: string
}

class Circle {
  color: string
  radius: number
}

// ‚úî All good! Circles have a color
const shape: Shape = new Circle()
// ‚úò Type error! Not all shapes have a radius!
const circle: Circle = shape
</code></pre>

<p>Speaking structurally we can say that <code>A extends B</code> is a lot like '<code>A</code> is a superset of <code>B</code>', or, to be more
verbose, '<code>A</code> has all of <code>B</code>'s properties, <em>and maybe some more</em>'.</p>

<p>There's one minor caveat though, and that's with 'literal' types. In TypeScript you can use literal values of
primitive types as types themselves.</p>

<pre><code class="ts">let fruit: "banana" = "banana"

// Type Error! "apple" is not assignable to "banana"
fruit = "apple"
</code></pre>

<p>The string <code>"banana"</code> doesn't have more properties than any other <code>string</code>. But the type <code>"banana"</code> is
still more <em>specific</em> than the type <code>string</code>.</p>

<p>So another way to think of <code>A extends B</code> is like '<code>A</code> is a possibly-more-specific version of <code>B</code>'.</p>

<p>Which brings us to 'top' and 'bottom' types: the <em>least</em> and <em>most</em> specific types, respectively.</p>

<p>In type theory a 'top' type is one which all other types are assignable to. It is the type you use to say "I have
absolutely no information about what this value is". Think of it as the union of all possible types:</p>

<pre><code class="ts">type Top = string | number | {foo: Bar} | Baz[] | ... | ‚àû
</code></pre>

<p>TypeScript has two top types: <code>any</code> and <code>unknown</code>.</p>

<ul>
<li>Using <code>any</code> is like saying "I have no idea what this value looks like. So, TypeScript, please assume I'm using it
correctly, and don't complain if anything I do seems dangerous".</li>
<li>Using <code>unknown</code> is like saying "I have no idea what this value looks like. So, TypeScript, please make sure I
check what it is capable of at run time."</li>
</ul>


<p>A 'bottom' type is one which no other types are assignable to, and that no values can be an instance of. Think of
it as the empty union type:</p>

<pre><code class="ts">type Bottom = ‚àÖ
</code></pre>

<p>TypeScript has one bottom type: <code>never</code>. That's a nice descriptive name because it literally means <em>this can never
happen</em>.</p>

<p>Top and bottom types are useful to know about when working with conditional types. <code>never</code> is especially useful
when using conditional types to refine unions...</p>

<a name="Refining.unions.with.distributive.conditional.types"></a>
<h2>Refining unions with distributive conditional types</h2>

<p>Conditional types let you filter out particular members of a union type. To illustrate, let's say we have a union
type called <code>Animal</code>:</p>

<pre><code class="ts">type Animal = Lion | Zebra | Tiger | Shark
</code></pre>

<p>And imagine that we needed to write a function that used only those animals which are also cats. We might write
some helper type called <code>ExtractCat</code> to do that:</p>

<pre><code class="ts">type ExtractCat&lt;A&gt; = A extends { meow(): void } ? A : never

type Cat = ExtractCat&lt;Animal&gt;
// =&gt; Lion | Tiger
</code></pre>

<p><em>I know lions and tigers don't meow, but how cute would it be if they did</em> ^_^</p>

<p>This seemed vague and magical to me at first. Let's see what TypeScript is doing under the hood when it evaluates
<code>ExtractCat&lt;Animal&gt;</code>.</p>

<p>First, it applies <code>ExtractCat</code> recursively to all the members of <code>Animal</code>:</p>

<!-- prettier-ignore -->


<pre><code class="ts">type Cat =
  | ExtractCat&lt;Lion&gt;
  | ExtractCat&lt;Zebra&gt;
  | ExtractCat&lt;Tiger&gt;
  | ExtractCat&lt;Shark&gt;
</code></pre>

<p>Then it evaluates the conditional types:</p>

<pre><code class="ts">type Cat = Lion | never | Tiger | never
</code></pre>

<p>And then something fun happens... Remember that no values can ever be of type <code>never</code>? That makes it totally
meaningless to include <code>never</code> in a union type, so TypeScript just gets rid of it.</p>

<pre><code class="ts">type Cat = Lion | Tiger
</code></pre>

<p>The TypeScript jargon for this kind of conditional type is <strong>distributive conditional type</strong>.</p>

<p>That 'distribution', where the union is unrolled recursively, only happens when the thing on the left of the
<code>extends</code> keyword is a plain type variable. We'll see what that means and how to work around it in the next
section.</p>

<a name="A.real.use-case.for.distributive.conditional.types."></a>
<h2>A real use-case for distributive conditional types.</h2>

<p>A while ago I was building a Chrome extension. It had a 'background' script and a 'view' script that ran in
different execution contexts. They needed to communicate and share state, and the only way to do that is via
serializable message passing. I took inspiration from Redux and defined a global union of interfaces called
<code>Action</code> to model the messages that I wanted to be able to pass between the contexts.</p>

<pre><code class="ts">type Action =
  | {
      type: "INIT"
    }
  | {
      type: "SYNC"
    }
  | {
      type: "LOG_IN"
      emailAddress: string
    }
  | {
      type: "LOG_IN_SUCCESS"
      accessToken: string
    }
// ...
</code></pre>

<p>And then there was a global <code>dispatch</code> function that I could use directly to broadcast messages across contexts</p>

<pre><code class="ts">declare function dispatch(action: Action): void

// ...

dispatch({
  type: "INIT"
})

// ...

dispatch({
  type: "LOG_IN",
  emailAddress: "david.sheldrick@artsy.net"
})

// ...

dispatch({
  type: "LOG_IN_SUCCESS",
  accessToken: "038fh239h923908h"
})
</code></pre>

<p><a
  target="_blank"
  style="font-size: 0.8em"
  href="https://www.typescriptlang.org/play/#src=type%20Action%20%3D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22INIT%22%0D%0A%20%20%20%20%7D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22SYNC%22%0D%0A%20%20%20%20%7D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22LOG_IN%22%0D%0A%20%20%20%20%20%20emailAddress%3A%20string%0D%0A%20%20%20%20%7D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22LOG_IN_SUCCESS%22%0D%0A%20%20%20%20%20%20accessToken%3A%20string%0D%0A%20%20%20%20%7D%0D%0A%0D%0Adeclare%20function%20dispatch(action%3A%20Action)%3A%20void%0D%0A%0D%0Adispatch(%7B%0D%0A%20%20type%3A%20%22INIT%22%0D%0A%7D)%0D%0A%0D%0Adispatch(%7B%0D%0A%20%20type%3A%20%22LOG_IN%22%2C%0D%0A%20%20emailAddress%3A%20%22david.sheldrick%40artsy.net%22%0D%0A%7D)%0D%0A%0D%0Adispatch(%7B%0D%0A%20%20type%3A%20%22LOG_IN_SUCCESS%22%2C%0D%0A%20%20accessToken%3A%20%22038fh239h923908h%22%0D%0A%7D)">
<em>Try it in the TypeScript playground</em> </a></p>

<p>This API is typesafe and it plays well with my IDE's autocomplete and I could have left it there. I could have
moved on to other things.</p>

<p>But there's this little voice inside my head. I think most developers have this voice.</p>

<pre style="background: transparent; color: #333; border: 0; box-shadow: none; padding: 0;">
INT. HIPSTER CO-WORKING SPACE - DAY

DAVID sits on an oddly-shaped orange chair.
His MacBook rests askew on a lumpy reclaimed
wood desk. He stares at colorful text on a
dark screen.

A tiny whisper.

              VOICE (V.O.)
    Psst!

David looks around for a moment and then
stares back at the laptop.

              VOICE (V.O.)
    Psst! Hey!

Startled this time, David looks around
again. He speaks to nobody in particular.

              DAVID
    Is someone there?

              VOICE (V.O.)
    It's me, the DRY devil.

David heaves a painful sigh of recognition.

              DAVID
    Not you again! Leave me alone!

              DRY DEVIL (V.O.)
    DRY stands for "Don't Repeat Yourself"

              DAVID
    I know, you say that every time! Now
    get lost!

              DRY DEVIL (V.O.)
    I've noticed an issue with your code.

              DAVID
    Seriously, go away! I'm busy solving
    user problems to create business value.

              DRY DEVIL (V.O.)
    Every time you call `dispatch` you
    are typing 6 redundant characters.

              DAVID
    Oh snap! You're right! I must fix this.

MONTAGE

David spends the next 2 hours wrestling
with TypeScript, accumulating a pile of
empty coffee cups and protein ball wrappers.
</pre>


<p>We've all been there.</p>

<p>I wanted the dispatch function to work like this:</p>

<pre><code class="ts">// first argument is the 'type'
// second is any extra parameters
dispatch("LOG_IN_SUCCESS", {
  accessToken: "038fh239h923908h"
})
</code></pre>

<p>Deriving the type for that first argument is easy enough.</p>

<pre><code class="ts">type ActionType = Action["type"]
// =&gt; "INIT" | "SYNC" | "LOG_IN" | "LOG_IN_SUCCESS"
</code></pre>

<p>But the type of the second argument <em>depends on</em> the first argument. We can use a type variable to model that
dependency.</p>

<!-- prettier-ignore -->


<pre><code class="ts">declare function dispatch&lt;T extends ActionType&gt;(
  type: T,
  args: ExtractActionParameters&lt;Action, T&gt;
): void
</code></pre>

<p><em>Woah woah woah, what's this</em> <code>ExtractActionParameters</code> <em>voodoo?</em></p>

<p>It's a conditional type of course! Here's a first attempt at implementing it:</p>

<pre><code class="ts">type ExtractActionParameters&lt;A, T&gt; = A extends { type: T } ? A : never
</code></pre>

<p>This is a lot like the <code>ExtractCat</code> example from before, where we were were refining the <code>Animals</code> union by
searching for something that can <code>meow()</code>. Here, we're refining the <code>Action</code> union type by searching for an
interface with a particular <code>type</code> property. Let's see if it works:</p>

<pre><code class="ts">type Test = ExtractActionParameters&lt;Action, "LOG_IN"&gt;
// =&gt; { type: "LOG_IN", emailAddress: string }
</code></pre>

<p>Almost there! We don't want to keep the <code>type</code> field after extraction because then we would still have to specify
it when calling <code>dispatch</code>. And that would somewhat defeat the purpose of this entire exercise.</p>

<p>We can omit the <code>type</code> field by combining a <strong>mapped type</strong> with a conditional type and the <code>keyof</code> operator.</p>

<p>A <strong>mapped type</strong> lets you create a new interface by 'mapping' over a union of keys. You can get a union of keys
from an existing interface by using the <code>keyof</code> operator. And finally, you can remove things from a union using a
conditional type. Here's how they play together (with some inline test cases for illustration):</p>

<pre><code class="ts">type ExcludeTypeKey&lt;K&gt; = K extends "type" ? never : K

type Test = ExcludeTypeKey&lt;"emailAddress" | "type" | "foo"&gt;
// =&gt; "emailAddress" | "foo"

// here's the mapped type
type ExcludeTypeField&lt;A&gt; = { [K in ExcludeTypeKey&lt;keyof A&gt;]: A[K] }

type Test = ExcludeTypeField&lt;{ type: "LOG_IN"; emailAddress: string }&gt;
// =&gt; { emailAddress: string }
</code></pre>

<p>Then we can use <code>ExcludeTypeField</code> to redefine <code>ExtractActionParameters</code>.</p>

<!-- prettier-ignore -->


<pre><code class="ts">type ExtractActionParameters&lt;A, T&gt; = A extends { type: T }
  ? ExcludeTypeField&lt;A&gt;
  : never
</code></pre>

<p>And now the new version of <code>dipsatch</code> is typesafe!</p>

<pre><code class="ts">// All clear! :)
dispatch("LOG_IN_SUCCESS", {
  accessToken: "038fh239h923908h"
})

dispatch("LOG_IN_SUCCESS", {
  // Type Error! :)
  badKey: "038fh239h923908h"
})

// Type Error! :)
dispatch("BAD_TYPE", {
  accessToken: "038fh239h923908h"
})
</code></pre>

<p><a
  target="_blank"
  style="font-size: 0.8em"
  href="https://www.typescriptlang.org/play/#src=type%20Action%20%3D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22INIT%22%0D%0A%20%20%20%20%7D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22SYNC%22%0D%0A%20%20%20%20%7D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22LOG_IN%22%0D%0A%20%20%20%20%20%20emailAddress%3A%20string%0D%0A%20%20%20%20%7D%0D%0A%20%20%7C%20%7B%0D%0A%20%20%20%20%20%20type%3A%20%22LOG_IN_SUCCESS%22%0D%0A%20%20%20%20%20%20accessToken%3A%20string%0D%0A%20%20%20%20%7D%0D%0A%0D%0Atype%20ActionType%20%3D%20Action%5B%22type%22%5D%0D%0A%0D%0Adeclare%20function%20dispatch%3CT%20extends%20ActionType%3E(%0D%0A%20%20%20%20type%3A%20T%2C%0D%0A%20%20%20%20args%3A%20ExtractActionParameters%3CAction%2C%20T%3E%0D%0A)%3A%20void%0D%0A%0D%0Atype%20ExcludeTypeKey%3CK%3E%20%3D%20K%20extends%20%22type%22%20%3F%20never%20%3A%20K%0D%0A%0D%0Atype%20ExcludeTypeField%3CA%3E%20%3D%20%7B%20%5BK%20in%20ExcludeTypeKey%3Ckeyof%20A%3E%5D%3A%20A%5BK%5D%20%7D%0D%0A%0D%0Atype%20ExtractActionParameters%3CA%2C%20T%3E%20%3D%20A%20extends%20%7B%20type%3A%20T%20%7D%0D%0A%20%20%20%20%3F%20ExcludeTypeField%3CA%3E%0D%0A%20%20%20%20%3A%20never%0D%0A%20%20%0D%0A%2F%2F%20All%20clear!%20%3A)%0D%0Adispatch(%22LOG_IN_SUCCESS%22%2C%20%7B%0D%0A%20%20%20%20accessToken%3A%20%22038fh239h923908h%22%0D%0A%7D)%0D%0A%0D%0Adispatch(%22LOG_IN_SUCCESS%22%2C%20%7B%0D%0A%20%20%20%20%2F%2F%20Type%20Error!%20%3A)%0D%0A%20%20%20%20badKey%3A%20%22038fh239h923908h%22%0D%0A%7D)%0D%0A%0D%0A%2F%2F%20Type%20Error!%20%3A)%0D%0Adispatch(%22BAD_TYPE%22%2C%20%7B%0D%0A%20%20%20%20accessToken%3A%20%22038fh239h923908h%22%0D%0A%7D)">
<em>Try it in the TypeScript playground</em> </a></p>

<p>But there's one more very serious problem to address: If the action has no extra parameters, I still have to pass a
second empty argument.</p>

<pre><code class="ts">dispatch("INIT", {})
</code></pre>

<p>That's four whole wasted characters! Cancel my meetings and tell my partner not to wait up tonight! We need to
<em>fix. this</em>.</p>

<p>The na√Øve thing to do would be to make the second argument optional. That would be unsafe because, e.g. it would
allow us to dispatch a <code>"LOG_IN"</code> action without specifying an <code>emailAddress</code>.</p>

<p>Instead, let's overload the <code>dispatch</code> function.</p>

<!-- prettier-ignore -->


<pre><code class="ts">// And let's say that any actions that don't require
// extra parameters are 'simple' actions.
declare function dispatch(type: SimpleActionType): void
// this signature is just like before
declare function dispatch&lt;T extends ActionType&gt;(
  type: T,
  args: ExtractActionParameters&lt;Action, T&gt;
): void

type SimpleActionType = ExtractSimpleAction&lt;Action&gt;['type']
</code></pre>

<p>How can we define this <code>ExtractSimpleAction</code> conditional type? We know that if we remove the <code>type</code> field from an
action and the result is an empty interface, then that is a simple action. So something like this might work</p>

<pre><code class="ts">type ExtractSimpleAction&lt;A&gt; = ExcludeTypeField&lt;A&gt; extends {} ? A : never
</code></pre>

<p>Except that doesn't work. <code>ExcludeTypeField&lt;A&gt; extends {}</code> is always going to be true, because <code>{}</code> is like a top
type for interfaces. <em>Pretty much everything</em> is more specific than <code>{}</code>.</p>

<p>We need to swap the arguments around:</p>

<pre><code class="ts">type ExtractSimpleAction&lt;A&gt; = {} extends ExcludeTypeField&lt;A&gt; ? A : never
</code></pre>

<p>Now if <code>ExcludeTypeField&lt;A&gt;</code> is empty, the condition will be true, otherwise it will be false.</p>

<p>But this still doesn't work! On-the-ball readers might remember this:</p>

<blockquote><p>That 'distribution', where the union is unrolled recursively, only happens when the thing on the left of the
<code>extends</code> keyword is a plain type variable. We'll see what that means and how to work around it in the next
section.</p></blockquote>

<p>-- Me, in the previous section</p>

<p>Type variables are always defined in a generic parameter list, delimited by <code>&lt;</code> and <code>&gt;</code>. e.g.</p>

<pre><code class="ts">type Blah&lt;These, Are, Type, Variables&gt; = ...

function blah&lt;And, So, Are, These&gt;() {
  ...
}
</code></pre>

<p>And if you want a conditional type to distribute over a union, the union a) needs to have been bound to a type
variable, and b) that variable needs to appear alone to the left of the <code>extends</code> keyword.</p>

<p>e.g. this is a distributive conditional type:</p>

<pre><code class="ts">type Blah&lt;Var&gt; = Var extends Whatever ? A : B
</code></pre>

<p>and these are not:</p>

<pre><code class="ts">type Blah&lt;Var&gt; = Foo&lt;Var&gt; extends Whatever ? A : B
type Blah&lt;Var&gt; = Whatever extends Var ? A : B
</code></pre>

<p>When I discovered this limitation I thought that it exposed a fundamental shortcoming in the way distributive
conditional types work under the hood. I thought it might be some kind of concession to algorithmic complexity. I
thought that my use case was too advanced, and that TypeScript had just thrown its hands up in the air and said,
"Sorry mate, you're on your own".</p>

<p>But it turns out I was wrong. It is just a pragmatic language design decision to avoid extra syntax, and you can
work around it easily:</p>

<!-- prettier-ignore -->


<pre><code class="ts">type ExtractSimpleAction&lt;A&gt; = A extends any
  ? {} extends ExcludeTypeField&lt;A&gt;
    ? A
    : never
  : never
</code></pre>

<p>All we did is wrap the meat of our logic in a flimsy tortilla of inevitability, since the outer condition
<code>A extends any</code> will, of course, always be true.</p>

<p>And finally we can delete those four characters üéâüï∫üèºüíÉüèΩüéà</p>

<pre><code class="ts">dispatch("INIT")
</code></pre>

<p>That's one yak successfully shaved ‚úî</p>

<hr />

<p>TypeScript provides a couple of built-in types that we could have used in this section:</p>

<pre><code class="ts">// Exclude from U those types that are assignable to T
type Exclude&lt;U, T&gt; = U extends T ? never : U

// Extract from U those types that are assignable to T
type Extract&lt;U, T&gt; = U extends T ? U : never
</code></pre>

<p>e.g. instead of defining <code>ExcludeTypeField</code> like this:</p>

<pre><code class="ts">type ExcludeTypeField&lt;A&gt; = { [K in ExcludeTypeKey&lt;keyof A&gt;]: A[K] }
</code></pre>

<p>we could have done this:</p>

<pre><code class="ts">type ExcludeTypeField&lt;A&gt; = { [K in Exclude&lt;keyof A, "type"&gt;]: A[K] }
</code></pre>

<p>And instead of defining <code>ExtractActionParameters</code> like this:</p>

<!-- prettier-ignore -->


<pre><code class="ts">type ExtractActionParameters&lt;A, T&gt; = A extends { type: T }
  ? ExcludeTypeField&lt;A&gt;
  : never
</code></pre>

<p>we could have done this:</p>

<pre><code class="ts">type ExtractActionParameters&lt;A, T&gt; = ExcludeTypeField&lt;Extract&lt;A, { type: T }&gt;&gt;
</code></pre>

<a name="L.....Exercise.for.the.intrepid.reader"></a>
<h2>üí° Exercise for the intrepid reader</h2>

<p>Notice that this still works.</p>

<pre><code class="ts">dispatch("INIT", {})
</code></pre>

<p>Use what you've learned so far to make it an error to supply a second argument for 'simple' actions.</p>

<a name="Destructuring.types.with..code.infer..code."></a>
<h2>Destructuring types with <code>infer</code></h2>

<p>Conditional types have another trick up their sleeve: the <code>infer</code> keyword. It can be used anywhere in the type
expression to the right of the <code>extends</code> keyword. It gives a name to whichever type would appear in that place.
e.g.</p>

<pre><code class="ts">type Unpack&lt;A&gt; = A extends Array&lt;infer E&gt; ? E : A

type Test = Unpack&lt;Apple[]&gt;
// =&gt; Apple
type Test = Unpack&lt;Apple&gt;
// =&gt; Apple
</code></pre>

<p>It handles ambiguity gracefully:</p>

<pre><code class="ts">type Stairs = Unpack&lt;Apple[] | Pear[]&gt;
// =&gt; Apple | Pear
</code></pre>

<p>You can even use <code>infer</code> multiple times.</p>

<pre><code class="ts">type Flip&lt;T&gt; = T extends [infer A, infer B] ? [B, A] : never
type Stairs = Flip&lt;[Pear, Apple]&gt;
// =&gt; [Apple, Pear]

type Union&lt;T&gt; = T extends [infer A, infer A] ? A : never
type Stairs = Union&lt;[Apple, Pear]&gt;
// =&gt; Apple | Pear
</code></pre>

<a name="Other.built-in.conditional.types"></a>
<h2>Other built-in conditional types</h2>

<p>We've already seen <code>Exclude</code> and <code>Extract</code>, and TypeScript provides a few other conditional types out of the box.</p>

<!-- prettier-ignore -->


<pre><code class="ts">// Exclude null and undefined from T
type NonNullable&lt;T&gt; =
  T extends null | undefined ? never : T

// Obtain the parameters of a function type in a tuple
type Parameters&lt;T&gt; =
  T extends (...args: infer P) =&gt; any ? P : never

// Obtain the parameters of a constructor function type in a tuple
type ConstructorParameters&lt;T&gt; =
  T extends new (...args: infer P) =&gt; any ? P : never

// Obtain the return type of a function type
type ReturnType&lt;T&gt; =
  T extends (...args: any[]) =&gt; infer R ? R : any

// Obtain the return type of a constructor function type
type InstanceType&lt;T&gt; =
  T extends new (...args: any[]) =&gt; infer R ? R : any
</code></pre>

<a name="Further.reading"></a>
<h2>Further reading</h2>

<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html">TypeScript 2.8 release notes</a></li>
<li><a href="https://github.com/Microsoft/TypeScript/pull/21316">Microsoft/Typescript#21316</a> Conditional types pull request</li>
<li><a href="https://github.com/Microsoft/TypeScript/pull/21496">Microsoft/Typescript#21496</a> <code>infer</code> pull request</li>
<li><a href="https://github.com/Microsoft/TypeScript/blob/a2205ad53d8f65a129a552b752d1e06fee3d41fc/lib/lib.es5.d.ts#L1446">lib.es5.d.ts#L1446</a>
built-in conditional type definitions</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where art thou, my error?]]></title>
    <link href="http://artsy.github.io/blog/2018/10/19/where-art-thou-my-error/"/>
    <updated>2018-10-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/10/19/where-art-thou-my-error</id>
    <content type="html"><![CDATA[<p><em>Note: This is the text of a presentation given at <a href="https://graphql-finland.fi">GraphQL Finland 2018</a>, as such the
language may in some cases be slightly awkward for a blog post. You can find those slides on
<a href="https://speakerdeck.com/alloy/where-art-thou-my-error">Speaker Deck</a>.</em></p>

<p>GraphQL is still in its early stages and thus these are very exciting times, indeed! Traditionally the GraphQL team
has taken the approach of defining the bare minimum in the specification that was deemed needed and otherwise
letting the community come-up with defining problems and experimenting with solutions for those. One such example
is how metadata about the location in the graph where errors occurred during execution were <a href="https://github.com/facebook/graphql/pull/230">added to the
specification</a>.</p>

<p>This is great in the sense that we still have the ability, as a community, to shape the future of a GraphQL
specification that we all <em>want</em> to use, but on the other hand it also means that we may need to spend significant
amounts of time on thinking about these problems and iterating. Seeing as we all strive to have backwards
compatible schemas, it‚Äôs of great importance that we know of the various iterations that people have experimented
with and what the outcome was.</p>

<p>This is our story of thinking about and working with errors, thus far.</p>

<!-- more -->


<p>NOTE: Throughout this talk I‚Äôll use ‚Äòquery execution‚Äô to indicate executing a GraphQL document, be it a query or
mutation operation. I have a hard time relating to ‚Äòdocument execution‚Äô, mostly because I don‚Äôt see others using
it, but perhaps I‚Äôve just missed it. Come at me, at the bar, and set me straight!</p>

<a name="Errors.vs.errors"></a>
<h2>Errors vs errors</h2>

<p>First of all, I want to take a step back and talk about errors in general. The nomenclature around these can get
confusing, suffice to say that during this session we‚Äôll talk about these two types:</p>

<ul>
<li><p>Errors that occur during query execution, that were unexpected, and <em>could</em> lead to corrupted data. We‚Äôll refer
to these as (top-level) ‚ÄòGraphQL errors‚Äô, going forward.</p>

<p>These could be due to hardware failures, such as running out of memory or disk space, network failures, or
unexpected upstream data etc.</p>

<p>When these occur, <code>graphql-js</code> will return <code>null</code> for the field that triggered the error and serialize the error
into the top-level <code>errors</code> list, next to the successful response <code>data</code>. (Presumably other implementations
follow this reference implementation.)</p></li>
</ul>


<pre><code class="json">{
  "data": {
    "artwork": {
      "artist": {
        "name": "Vincent van Gogh",
        "leftEarSize": null
      }
    }
  },
  "errors": [
    {
      "message": "An unexpected error occurred",
      "path": ["artwork", "artist", "leftEarSize"]
    }
  ]
}
</code></pre>

<ul>
<li><p>Exceptions to these are errors that are <em>known</em> to occur and are expected to be handled by the user of an API.
We‚Äôll refer to these as ‚Äòexceptions‚Äô, going forward.</p>

<p>By default these are treated equally by <code>graphql-js</code> to top-level GraphQL errors, if uncaught.</p></li>
</ul>


<p>We will <strong>not</strong> be speaking about errors that occur <em>outside</em> of query execution, such as network failures reaching
the GraphQL server, parsing a syntactically incorrect document, or passing variables that don‚Äôt satisfy the
type-system; as these will all lead to a query being rejected wholesale and are solve-able using traditional means,
such as a <code>4xx</code> HTTP status code or <code>5xx</code> in some cases.</p>

<a name="What.is.the.problem.we...re.trying.to.solve."></a>
<h2>What is the problem we‚Äôre trying to solve?</h2>

<p>Because with GraphQL we‚Äôre usually requesting data for multiple resources, there may be a situation where some
fields resolve successfully and some may fail. This is also why, when using an HTTP transport layer, the advice is
to always respond with a HTTP 200 (ok) status. Determining how to process the response is left up to the client.</p>

<p>So how <em>do</em> we model errors in such a way that they can be meaningful and in context of their origin?</p>

<ul>
<li><p>What if you want to render partial data?</p>

<ul>
<li><p>Maybe the failed data is unrelated to other components that you were also requesting data for.</p>

<p><img src="/images/2018-10-19-where-art-thou-my-error/partial-data-unrelated-annotated.png" alt="Unrelated component" /></p></li>
<li><p>Or the data that failed was part of a list and other entries can still be rendered just fine.</p>

<p><img src="/images/2018-10-19-where-art-thou-my-error/partial-data-list-annotated.png" alt="Partial list data" /></p></li>
</ul>
</li>
<li><p>Or what if you‚Äôd (additionally) like to communicate the error in your interface?</p>

<ul>
<li><p>When the query is in response to a mutation and you‚Äôd like to communicate input validation failures.</p>

<p><img src="/images/2018-10-19-where-art-thou-my-error/mutation-validation-error.png" alt="Surface validation error" /></p></li>
</ul>
</li>
</ul>


<a name="Possible.solutions"></a>
<h2>Possible solutions</h2>

<a name="Top-level.GraphQL.errors.and.treating.an.entire.response.as.unusable.when.such.errors.exist"></a>
<h3>Top-level GraphQL errors and treating an entire response as unusable when such errors exist</h3>

<p>Some clients, such as Apollo and Relay Classic, have made the decision to reject a response entirely, by default,
if any top-level GraphQL errors exist. This is because clients can really only fully assume that the response data
is incomplete, not whether or not your application could handle that case.</p>

<p>This may be an ok solution when you‚Äôre starting out or all the requested data is part of a single holistic view,
but it quickly breaks down when you want a little more than that.</p>

<a name="Top-level.GraphQL.errors.with.extra.metadata"></a>
<h3>Top-level GraphQL errors with extra metadata</h3>

<p>GraphQL errors only have a single field in <a href="https://facebook.github.io/graphql/draft/#sec-Errors">the specification</a> to provide context around the cause of
the error, which is the <code>message</code> field. However, <a href="https://facebook.github.io/graphql/draft/#sec-Response-Format">the specification</a> also defines a top-level
<code>extensions</code> key, which may hold a map of freeform data for the schema implementors to extend the protocol however
they see fit.</p>

<p>Apollo Server 2.0, for instance, <a href="https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210">introduced standardized errors</a> you can throw from your
resolvers, which end up being serialized into the <code>extensions</code> map. An example they give is for bad user input:</p>

<pre><code class="js">import { UserInputError } from "apollo-server"

const resolvers = {
  Query: {
    events(root, { zipCode }) {
      // do custom validation for user inputs
      const validationErrors = {}
      if (!isValidZipCode(zipCode)) {
        validationErrors.zipCode = "This is not a valid zipcode"
      }
      if (Object.keys(validationErrors).length &gt; 0) {
        throw new UserInputError("Failed to get events due to validation errors", { validationErrors })
      }
      // actually query events here and return successfully
      return getEventsByZipcode(zipCode)
    }
  }
}
</code></pre>

<p>Seeing as these extensions are freeform, however, this builds an <strong>implicit</strong> contract between the server and
client that then needs to be abstracted away by additional client code. This is unfortunate, when you think about
it, because GraphQL is meant to explicitly express shapes of data.</p>

<p>The Apollo team acknowledges this by adding:</p>

<blockquote><p>While convenient, the weakness of this approach is that the format of the validation error messages is not
captured by your schema, making it brittle to changes. Unless you maintain tight control of both server and
client, you should keep the error responses as simple as possible.</p>

<p>For mutations, it can be worthwhile defining these validation errors as first class citizens within your schema.</p></blockquote>

<p>(Which we‚Äôll address next.)</p>

<a name="Make..mutation..error.metadata.part.of.schema.as.separate.fields"></a>
<h3>Make (mutation) error metadata part of schema as separate fields</h3>

<p>One <a href="https://www.apollographql.com/docs/guides/schema-design.html#mutation-responses">commonly suggested approach</a> around mutations is to define status metadata on the
response type next to the field of the affected entity. For example, a response type could look like:</p>

<pre><code>type UpdateArtworkMutationResponse {
  success: Boolean!
  message: String!
  artwork: Artwork
}
</code></pre>

<p>Here there‚Äôs a boolean that indicates success, an extra message that sheds context on the situation when a failure
occurs, and finally the <code>artwork</code> that an update was attempted to be made to.</p>

<p>Adding these fields to the same namespace makes sense when we‚Äôre thinking of the failure case, but what about the
success case? Do we really need a <code>success</code> boolean to indicate that updates to the <code>artwork</code> were made? What
purpose serves the <code>message</code> field, other than possibly being a sign of an overly positive schema that sends you
happy messages?</p>

<p>Finally, this approach only really works for mutations, as their return type acts as a distinct root type to start
a query from. It would be hard to imagine how to apply this to queries.</p>

<a name="Make.error.metadata.part.of.schema.as.separate.field"></a>
<h3>Make error metadata part of schema as separate field</h3>

<p>Similarly, <a href="https://itnext.io/the-definitive-guide-to-handling-graphql-errors-e0c58b52b5e1">another suggested approach</a> is to add an additional <code>error</code> field to the type in
question, which then describes the error that occurred. The previous example could be rewritten like so:</p>

<pre><code>type GenericError {
  message: String!
}

type UpdateArtworkMutationResponse {
  error: GenericError
  artwork: Artwork
}
</code></pre>

<p>If <code>error</code> is not <code>null</code>, something went wrong. This cleans up the namespace a bit, but more importantly this
approach can be applied to queries too:</p>

<pre><code>type PublishedArtworkNotification {
  artwork: Artwork
}

type PublishedArtworkNotificationsPayload {
  error: GenericError
  notifications: [PublishedArtworkNotification]
}

type Query {
  publishedArtworkNotificationsPayload: PublishedArtworkNotificationsPayload!
}
</code></pre>

<p>Neat.</p>

<p>However, and this may just be our use-case, we don‚Äôt have partial data at these stages. We‚Äôve either resolved the
data or we have an error. Hence, this approach would mean we‚Äôd always have an unneeded <code>null</code> field, which pollutes
the namespace of the type unnecessarily.</p>

<p>Side-note: if you don‚Äôt control the server schema, and are using a client that can extend a server schema on the
client, you could try to retrofit top-level GraphQL errors to these suggested error fields into the schema where
they occurred based on the error <code>path</code>, as shown <a href="https://github.com/facebook/relay/issues/1913#issuecomment-358636018">here</a>.</p>

<a name="Recap"></a>
<h2>Recap</h2>

<p>So to quickly recap, ideally we want a solution to:</p>

<ul>
<li>Use GraphQL: Utilize GraphQL to explicitly describe the error data.</li>
<li>In context: Present the error data exactly where the error occurred in the schema.</li>
<li>All operations: Work for both mutations and queries.</li>
<li>Explicit status: Be concise and encourage ‚Äòclean‚Äô types; that is, no pollution of namespaces with fields only
needed in some cases.</li>
</ul>


<a name="Make.exceptions.first-class.citizens.of.your.schema"></a>
<h3>Make exceptions first-class citizens of your schema</h3>

<p>To that end, the final approach we‚Äôll be discussing, and the one that we at Artsy have started adopting, is to give
exceptions their own type and return those instead of the success type, when they occur. To do this we make use of
a union of both the success and the exception type (or multiples thereof) and then query for those.</p>

<p>The benefits are:</p>

<ul>
<li><p>You can further model the exception in an explicit and introspect-able way.</p>

<p>For example, in the case of an HTTP failure to an upstream service, your exception type could include an integer
status-code field and document it as such.</p></li>
</ul>


<pre><code>type Artwork {
  title: String!
}

type HTTPError {
  message: String!
  statusCode: Int!
}

union ArtworkOrError = Artwork | HTTPError

type Query {
  artworkOrError(id: ID!): ArtworkOrError
}
</code></pre>

<pre><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      statusCode
    }
  }
}
</code></pre>

<ul>
<li>You know exactly where the exception occurred in the graph.</li>
</ul>


<pre><code>type Artist {
  artworksOrErrors: [ArtworkOrError]
}

type Query {
  artist(id: ID!): Artist
}
</code></pre>

<pre><code>query {
  artist("leonardo-da-vinci") {
    artworksOrErrors {
      ... on Artwork {
        title
      }
      ... on HTTPError {
        statusCode
      }
    }
  }
}
</code></pre>

<ul>
<li>You can use it for both mutations and queries.</li>
</ul>


<pre><code>type UpdateArtworkMutationResponse {
  artworkOrError: ArtworkOrError
}
</code></pre>

<ul>
<li>All fields will always be captured in the single <code>artworkOrError</code> field <em>or</em>, if no information about the error
is needed, you simply don‚Äôt query for it and get back <code>null</code> instead.</li>
</ul>


<pre><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
  }
}
</code></pre>

<a name="How.we.encode.it.into.our.schema"></a>
<h2>How we encode it into our schema</h2>

<p>I should preface this by clearly stating that while have been thinking about this problem for a while now, only
recently have we started rolling these changes out into our schema, so some of these are not yet discoverable in
<a href="http://github.com/artsy/metaphysics">our open-source GraphQL service</a>.</p>

<a name="Types"></a>
<h3>Types</h3>

<p>As shown before, we define a union of the actual result type <em>and</em> the error type. However, we additionally (will)
define a set of error interfaces, which make it possible for clients to query for errors in a more generic way.</p>

<pre><code>interface Error {
  message: String!
}

interface HTTPError {
  message: String!
  statusCode: Int!
}

type HTTPErrorType implements Error &amp; HTTPError {
  message: String!
  statusCode: Int!
}

type Artwork {
  title: String!
}

union ArtworkOrError = Artwork | HTTPErrorType

type Query {
  artworkOrError(id: ID!): ArtworkOrError
}
</code></pre>

<p>We can now still query as shown in the earlier examples:</p>

<pre><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      message
      statusCode
    }
  }
}
</code></pre>

<p>‚Ä¶but we can now also have generic error components that would query like so:</p>

<pre><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ...GenericErrorComponent
    ...GenericHTTPErrorComponent
  }
}

fragment GenericErrorComponent on Error {
  message
}

fragment GenericHTTPErrorComponent on HTTPError {
  message
  statusCode
}
</code></pre>

<p>For the record, we have <em>not</em> yet put these interfaces into production, so the nomenclature is not set in stone yet
and I‚Äôd love to hear your input on this. Is <code>Error</code> <em>too</em> generic to use as the base error type? Is there a nicer
naming pattern that would allow us to avoid having to suffix concrete types of an error interface with <code>...Type</code>?</p>

<p>Side-note: there‚Äôs <a href="https://github.com/facebook/graphql/pull/373">an RFC</a> to the GraphQL specification that would make it possible to
have interfaces implement other interfaces, thus removing the need to keep repeating the fields of
super-interfaces. This RFC has recently been moved to the draft stage, yay!</p>

<a name="Field.naming"></a>
<h3>Field naming</h3>

<p>As you may have noticed, we‚Äôre calling these fields <code>something</code> <em>or</em> <code>error</code>. We are mostly doing this to stay
backwards compatible with our existing schema. While we could certainly add exception types to existing union
fields, we can‚Äôt change a single type field into a union type field without breaking compatibility.</p>

<p>Instead we may now have 2 versions of a given field:</p>

<ul>
<li>one with the single type field which is nullable, in case an exception occurred</li>
</ul>


<pre><code>query {
  artwork("mona-lisa") {
    title
  }
}
</code></pre>

<ul>
<li>and another that has the error union type</li>
</ul>


<pre><code>query {
  artworkOrError("mona-lisa") {
    ... on Artwork {
      title
    }
    ... on HTTPError {
      statusCode
    }
  }
}
</code></pre>

<p>This duplication is slightly unfortunate, from a clean schema design perspective, but it‚Äôs similar to an existing
pattern in the community. For instance, many schemas provide 2 ways to retrieve lists:</p>

<ul>
<li>one as an immediate list:</li>
</ul>


<pre><code>type Query {
  artworks: [Artwork]
}
</code></pre>

<ul>
<li>and one as a ‚Äòconnection‚Äô (as defined by the <a href="https://facebook.github.io/relay/graphql/connections.htm">Relay Connection specification</a>)</li>
</ul>


<pre><code>type ArtworkEdge {
  node: Artwork
}

type ArtworksConnection {
  edges: [ArtworkEdge]
}

type Query {
  artworksConnection: ArtworksConnection
}
</code></pre>

<p>So the jury is still out on whether or not that‚Äôs a bad way to name things. We‚Äôll have to see after using this for a
while.</p>

<a name="Downside.of.using.a.union"></a>
<h3>Downside of using a union</h3>

<p>One notable downside is that GraphQL scalar types can <em>not</em> be included in unions. Thus, if you have scalar fields
that could lead to exceptions, you will have to ‚Äòbox‚Äô those in object types.</p>

<pre><code>type ArtworkPurchasableBox {
  value: Boolean!
}

union ArtworkPurchasableOrError = ArtworkPurchasableBox | HTTPError

type Artwork {
  currentlyPurchasableOrError: ArtworkPurchasableOrError
}
</code></pre>

<p>This is definitely a case where the pattern of defining 2 fields, one with and one without exception types, comes
in handy. Having to always query through the box type is inelegant, to put it softly.</p>

<p>Side-note: there actually is <a href="https://github.com/facebook/graphql/issues/215">an open RFC</a> to the specification to allow scalars in unions, but
it‚Äôs still in stage 0 and is in need of a champion in order to proceed. We may end up trying to do so, based on our
actual experiences with these cases where they may need to be boxed.</p>

<a name="Example.of.how.we.consume.query.errors"></a>
<h3>Example of how we consume query errors</h3>

<pre><code class="ts">import { OrderStatus_order } from "__generated__/OrderStatus_order.graphql"
import React from "react"
import { createFragmentContainer, graphql } from "react-relay"

interface Props {
  order: OrderStatus_order
}

const OrderStatus: React.SFC&lt;Props&gt; = ({ order: orderStatusOrError }) =&gt;
  orderStatusOrError.__typename === "OrderStatus" ? (
    &lt;div&gt;
      {orderStatusOrError.deliveryDispatched
        ? "Your order has been dispatched."
        : "Your order has not been dispatched yet."}
    &lt;/div&gt;
  ) : (
    &lt;div className="error"&gt;
      {orderStatusOrError.code === "unpublished"
        ? "Please contact gallery services."
        : `An unexpected error occurred: ${orderStatusOrError.message}`}
    &lt;/div&gt;
  )

export const OrderStatusContainer = createFragmentContainer(
  OrderStatus,
  graphql`
    fragment OrderStatus_order on Order {
      orderStatusOrError {
        __typename
        ... on OrderStatus {
          deliveryDispatched
        }
        ... on OrderError {
          message
          code
        }
      }
    }
  `
)
</code></pre>

<a name="Example.of.how.we.consume.mutation.errors"></a>
<h3>Example of how we consume mutation errors</h3>

<pre><code class="ts">import { SubmitOrder_order } from "__generated__/SubmitOrder_order.graphql"
import { SubmitOrderMutation } from "__generated__/SubmitOrderMutation.graphql"
import { Router } from "found-relay"
import React from "react"
import { commitMutation, createFragmentContainer, graphql, RelayProp } from "react-relay"

interface Props {
  order: SubmitOrder_order
  relay: RelayProp
  router: Router
}

const SubmitOrder: React.SFC&lt;Props&gt; = props =&gt; (
  &lt;button
    onClick={() =&gt; {
      commitMutation&lt;SubmitOrderMutation&gt;(props.relay.environment, {
        mutation: graphql`
          mutation SubmitOrderMutation($input: SubmitOrder!) {
            submitOrder(input: $input) {
              orderStatusOrError {
                __typename
                ... on OrderStatus {
                  submitted
                }
                ... on OrderError {
                  message
                  code
                }
              }
            }
          }
        `,
        variables: { input: { orderID: props.order.id } },
        onCompleted: ({ submitOrder: { orderStatusOrError } }, errors) =&gt; {
          if (orderStatusOrError.__typename === "OrderStatus") {
            props.router.push(
              `/orders/${props.order.id}/${orderStatusOrError.submitted ? "submitted" : "pending"}`
            )
          } else {
            alert(
              orderStatusOrError.code === "unpublished"
                ? "Please contact gallery services."
                : `An unexpected error occurred: ${orderStatusOrError.message}`
            )
          }
        }
      })
    }}
  /&gt;
)

export const SubmitOrderContainer = createFragmentContainer(
  SubmitOrder,
  graphql`
    fragment SubmitOrder_order on Order {
      id
    }
  `
)
</code></pre>

<!--

### Show example of factory code that produces both single and union typed fields

TODO

-->


<a name="Final.thoughts"></a>
<h2>Final thoughts</h2>

<p>As stated before, we having only recently begun rolling out these changes into our production schema. However, much
thought and experimentation has gone into this to ensure we will be able to address all of <em>our</em> needs, at least.</p>

<p>I would love to hear other people‚Äôs thoughts on this and definitely feedback if they try to adopt it themselves. As
a community we should openly iterate together, as much as possible, as we try to make the future of GraphQL a great
one and put legit questions to ‚ÄòREST‚Äô ;)</p>

<p>For now, I‚Äôll leave you with this message from some internet ‚Äòrando‚Äô:</p>

<blockquote><p>@alloy That diff makes a lot of sense to me. I've also seen user errors as a field on the mutation result, but I
like that union makes it explicit that there was either success or failure and in the case of failure provides
rich information that's in your app's domain.</p></blockquote>

<p>-- <a href="https://twitter.com/leeb/status/1020054709694943232">Lee Byron</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is GraphQL The Future?]]></title>
    <link href="http://artsy.github.io/blog/2018/05/08/is-graphql-the-future/"/>
    <updated>2018-05-08T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/05/08/is-graphql-the-future</id>
    <content type="html"><![CDATA[<p>I have seen the future, and it looks a lot like GraphQL. Mark my words: in 5
years, newly minted full-stack app developers won‚Äôt be debating <em>RESTfulness</em>
anymore, because REST API design will be obsolete. By the end of this post, I
hope you'll see what I see in the promise of GraphQL as a new approach to
client-server interaction.</p>

<!-- more -->


<p>GraphQL is taking the full-stack world by storm. In case you‚Äôre not familiar,
GraphQL is a language-independent specification for client-server communication.
It lets you model the resources and processes provided by a server as a
<a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language (DSL)</a>.
Clients can use it to send scripts written in your DSL to the server to process
and respond to as a batch.</p>

<p>That‚Äôs...different from how GraphQL‚Äôs own page describes it. GraphQL is better
known as a query language designed for clients to fetch exactly the data they
need. While this is sort of true, I would argue that GraphQL actually fails this
test in reality. It‚Äôs neither a query language, nor particularly graph-oriented.
I argue that it's <em>not</em> a query language because it comes with no native
concepts of operators and expressions that build up to queries. <em>You</em> build
whatever facilities for specifying and fulfilling queries on your own. Likewise,
if your data is a graph, it‚Äôs on you to expose that structure. But your requests
are, if anything, trees.</p>

<p>I‚Äôm not trying to be pedantic. I believe GraphQL succeeds at something subtler
and more important than literally being a graph query language. I‚Äôm writing this
piece because I kept running into difficulties approaching GraphQL from the
standpoints of REST, graph theory, or typical query languages. As I read blog
posts, StackOverflow Q&amp;As, issues on the GraphQL repo and the GraphQL spec
itself, I developed a much more nuanced understanding, which I outline below.</p>

<p>For brevity, the following assumes a intermediate familiarity with GraphQL,
including its type system, syntax, and server-side implementation. If you don‚Äôt
have this level of familiarity, I recommend going through any tutorial that
requires you to set up a GraphQL server, not just play with the query language
(which is how I ended up with a lot of misconceptions).
<a href="https://graphql.org/graphql-js/">The docs for the official JavaScript server library</a>
are a good option. I‚Äôm going to start with the basics, but only so I can put my
own spin on those concepts, not to really illustrate them with examples.</p>

<a name="A.tree.of.fetches"></a>
<h1>A tree of fetches</h1>

<p>Most applications are designed in the form of discrete pages, which are seeded
with some tiny chunk of data‚Äîsay, a key or slug for some domain object‚Äîand then
perform a cascade of contingent fetches to get the data needed to populate the
templates rendered to a user. This is the basis of designing applications driven
by URL-based routing and it has been a mainstay of the MVC approach to web
application architecture for the past decade.</p>

<blockquote><p><strong>Example:</strong> At Artsy, the seed of data for rendering an artwork page could be
the slug identifying some artwork. From this slug, we need a whole bunch more
data: the metadata of the artwork, information about the artist(s), sales data
if it‚Äôs available for purchase, information about the Artsy partner that owns
it, and so on. In classic REST, this data is aggregated by a cascade of dozens
of HTTP fetches to our backend API.</p></blockquote>

<p>I wasn‚Äôt in the room when GraphQL was invented, but it seems to me that the team
that built it made a particularly crucial insight:</p>

<blockquote><p>In most cases, all of this contingent fetching forms a tree, which is more or
less <em>fixed</em> for a given page.</p></blockquote>

<p>Data from early responses contain the keys for subsequent requests, but the
linkages between these requests are usually straightforward. So if it were
possible to factor all this disparate fetching into one spot and encode it into
one big ‚Äúfetching tree‚Äù data structure ahead of time, this tree could be sent to
the the server, and the server could fulfill all of the data requirements in one
shot. This cuts out a tremendous amount of wasteful chatter between client and
server. Even in today's broadband world, bandwidth and latency matter,
especially for mobile users.</p>

<a name="GraphQL.anatomy"></a>
<h1>GraphQL anatomy</h1>

<blockquote><p><strong>Editorial note</strong> I'm going to use the term "operation" pretty liberally
here, but I mean it in the conceptual sense, not in the sense of the GraphQL
spec, where it defines the semantics of an entire GraphQL request.</p></blockquote>

<p>A GraphQL request always starts with at least <em>one root API operation</em> and some
finite number of follow-ups. Idiomatically, these follow-ups are queries,
meaning that they just retrieve data, without changing the server state in
observable ways. GraphQL models API operations as <strong>fields</strong>. How a field works
in GraphQL depends on its <strong>type</strong>, which falls into one of two basic
categories:</p>

<ul>
<li><strong>Scalar</strong> types (<code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>, and <code>ID</code>, as well as
application-defined <code>enum</code> and <code>scalar</code> types) represent the individual pieces
of <em>data actually sent to the client</em>. Contrary how I think of the term scalar
in other contexts, the data can be arbitrarily complex. As far as the GraphQL
spec is concerned, scalars are just opaque blobs of data with validation and
serialization rules. As an operation, a scalar field is terminal data fetch,
with no follow-ups. They are the leaves of the request tree.</li>
<li><strong>Object</strong> types (<code>type</code>, <code>union</code> and <code>interface</code>) are collections of fields.
As an operation, an object-typed field is an intermediate operation that
serves as the junction point for follow-up operations. But, it doesn‚Äôt
directly return any data. They are the branches of the request tree.</li>
</ul>


<p>The entire model for a given API is known as its <strong>schema</strong>. Every schema has a
root query type, whose fields serve as the API‚Äôs entry points.</p>

<pre><code># The root query object type
type Query {
  artwork(id: ID): Artwork
  artist(name: String)
  # ‚Ä¶ a whole bunch more root fields
}

type Artwork {
  title: String
  artist: Artist
}

type Artist {
  name: String
}
</code></pre>

<p>A GraphQL query request begins by mentioning at least one of the fields of the
root query object. This represents an initial query. And if that field is an
object, <em>its</em> fields are used to specify any number of follow-up queries.
Critically, <em>any</em> field in the request tree can take arguments, allowing a
request to be parameterized at all depths.</p>

<p>Take this query, for example:</p>

<pre><code>{
  artwork(id: "andy-warhol-campbells-soup-i-black-bean") {
    title
    artist {
      name
    }
  }
}
</code></pre>

<p>Here, we tell the server to look up an <code>Artwork</code> by its slug, and tell us the
title. So far, this is just like REST. But we <em>also</em> tell it to find us the
<code>Artist</code> for us. Importantly, object fields <em>must</em> be followed up with further
queries, and scalar fields <em>cannot</em> be. With that in mind, it‚Äôs easy to see that
<code>artwork</code> and <code>artist</code> are object fields, while <code>title</code> and <code>name</code> are scalar
fields.</p>

<p>Also note that the fact that there‚Äôs also an <code>artist</code> root query field actually
has nothing to do with its presence under <code>Artwork</code>. There can be multiple paths
to reach the same GraphQL type. This is defined explicitly by the schema.</p>

<p>Usefully, the server‚Äôs response to a GraphQL request will directly mirror the
shape of the request itself. The result of the request above looks like:</p>

<pre><code>{
  "data": {
    "artwork": {
      "title": "Campbell's Soup I: Black Bean",
      "artist": {
        "name": "Andy Warhol"
      }
    }
  }
}
</code></pre>

<a name="GraphQL.as.a..meta-.scripting.language"></a>
<h1>GraphQL as a (meta-)scripting language</h1>

<p>Let‚Äôs dig a little deeper into the scripting language interpretation of GraphQL,
because this is the crux of how I think people should think of GraphQL. If I
were to guess, I think Facebook‚Ä¶</p>

<ul>
<li>‚Ä¶knows this is true. After all, much of the spec is devoted to
<a href="http://facebook.github.io/graphql/October2016/#sec-Execution">the execution model of GraphQL</a>.</li>
<li>‚Ä¶might have backed into this design. It‚Äôs well known that they think of their
data as a graph, so I suspect GraphQL might have begun literally as a "graph
query language", analogous to <a href="https://en.wikipedia.org/wiki/SQL">SQL</a> for
relational databases.</li>
<li>‚Ä¶thinks that this too difficult to explain, and thus, settled on the query
language paradigm.</li>
</ul>


<p>There are a couple reasons GraphQL might not look like a scripting language to
you. It didn‚Äôt to me, at first! After all, you don't write your request as list
of statements. It doesn‚Äôt have a concept of variables, other than parameters to
the whole document. There are no looping constructs or recursion. But I think a
closer look might shift your perspective.</p>

<a name="Control.flow"></a>
<h2>Control flow</h2>

<p>It‚Äôs true that a GraphQL request doesn‚Äôt follow the same vertical sequence of
steps model familiar to most programming languages. But sequencing <em>does</em> exist.
It‚Äôs just represented by calling nested fields of object types, terminating in a
scalar field. See this request:</p>

<pre><code>{
  step1(arg: ‚Äúsomething‚Äù) {
    step2 {
      step3(arg: "something else‚Äù) {
        outputScalar
      }
    }
  }
</code></pre>

<p>In a more traditional language, this would look more like:</p>

<pre><code>step1(‚Äúsomething‚Äù)
step2()
return step3(‚Äúsomething else‚Äù)
</code></pre>

<p>So, sequencing got a bit more verbose, but it <em>is</em> there.</p>

<p>Interestingly, GraphQL reserves vertical stacking for something that‚Äôs an
afterthought in most languages: <em>concurrency</em>. (Granted, there‚Äôs no way to
<a href="https://en.wikipedia.org/wiki/Synchronization_(computer_science)">synchronize</a>
concurrent paths of execution.) I‚Äôm not going to quote
<a href="https://facebook.github.io/graphql/October2016/">the spec</a>, but search it
yourself, and you can find the word ‚Äúparallel‚Äù in there several times. This
design is intentional.</p>

<a name="Variables"></a>
<h2>Variables</h2>

<p>One of the core aspects of programming is the ability to pass intermediate data
around. The most basic way languages accomplish this is with named variables.
Many languages allow variables to be reassigned; some don't. GraphQL doesn‚Äôt
have them at all! But that doesn‚Äôt mean data can‚Äôt be propagated.</p>

<p>GraphQL supports one kind of propagation, which is the propagation of context
down the sequence of resolvers. It happens implicitly and invisibly. Exactly
what data is propagated and what that means is up to you.</p>

<p>How does this work? Well, if you have worked on GraphQL server code, you know
that every field has a <strong>resolver</strong>.</p>

<ul>
<li>For scalar fields, the resolver is responsible for returning the actual data
that the client sees.</li>
<li>For object fields, the resolver instead returns a hidden chunk of data that is
forwarded along to the resolvers of the fields contained in the object. So
these resolvers get their parent object‚Äôs hidden data, the global context, and
any arguments, and they can use all of these values to produce their value.</li>
</ul>


<p>Often, we just resolve an object field to a domain object. Its scalar fields
might correspond to properties of that domain object and its object fields might
correspond to related objects. But the architecture is more powerful than this!
A deeply nested field can potentially be the result of the resolved values of
all its parents. It all depends on how you design your resolvers to work
together.</p>

<p>This pattern reminds me a bit of when <a href="https://api.jquery.com/">jQuery</a> first
clicked for me. A lot of details are propagated invisibly within your <code>jquery</code>
object as you chain method calls to refine your DOM selections.</p>

<a name="Looping.and.recursion"></a>
<h2>Looping and recursion</h2>

<p>GraphQL doesn‚Äôt have them, plain and simple. Consequently, the GraphQL DSLs you
design are not
<a href="https://en.wikipedia.org/wiki/Turing_completeness">Turing-complete</a>--they will
always halt in a finite amount of steps. This is really important, because it
prevents clients from being able to send servers on errands that will never end.
Of course, the <em>implementations</em> of field resolvers on the server are free to do
whatever they want in full Turing-complete glory.</p>

<a name="Putting.it.together"></a>
<h2>Putting it together</h2>

<p>My point here is that the execution model of GraphQL is in many ways just like a
scripting language interpreter. The limitations of its model are strategic, to
keep the technology focused on client-server interaction. What's interesting is
that you as a developer provide nearly all of the definition of what operations
exist, what they mean, and how they compose. For this reason, I consider GraphQL
to be a <em>meta-scripting language</em>, or, in other words, a toolkit for building
scripting languages.</p>

<a name="The.post-REST.world"></a>
<h1>The post-REST world</h1>

<p>Subtly, this paradigm is a sharp step away from a whole body of knowledge that
models APIs as resources with fixed verbs, which we know as REST. It‚Äôs more
appropriate to think of GraphQL requests as a script of remote procedure calls
(RPC). From this perspective, the design of the schema is a lot less about data
modeling than it is a question of how you want your entire API to be traversed.
This encourages a verb-oriented mindset.</p>

<a name="Verb.orientation"></a>
<h2>Verb orientation</h2>

<p>Speaking of verbs, you can think of "fetch" as being the default verb in
GraphQL. You model other verbs as <strong>mutations</strong>. I delayed learning about
mutations, because I thought they must be way more complex than queries. Quite
the opposite! They all sit in one big, flat bucket at the root of your schema,
as the fields of the root <code>mutation</code> type. These fields have a type too, and if
it is an object type, then you can issue effectively any number of follow-up
queries after your mutation completes. Learning about mutations was when it
really dawned on me that <em>fields are just function calls</em>.</p>

<p>Mutations are a major break with REST. In GraphQL, your mutations are defined
under root mutation object that is separate from your root query object.
Therefore, you are immediately asked to accept that they don't represent verbs
on a resource, but verbs <em>on your entire service</em>. This eliminates one of REST‚Äôs
key weak points, namely that complex operations that touch multiple parts of an
application‚Äôs data model are difficult to model as a PUT, DELETE, POST, or PATCH
on a single resource. In my experience, this "impedance mismatch‚Äù between API
modeling and domain modeling has led to the worst aspects of my HTTP API
designs.</p>

<a name="REST.is.dead..Long.live.REST."></a>
<h2>REST is dead. Long live REST!</h2>

<p>It is borderline heresy in some circles to suggest that REST API design is dead.
But I‚Äôm saying it. Don‚Äôt get me wrong, REST is still a great paradigm for
serving static assets. It‚Äôs the <em>API</em> part I have an issue with.</p>

<p>Ironically, I think there‚Äôs a strong argument that a GraphQL request document
maps very nicely to the concept of a resource:</p>

<ul>
<li>It doesn‚Äôt change that often, and you could PUT it to store it, perhaps using
a hash of the request document to form the URL.</li>
<li>GraphQL queries map elegantly to GET operations on a stored query request
document‚Äôs URL.</li>
<li>GraphQL mutations map decently to POST operations to a stored mutation request
document‚Äôs URL.</li>
<li>The arguments of a GraphQL request map elegantly to HTTP query parameters.</li>
</ul>


<p>In other words, GraphQL is simply another formalization layer of HTTP-based API
design. Think of it as being akin to the way JSON representation changed the way
we think about client-server communication in full-stack apps. It‚Äôs not so much
that REST will cease to exist, but that it will fade to the background, as an
implementation detail of GraphQL application frameworks.</p>

<a name="GraphQL.is.not.your.data.model"></a>
<h1>GraphQL is not your data model</h1>

<p>Another realization I‚Äôve had in learning to apply GraphQL is that the schema is
<em>not</em> the actual data model, and therefore raw GraphQL responses cannot be
directly used by the client. You <em>could</em> choose to think of it this way, but
you‚Äôre likely to run into some conundrums:</p>

<ul>
<li><a href="https://github.com/facebook/graphql/issues/101">There is no free-form map data structure</a>.
There are only objects with fixed fields, scalars, and lists.</li>
<li>It is difficult to design abstractions over types.</li>
<li>The object tree you get in return from a query request is neither normalized
nor is it an object graph (multiple copies of the same object may be
returned).</li>
<li>Commonly used protocol patterns, like
<a href="https://facebook.github.io/relay/docs/graphql-connections.html">the connection pattern</a>,
require explicit modeling within your schema.</li>
<li>The limitations of GraphQL's type system make certain modeling techniques
difficult to directly model, such as
<a href="https://stackoverflow.com/questions/47933512/representing-enum-object-variant-type-in-graphql">singletons within unions</a>.</li>
<li>Recursive data types can‚Äôt be queried to undefined depth in their nested form.
Think of your comment board with nested replies.</li>
</ul>


<p>The upshot of this is that there likely needs to be some process of conversion
from your native data model on your server to your GraphQL API, and then again
from your client‚Äôs API consumption code to its internal data model.
<a href="https://facebook.github.io/relay/">Relay</a> and
<a href="https://www.apollographql.com/client">Apollo</a> serve this purpose. Their utility
wasn‚Äôt immediately clear to me when I naively imagined GraphQL to literally be a
system for reproducing a slice of server-side object graph. (Hmm, where might I
have gotten that impression from?)</p>

<p>A lot of discussion in the GraphQL space centers on data modeling‚Äîthe nouns.
There‚Äôs a lot of debate and worthwhile work to be done on that front, but one of
my primary reasons for writing this piece is to think about the verbs. What
happens when you think of GraphQL requests as not just verbs, but <em>chains</em> of
verbs? My inkling is that you start to be able to represent services in a much
more fluid way. Complex processes no longer have to be orchestrated by API
clients or hidden behind unwieldy black-box POST endpoints. Instead, clients can
compose processes from the easily inspectable building blocks that the server
provides via its GraphQL schema. That‚Äôs a whole different approach to API
design.</p>

<a name="So..where.to.now."></a>
<h1>So, where to now?</h1>

<p>I began by asserting that the future looks a lot <em>like</em> GraphQL. But I did not
say that GraphQL <em>is the future</em>. I hedge because there are a lot of unanswered
questions and some pain points within today‚Äôs GraphQL, even as it paints a
compelling picture of the future. I may write a follow-up piece bringing up some
of these gripes. At the moment, Facebook still largely controls the development
of the technology and it has been slow to evolve. Arguably, this is a good
thing, as the full-stack community continues to digest the basic concepts. But
I‚Äôm sure impatient folks will attempt forks or create parallel technologies. How
it all balances out is anybody‚Äôs guess.</p>

<p>Nonetheless, today‚Äôs GraphQL is already a tremendous leap forward from REST API
design. It much more directly models the sort of data traversals a client needs
to perform in order to do its job. I expect significant refinement within this
space over the next couple years. And after a couple more, the days before
GraphQL will be just another source of lore for grizzled vets like us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmer Misconceptions about Art]]></title>
    <link href="http://artsy.github.io/blog/2018/04/18/programmer-misconceptions-about-art/"/>
    <updated>2018-04-18T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/04/18/programmer-misconceptions-about-art</id>
    <content type="html"><![CDATA[<p>Our mission at Artsy has been to make a world where everyone is moved by art every day, and at a high level, the way that our engineering team supports that mission is through building software. We have built systems and databases and user interfaces that represent different facets of the art world, and throughout our work, we have... made some mistakes.</p>

<p>That's okay! Programmers make mistakes all the time. There is <a href="https://github.com/kdeldycke/awesome-falsehood">a large list of blog posts</a> describing various programmer misconceptions, from subjects you might expect would be simple to model in computers, like units of measurement and time, to subjects that are based more in the human condition, like postal addresses and marriage.</p>

<p>In the interest of openness and sharing what we've learned, the Artsy Engineering team has come up with the following list of misconceptions programmers believe about art. Thank you to everyone at Artsy who contributed to this list.</p>

<!-- more -->


<ul>
<li>All artworks have an artist (some artworks are attributed to "cultural makers", others have a manufacturer).</li>
<li>All artworks have exactly one artist (some artworks are collaborations).</li>
<li>All artworks are unique (there are editions, reproductions, and series of works, and modeling the relationships between them all is nontrivial).</li>
<li>All lots in an art auction are artworks (some lots are "experiential", like a visit to an artist's studio).</li>
<li>Only rich people buy art.</li>
<li>Only rich people can afford to buy art, and everyone else just buys posters of "real" art.</li>
<li>All artworks have a title (some are untitled).</li>
<li>"Untitled" signifies an artwork has no title (some artworks are titled "Untitled").</li>
<li>All artwork titles can fit inside 512 characters (not true, <a href="https://www.artsy.net/artwork/matt-goerzen-sockpuppet-theatre-representing-the-techniques-tools-and-environments-whereby-hackers-and-other-info-warriors-might-seek-to-parse-through-elsewhere-distorted-informational-domains-to-make-sense-of-them-and-also-possibly-to-acquire-by-illicit-or-clever-means-good-information-that-can-then-be-communicated-in-a-way-that-sheds-light-on-deceptions-but-can-also-be-difficult-to-evaluate-on-their-own-terms-due-to-the-elite-requisites-of-interpreting-such-knowledge-or-more-generalized-uncertaintities-regarding">here is a counterexample</a>).</li>
<li>An artwork is associated with a natural, canonical category.</li>
<li>An artwork belongs to only one gallery/collector/auction house at a time (provenance of artworks is complicated, and there is no canonical source of truth).</li>
<li>Art should always be rendered at its maximum size (there are complex business constraints and art world norms that need to be considered).</li>
<li>People buy art mostly for its visual qualities (most people buy art because of a story, because they understand what the artwork is trying to say, or because they simply can't stop thinking about it).</li>
<li>People don't buy art from JPEGs (in fact, people buy art that hasn't even been created yet).</li>
<li>"My kid can paint that" (<a href="https://twitter.com/ashfurrow/status/707273704640798720">but did they?</a>).</li>
<li>The art market needs technology because it's inefficient (the art market needs technology because technology can help expand the entire art world).</li>
<li>Intermediaries in the art market are bad (eg. galleries: they enable artists to make works for years before they sell anything, they are the enabler, not the obstacle).</li>
<li>There is one "art world" (there are thousands of galleries around the world, specializing in everything from contemporary jewelry and emerging conceptual art to Chinese scroll painting and regional landscapes).</li>
<li>Your opinion on art doesn't matter, the industry will independently determine value of an artwork (everyone has opinions, your appreciation of art is <em>all</em> about <em>you</em>).</li>
<li>The art world is hermetic and isn't relevant to my life (in fact the arts contribute billions of dollars to the economy, employ thousands of people, have a ripple effect on urban life, and are often a major source of inspiration for the TV, movies, and books we all consume on a daily basis).</li>
<li>Gallerists are fancy people in a luxury business, living fancy lives (in fact, the average salary for a gallery owner is way lower than you think).</li>
<li>Art and engineering are orthogonal (nope, just look at us!).</li>
</ul>


<p>Do you have expertise in an area programmers often get wrong? Write a blog post and add it to <a href="https://github.com/kdeldycke/awesome-falsehood">the list of misconceptions</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Builds Labs, Experiments and Easter Eggs]]></title>
    <link href="http://artsy.github.io/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs/"/>
    <updated>2012-09-12T21:21:00+00:00</updated>
    <id>http://artsy.github.io/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs</id>
    <content type="html"><![CDATA[<p>At Artsy Engineering we encourage a culture of experimentation with something called <em>labs</em>.</p>

<p>A new feature released into production is usually only turned on for a handful of users. We get feedback from our own team and a tiny group of early adopters, iterate, fix bugs, toss failed experiments and work on promoting complete, well behaved features to all users. The labs infrastructure gives us a chance to sleep on an idea and polish details. It also allows us to make progress continuously and flip a switch on the very last day.</p>

<p>My favorite labs features push our collective imagination and give birth to productive brainstorms around coffee at a popular startup hangout around the corner from our Manhattan office. But the team's favorite labs are, by far, those that ship as easter eggs. These are fun and sometimes useful features that don't make much business sense. So, before I explain our rudimentary labs system, I want to invite you to our easter egg hunt. Check out <a href="https://artsy.net/humans.txt">https://artsy.net/humans.txt</a> for instructions.</p>

<!-- more -->


<p>Our labs infrastructure is rather straightforward. A lab feature data model is pretty boring, with the exception of a <code>created_by</code> field. Each such lab feature belongs to an engineer and you have to nurture your feature and fight for it to meet the production bar!</p>

<pre><code class="ruby app/models/lab_feature.rb">class LabFeature
  include Mongoid::Document
  include Mongoid::Timestamps

  field :name
  field :created_by
end
</code></pre>

<p>You can enable and disable a lab feature for a given user.</p>

<pre><code class="ruby app/models/user.rb">class User
  references_and_referenced_in_many :lab_features

  def enable_lab_feature!(feature)
    lab_features.push(feature) unless lab_features.member?(feature)
    save!
  end

  def disable_lab_feature!(feature)
    lab_features.delete(feature)
    save!
  end

  def lab_feature_enabled?(feature)
    lab_features.member?(feature)
  end
end
</code></pre>

<p>In Ruby, we check whether the user has a lab with <code>lab_feature_enabled?</code>. In JavaScript, we return the lab features in a Backbone.js collection and check for the same.</p>

<pre><code class="coffeescript app/coffeescripts/models/user.coffee">class App.Models.CurrentUser extends Backbone.Model

  hasLabFeature: (feature_name) -&gt;
    $.inArray(feature_name, @get('lab_features')) &gt;= 0
</code></pre>

<p>We also have a bit of UI and an API to let you turn a lab feature on and off when you're part of our labs program. The program itself is also a lab feature!</p>

<p>Lab features can be retired after the code is promoted to all users or deleted.</p>

<pre><code class="ruby app/models/lab_feature.rb">class LabFeature
  def retire!
    User.all.each do |u|
      u.disable_lab_feature!(self)
    end
    destroy
  end
end
</code></pre>

<p>This "system" is super simple. I encourage you to think more in terms of experiments or labs - it helped us foster a culture of innovation, tremendously reduced risk of catastrophic failures, and, because anyone can push anything into labs at any time, removed the unnecessary discussions around whether an idea is worthy of an implementation at all.</p>
]]></content>
  </entry>
  
</feed>
