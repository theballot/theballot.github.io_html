<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rake | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/rake/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Master the Heroku CLI with Heroku Commander]]></title>
    <link href="http://artsy.github.io/blog/2013/02/01/master-heroku-command-line-with-heroku-commander/"/>
    <updated>2013-02-01T21:21:00+00:00</updated>
    <id>http://artsy.github.io/blog/2013/02/01/master-heroku-command-line-with-heroku-commander</id>
    <content type="html"><![CDATA[<p><img src="/images/2013-02-01-master-heroku-command-line-with-heroku-commander/heroku-commander.png"></p>

<p>Heroku users frequently run the <strong>heroku</strong> command-line tool that ships with the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>. It has two very convenient features: it will remember API credentials and default to the "heroku" GIT remote to figure out the application to connect to. Neither of these features are available in the Heroku client API, so it's not unusual to find developers invoke the Heroku CLI from Rake tasks and other automation scripts.</p>

<p>There're several problems with using the Heroku CLI for automation:</p>

<ol>
<li>The exit code from <code>heroku run</code> is not the exit code from the process being run on Heroku. See <a href="https://github.com/heroku/heroku/issues/186">#186</a>.</li>
<li>Gathering console output from <code>heroku run:detached</code> requires an external <code>heroku logs --tail</code> process that will never finish.</li>
</ol>


<p>The <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> gem wraps execution of the Heroku CLI to overcome these common limitations.</p>

<!-- more -->


<a name="Heroku.Configuration"></a>
<h3>Heroku Configuration</h3>

<pre><code class="ruby">commander = Heroku::Commander.new
# a hash of all settings for your default heroku app
commander.config
</code></pre>

<p>Notice that unlike <code>Heroku::Client.new</code>, this doesn't require your e-mail or API key. It will invoke <code>heroku config -s</code>.</p>

<p>You can specify an application name, too.</p>

<pre><code class="ruby">commander = Heroku::Commander.new({ :app =&gt; "heroku-commander" })
# a hash of all settings for the heroku-commander application
commander.config
</code></pre>

<a name="Run.Commands.on.Heroku"></a>
<h3>Run Commands on Heroku</h3>

<pre><code class="ruby">commander = Heroku::Commander.new
# returns all output lines
# eg. [ "Linux 2.6.32-348-ec2 #54-Ubuntu SMP x86_64 GNU" ]
commander.run "uname -a"
</code></pre>

<p>This calls <code>(heroku run 2&gt;&amp;1 uname -a; echo rc=\\$?)</code>, parses output for the final exit code line and raises an exception if the run's result code wasn't zero. In other words, if the command fails, an error is raised, which makes this suitable for Rake tasks.</p>

<p>You can also read output line-by-line.</p>

<pre><code class="ruby">commander.run "ls -1" do |line|
  # each line from the output of ls -1
end
</code></pre>

<a name="Detach.Commands.on.Heroku"></a>
<h3>Detach Commands on Heroku</h3>

<pre><code class="ruby">commander = Heroku::Commander.new
commander.run("ls -R", { :detached =&gt; true }) do |line|
  # each line from the output of ls -r -1
end
</code></pre>

<p>This calls <code>(heroku detached:run ls -r -1 2&gt;&amp;1; echo rc=\\$?)</code>, parses the output for a Heroku process ID, spawns a <code>heroku logs --tail -p pid</code> and monitors the log output until it reports process completion. It will also parse output for the final exit code and raise an exception if the run's result code wasn't zero.</p>

<a name="More.Examples"></a>
<h3>More Examples</h3>

<p>There're more working examples <a href="https://github.com/dblock/heroku-commander/tree/master/examples">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create MongoDB Command-Lines from Mongoid Configuration]]></title>
    <link href="http://artsy.github.io/blog/2013/01/31/create-mongodb-command-lines-with-mongo/"/>
    <updated>2013-01-31T21:21:00+00:00</updated>
    <id>http://artsy.github.io/blog/2013/01/31/create-mongodb-command-lines-with-mongo</id>
    <content type="html"><![CDATA[<p>We use MongoDB as our primary store and have built a healthy amount of automation around various database instances and operational environments. For example, we backup databases to S3 using <code>mongodump</code>, mirror data between instances with <code>mongorestore</code> and often need to open a MongoDB shell with <code>mongo</code> to examine data at the lowest level.</p>

<p>Generating MongoDB command-lines is tedious and error-prone. Introducing a new gem called <a href="https://github.com/dblock/mongoid-shell">mongoid-shell</a> to help with this. The library can generate command-lines for various MongoDB shell tools from your Mongoid configuration.</p>

<p>For example, connect to your production MongoDB instance from a <code>db:production:shell</code> Rake task.</p>

<pre><code class="ruby">namespace :db
  namespace :production
    task :shell
      Mongoid.load! "mongoid.yml", :production
      system Mongoid::Shell::Commands::Mongo.new.to_s
    end
  end
end
</code></pre>

<!-- more -->


<p>Commands can be created for the current default session or you can pass a session as an argument to a new command.</p>

<pre><code class="ruby"># will use Mongoid.default_session
Mongoid::Shell::Commands::Mongodump.new

# use a hand-crafted session
s = Moped::Session.new([ "127.0.0.1:27017" ])
Mongoid::Shell::Commands::Mongodump.new(session: s)
</code></pre>

<p>Commands accept parameters. Here's how to backup <code>my_database</code> to <code>/tmp/db_backup</code>.</p>

<pre><code class="ruby">out = File.join(Dir.tmpdir, 'db_backup')
db = 'my_database'
dump = Mongoid::Shell::Commands::Mongodump.new(db: db, out: out)
# mongodump --db my_database --out /tmp/db_backup
system dump.to_s
</code></pre>

<p>The mongoid-shell gem currently supports <code>mongo</code>, <code>mongodump</code>, <code>mongorestore</code> and <code>mongostat</code> and various MongoDB configurations, including replica-sets.</p>

<p>Please note that we don't recommend you store passwords for production environments in your <code>mongoid.yml</code>. At Artsy, we set all sensitive values directly on our Heroku instances with <code>heroku config:add</code> and use <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> to retrieve these settings in rake. We also have a bit of convention in our application name, such as "app-staging" and "app-production".</p>

<p>Here's a complete Rake task that dynamically fetches Heroku configuration and opens a MongoDB shell on a production or staging environment.</p>

<pre><code class="ruby">namespace :db do
  [ :staging, :production ].each do |env|
    namespace env do
      task :shell do
        app = "myapp-#{env}"
        config = Heroku::Commander.new(app: app).config
        config.each_pair do |k, v|
          ENV[k] = v
        end
        mongoid_yml = File.join(Rails.root, "config/mongoid.yml")
        Mongoid.load! mongoid_yml, env
        system Mongoid::Shell::Commands::Mongo.new.to_s
      end
    end
  end
end
</code></pre>

<p>Run <code>rake db:staging:shell</code> or <code>rake db:production:shell</code>, which works as long as you have access to the Heroku app itself. A bonus feature is that the mongoid-shell gem will automatically connect to the primary node of a replica-set.</p>

<pre><code>$ rake db:staging:shell
 mongo db:10007/app-staging --username user --password ************
 MongoDB shell version: 2.0.7
 connecting to: db:10007/app-staging
 &gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
