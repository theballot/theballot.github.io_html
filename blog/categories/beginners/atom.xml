<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: beginners | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/beginners/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How To Write Unit Tests Like a Brood Parasite]]></title>
    <link href="http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite/"/>
    <updated>2015-07-06T13:54:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/07/06/how-to-write-unit-tests-like-a-brood-parasite</id>
    <content type="html"><![CDATA[<p>To a beginner, <a href="http://ocmock.org/">OCMock</a> looks scary. The syntax is strange, the idea of stubbing seems complicated, and skirting around the need to use it at all times kind of works out for a while.</p>

<pre><code class="objc">[[[mock stub] // three brackets!!

[OCMockObject niceMockForClass:UINavigationItem.class]; // it has to be told to be nice?
</code></pre>

<p>All of this can be overwhelming for someone who just wants to write simple unit tests for a particular view controller.</p>

<p>Once you look into the specifics of OCMock, however, things get less terrifying really quickly. It is helpful to compare OCMock’s approach to stubbing to the <a href="https://vimeo.com/60553870">behaviors of certain bird species</a>. As always, the soothing voice of David Attenborough brings clarity and joy to even the most mundane puzzles of life’s journey.</p>

<!-- more -->


<hr />

<p>For those who hate birds and videos of them, the cuckoo duck is known for leaving its eggs in the nests of other birds precisely as their unsuspecting victims lay their own. The new host parents cannot differentiate their offspring from those of the duck and inadvertently raise the duck chicks to maturity.</p>

<p>In a similar fashion, OCMock can place trick objects in your <del>nest</del> test code with whichever custom configuration suits your needs. The ‘host’ subject under test can’t differentiate these mock objects from the objects they’ve been written to use, and you can decide exactly how you’d like the mock objects to behave in your testing environment. This was especially helpful for a method I created that relies on information from an asynchronous network request. We’ll call it the <code>DataSource</code> of a <code>StatusMonitor</code> class.</p>

<pre><code class="objc">- (BOOL)updatedStatus
{
    [DataSource getNewDataWithNetworkRequest];
    /// some code that relies on this new data
}
</code></pre>

<p>In my view controller, I can use a <code>StatusMonitor</code> to decide whether or not a notification should appear in my view:</p>

<pre><code class="objc">- (void)viewWillAppear
{
    [super viewWillAppear];

/// show or hide a notification based on this status
    BOOL shouldShowNotification = [self.statusMonitor updatedStatus];
}
</code></pre>

<p>When I’m writing tests for this view controller, I don’t care about <code>DataSource</code> - I just want to make sure the view controller knows when to show or hide a notification correctly depending on the new value from its StatusMonitor. I’d really like to avoid making any network requests within these kinds of tests. This is where the bird strategy comes in.</p>

<p>In my tests, I can create a decoy <code>StatusMonitor</code> with its corresponding methods using OCMock.</p>

<pre><code class="objc">StatusMonitor *statusMonitor = [[ARCMSStatusMonitor alloc] init];
id mockMonitor = [OCMockObject partialMockForObject:statusMonitor];

[[[mockMonitor stub] andReturn:@YES] checkStatus];
</code></pre>

<hr />

<p>I can then assign mockMonitor to the <code>statusMonitor</code> property of my view controller under test. In this way, the dependency on a network connection disappears, my view controller is happy, and my test can isolate the functionality I care about. OCMock provides some excellent documentation of what they mean by ‘nice’ and some other interesting things you can do with mock objects <a href="http://ocmock.org/features/">here</a>. For those interested in David Attenborough, birds, or natural history in general, I recommend  <a href="http://www.bbc.co.uk/nature/collections/p0048522">Nature</a>.</p>

<div style="text-align:center;">
<img src = "/images/2015-07-06-how-to-write-unit-tests-like-a-brood-parasite/attenborough.gif">
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Eigenstate of Mind]]></title>
    <link href="http://artsy.github.io/blog/2015/06/04/an-eigenstate-of-mind/"/>
    <updated>2015-06-04T18:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/06/04/an-eigenstate-of-mind</id>
    <content type="html"><![CDATA[<p>Prior to starting at Artsy, I followed a few online tutorials on iOS development. But a simple application demonstrating how to <a href="http://www.raywenderlich.com/85578/first-core-data-app-using-swift">build a todo list</a> didn't illustrate the nuances of a production codebase. Tutorials are an important learning tool for beginners, but can't possibly prepare you for everything you would encounter within an application like Artsy's.</p>

<p>I was lucky to have a mentor at Artsy to help me get started, and I wrote this post to pass along the lessons I learned. This is meant to be a guide for iOS beginners to get to know an open source production codebase. I'll cover the Xcode project organization and where to find things.</p>

<!-- more -->


<hr />

<p>Artsy names its GitHub repositories after physics terms. iOS apps all start with the letter 'e', and this one is called <a href="https://github.com/artsy/eigen">eigen</a>. As Artsy's consumer-facing iOS app, users refer to it simply as "Artsy".</p>

<p>Eigen is divided into two projects: one that contains all eigen-specific code, and one that contains reusable libraries. We organize these two components using something called an Xcode workspace.</p>

<p>The first time I opened eigen, the project wouldn't compile because it didn't have access to the components in the other project, the one with the libraries. To make sure that all the components you need are accessible in one place, Xcode organizes these projects under one workspace.</p>

<center><img src="/images/2015-06-04-an-eigenstate-of-mind/structure.png" /></center>


<p>The Artsy project contains all the eigen-specific code. It's where you'll find all the classes, models, views, controllers, and resources like images and sounds. It's what makes eigen <em>eigen</em>.</p>

<p>The Pods project is where the open source libraries used by eigen are kept. Artsy uses something called CocoaPods to organize these libraries, but that's beyond the scope of this post. For more information about CocoaPods, check out <a href="https://cocoapods.org/about">their site</a>.</p>

<p>Xcode organizes the different files of the Artsy project into folders. Let's take a look at each one.</p>

<center><img src="/images/2015-06-04-an-eigenstate-of-mind/folders.png" /></center>


<p>The <strong>Documentation</strong> folder contains instructions for iOS developers, such as how to started with eigen, how to deploy the application, and its changelog.</p>

<p>Note that documentation isn't always part of the actual Xcode project. Sometimes it lives in the Finder folder, but Xcode doesn't know about it.</p>

<p>The next folder is the <strong>Artsy</strong> folder. This is aptly named since it contains only the code and resources specific to the Artsy iOS app. This is where you would find anything that the user would interact with: the user interface, images, and the inner workings of our app. Most work of our work is done here.</p>

<p>Our automated tests live in the <strong>Artsy Tests</strong> folder. Since we have multiple developers working on this app, automated tests ensure that when someone changes something, the app continues to function as expected.</p>

<p>I find tests reassuring. As a beginner, tests provide peace of mind by letting me know if the changes I make have repercussions elsewhere.</p>

<p>Those are the important folders, but there are a few others you may be curious about.</p>

<p>Artsy has experimented with an Apple Watch extension, but it's nothing we've shipped yet. The Artsy WatchKit folders don't contribute to the rest of the application, and can be ignored. For now.</p>

<p>You'll notice the Frameworks, Products, and Pods folders. All three of them are generated by either Xcode or CocoaPods. They support the app, but a developer doesn't often work with them or their contents.</p>

<hr />

<p>This is a nice introduction to the structure of eigen, but this is only how <em>we</em> do things. Just like how tutorials helping you get started aren't necessarily applicable in the workplace, this guide isn't a applicable to every project.</p>

<p>I hope this makes eigen less intimidating. I had a mentor to walk me through things, and I hope this guide helps you explore the codebase, too. If you have any questions about how we do things, <a href="https://github.com/artsy/eigen/issues/new">get in touch</a>!</p>
]]></content>
  </entry>
  
</feed>
