<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: user agent | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/user-agent/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The perils of iOS user agent strings]]></title>
    <link href="http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/"/>
    <updated>2012-10-18T15:19:00+00:00</updated>
    <id>http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing</id>
    <content type="html"><![CDATA[<p>There is a great deal of misinformation on the web about detecting an
iPad or an iPhone in JavaScript. The
<a href="http://stackoverflow.com/a/4617648">top answer on stackoverflow</a> -
and many <a href="http://www.sitepoint.com/identify-apple-iphone-ipod-ipad-visitors/">blog posts</a> using <a href="http://www.askdavetaylor.com/detect_apple_iphone_user_web_site_server.html">this technique</a> - are all incorrect.</p>

<p>The conventional wisdom is that iOS devices have a user agent for
Safari and a user agent for the UIWebView. This assumption is
incorrect as iOS apps can and do
<a href="http://stackoverflow.com/a/8666438">customize their user agent</a>. The
main offender here is Facebook, whose iOS app alone accounts for about
1-3% of Artsy's daily traffic.</p>

<p>Compare these user agent strings from iOS devices:
```</p>

<a name="iOS.Safari"></a>
<h1>iOS Safari</h1>

<p>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3
iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</p>

<a name="UIWebView"></a>
<h1>UIWebView</h1>

<p>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117</p>

<a name="Facebook.UIWebView"></a>
<h1>Facebook UIWebView</h1>

<p>iPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]
```</p>

<!-- more -->


<p>The old way to identify iPhone / iPad in JavaScript:
<code>javascript
IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
IS_IPHONE = navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
</code></p>

<p>If you were to go with this approach for detecting iPhone and iPad,
you would end up with IS_IPHONE <em>and</em> IS_IPAD both being true if a user
comes from Facebook on an iPad. That could create some odd behavior!</p>

<p>The correct way to identify iPhone / iPad in JavaScript:
<code>javascript
IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
IS_IPHONE = (navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
if (IS_IPAD) {
  IS_IPHONE = false;
}
</code></p>

<p>We simply declare <code>IS_IPHONE</code> to be <code>false</code> on iPads to cover for the
bizarre Facebook UIWebView iPad user agent. This is one example of how
<em>user agent sniffing is unreliable</em>. The more iOS apps that customize
their user agent, the more issues user agent sniffing will have. If
you can avoid user agent sniffing (hint: CSS Media Queries), DO
IT.</p>
]]></content>
  </entry>
  
</feed>
