<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode 8 Manual Codesigning with Fastlane]]></title>
    <link href="http://artsy.github.io/blog/2017/01/13/xcode-8-fastlane-codesigning/"/>
    <updated>2017-01-13T14:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/01/13/xcode-8-fastlane-codesigning</id>
    <content type="html"><![CDATA[<p>New year, new deploy process! Late last year our mobile team completed the update to Swift 3 (and thus, the update to Xcode 8). The latest version of Apple's IDE includes a lovely feature: automating provisioning profile management! (Note: not sarcasm, the feature is really nice. Check out the <a href="https://developer.apple.com/videos/play/wwdc2016/401/">WWDC video</a> for an in-depth exploration.)</p>

<p><img src="/images/2017-01-13-xcode-8-fastlane-codesigning/xcode-screenshot.png" alt="Automatic code signing settings" /></p>

<p>However, when I went to make our first <a href="http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys/">automated deploy</a> today, things didn't work; I got a somewhat cryptic error about code signing.</p>

<!-- more -->


<blockquote><p>Code signing is required for product type 'Application' in SDK 'iOS 10.1'</p></blockquote>

<p>Code signing was failing for our project. Hmm. First step in fixing a bug is always to reproduce it, which I could do locally. I started looking into the code that manages our deploys' signing process and got lost. My colleague Orta was kind enough to give me a hand.</p>

<p>Some background: the Fastlane suite of tools includes <a href="https://github.com/fastlane/fastlane/tree/master/match">Match</a>, which manages your signing certificates and provisioning profiles in a private GitHub repository. We don't use match due to complications with our multiple apps, but we use <a href="https://github.com/artsy/eigen/blob/608f60860165dd9b3c376da00492a3cb36bf5214/fastlane/Fastfile#L95-L130">very similar logic</a> to clone the repo, extract the certificate and profile, and install the keys on CI.</p>

<p>So what wasn't working?</p>

<p>Well it turns out that Xcode's fancy new automatic code signing was incompatible with our manual process of specifying certificates and profiles. The easy solution would be to simply disable that setting, but that would be a shame: the new automatic code signing makes developing on devices way easier and we didn't want to sacrifice that for the sake of our deploys.</p>

<p>So we went looking and luckily found <a href="https://github.com/artsy/eigen/pull/2104">the solution</a>. We amended our codesigning setup with the <a href="https://docs.fastlane.tools/actions/#update_project_provisioning">update_project_provisioning</a> and <a href="https://docs.fastlane.tools/actions/#update_project_team">update_project_team</a> Fastlane actions, and the <a href="https://github.com/hjanuschka/fastlane-plugin-update_project_codesigning">update_project_codesigning plugin</a>. Basically, we disable the automatic signing feature and then manually set the provisioning profile to the one we cloned from our private GitHub repo.</p>

<p>So remember folks, if you're ever asked to sacrifice ease of development for the sake of getting computers to behave, there's probably a better way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating TestFlight Deploys using Fastlane]]></title>
    <link href="http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys/"/>
    <updated>2015-12-15T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/12/15/Automating-Testflight-Deploys</id>
    <content type="html"><![CDATA[<p>I've been a really <a href="http://artsy.github.io/blog/2015/09/18/Cocoa-Architecture-Dependencies/">strong supporter</a> of the <a href="https://fastlane.tools">fastlane</a> toolset. I think it fixes a lot of common developer problems, in a space that Apple doesn't really touch. The command line.</p>

<p>We've added hints of fastlane to our apps at different rates, <a href="https://github.com/artsy/eidolon/">Eidolon</a> uses fastlane for everything but <a href="https://github.com/artsy/eigen/">Eigen</a>/<a href="https://github.com/artsy/energy">Energy</a>/<a href="https://github.com/artsy/emergence">Emergence</a> have been pretty slow on the uptake, though they have more complicated setups, being App Store apps.</p>

<p>When <a href="https://krausefx.com/">Felix</a> announced <a href="https://krausefx.com/blog/introducing-match-a-new-approach-to-code-signing">match</a> this week, I felt like he tackled a problem we face in our <a href="http://artsy.net/job/mobile-engineer">small dev team</a>. I integrated this, only to find that it could also fix my problems with deployment. The rest of this post goes into the "how I did this." You can also cheat and look at the <a href="https://github.com/artsy/eigen/compare/d06270882aadec8f03927455a5229b53dd0a73c8...9eaf9082ebdcdf75f12ad2804260587e01526f2d">commits</a> directly.</p>

<!-- more -->


<p>First up, a TLDR for <a href="https://github.com/fastlane/match">match</a>. <em>match is a tool that keeps all of your code-signing setup in a private git repo.</em> We currently keep them in a shared 1Password vault. By switching to using a private git repo we can can use our existing GitHub authentication for CI to provide access to the certificates for signing on circle.</p>

<p>We use a <a href="https://github.com/artsy/eigen/blob/master/Makefile">Makefile</a>, I know that fastlane provides an awesome tool in the form of <a href="https://github.com/fastlane/fastlane#features">fastlane lanes</a> - but we're pretty happy with a Makefile, they're the simplest tool that does what we need.</p>

<p>I wanted to lower the barrier for us shipping betas, so I opted to add another build step in the CI process. This step checks what branch is it, and if it's the beta branch, grab the certs, then deploy.</p>

<pre><code class="sh">deploy_if_beta_branch:
    if [ "$(LOCAL_BRANCH)" == "beta" ]; then make certs; make ipa; make distribute; fi
</code></pre>

<p><code>make certs</code> is really simple, it runs: <code>bundle exec match appstore --readonly</code> which and pulls metadata from a <a href="https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/Matchfile">Matchfile</a>. This means we can sign app store builds on CI.</p>

<p>If you don't know what the <code>bundle exec</code> prefix is, I'd recommend reading my guide on the CocoaPods website for <a href="https://guides.cocoapods.org/using/a-gemfile.html">Gemfile</a>s.</p>

<p>The next step is generating an ipa, we do this with <a href="https://github.com/fastlane/gym">gym</a> via <code>make ipa</code> which looks like this:</p>

<pre><code class="sh">ipa: set_git_properties change_version_to_date
    bundle exec gym
</code></pre>

<p>It executes some make tasks to ensure we know what git commit each build is, and we use the date to provide a faux-<a href="http://semver.org">semver</a> for apps.</p>

<p>Gym will build our app, according to our <a href="https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/GymFile">Gymfile</a>. Nothing too surprising in there. It will output an <a href="http://apple.stackexchange.com/questions/26550/what-does-ipa-stand-for">ipa</a> and a <a href="http://stackoverflow.com/questions/3656391/whats-the-dsym-and-how-to-use-it-ios-sdk">dsym</a> that <code>make distribute</code> can handle.</p>

<p><code>make distribute</code> is a pretty easy one, we generate a CHANGELOG via Ruby, then run the command <code>bundle exec pilot upload -i build/Artsy.ipa</code>, it will ship it to iTunes Connect after configuration from the <a href="https://github.com/artsy/eigen/blob/9eaf9082ebdcdf75f12ad2804260587e01526f2d/fastlane/AppFile">Appfile</a>. This is great, but it goes one better. It will, by default, run a synchronous check for whether the App has finished processing.</p>

<p></div></div><a href='/images/2015-12-15-Automating-Testflight-Deploys/ci-itunes-screenshot.png'><img src="/images/2015-12-15-Automating-Testflight-Deploys/ci-itunes-screenshot.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>This is awesome. I'd like to add a Slack message to tell us that it's shipped too, which would be much easier if we used a <a href="https://github.com/fastlane/fastlane/tree/master/docs#after_all-block">Fastfile</a>. We've not entirely moved all of our apps to TestFlight, this is our first experiment in the space, we've been really happy with Hockey, and still are. However, without trying new things we'll never be able to know what we should consider internal best practices.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasecop Tracks Stale Releases]]></title>
    <link href="http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases/"/>
    <updated>2015-09-01T17:30:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/09/01/releasecop-tracks-stale-releases</id>
    <content type="html"><![CDATA[<p>Artsy practices a sort of <a href="http://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery</a>. We keep release cycles short and the process of reviewing, testing, and deploying our software as reliable, fast, and automated as possible. (This blog has touched on these practices <a href="http://artsy.github.io/blog/categories/testing/">multiple</a> <a href="http://artsy.github.io/blog/categories/continuous-integration">times</a>.)</p>

<p>Usually, commits that have been reviewed and merged are immediately built and tested. Successfully built versions of the codebase are often automatically deployed to a staging environment. On an automated or frequent-but-manual basis, that version is deployed to a production environment. Thus, commits form a pipeline:</p>

<ul>
<li>From developers' working branches</li>
<li>To the master branch</li>
<li>Through a hopefully-successful build</li>
<li>To a staging environment</li>
<li>To production</li>
</ul>


<p>The number of apps and services we deploy has grown to <em>dozens</em> per team, so sometimes things fall through the cracks. We've been using <a href="https://github.com/joeyAghion/releasecop">Releasecop</a> for the last few months to get gentle email reminders when an environment could use a deploy.</p>

<!-- more -->


<pre><code>gem install releasecop
releasecop edit
</code></pre>

<p>This opens a <em>manifest</em> file where you can describe the sequence of git remotes and branches that make up your own release pipeline. For example:</p>

<pre><code>{
  "projects": {
    "charge": [
      { "name": "master", "git": "git@github.com:artsy/charge.git" },
      { "name": "staging", "git": "git@heroku.com:charge-staging.git" },
      { "name": "production", "git": "git@heroku.com:charge-production.git" }
    ],
    "gravity": [
      { "name": "master", "git": "git@github.com:artsy/gravity.git" },
      { "name": "master-succeeded", "git": "git@github.com:artsy/gravity.git", "branch": "master-succeeded" },
      { "name": "staging", "git": "git@github.com:artsy/gravity.git", "branch": "staging" },
      { "name": "production", "git": "git@github.com:artsy/gravity.git", "branch": "production" }
    ]
  }
}
</code></pre>

<p>The <code>charge</code> app is a typical deployment to Heroku. Work progresses from the <code>master</code> branch to a <code>charge-staging</code> app to a <code>charge-production</code> app. The <code>gravity</code> app is a more complicated, non-Heroku deployment. It updates git branches to reflect what has been merged (<code>master</code>), tested (<code>master-succeeded</code>), deployed to staging, and deployed to production.</p>

<p>Run the <code>releasecop check [app]</code> command to report the status of your apps' releases:</p>

<pre><code>$ releasecop check --all
charge...
  staging is up-to-date with master
  production is up-to-date with staging
gravity...
  master-succeeded is up-to-date with master
  staging is up-to-date with master-succeeded
  production is behind staging by:
    06ca969 2015-09-04 [config] Replace Apple Push Notification certificates that expire today. (Eloy Durán)
    171121f 2015-09-03 Admin-only API for cancelling a bid (Matthew Zikherman)
    4c5feea 2015-09-02 install mongodb client in Docker so that import rake tasks can run (Barry Hoggard)
    95347d1 2015-08-31 Update to delayed_job cookbook that works with Chef 11.10 (Joey Aghion)
2 project(s) checked. 1 environment(s) out-of-date.
</code></pre>

<p>A nightly <a href="https://jenkins-ci.org/">Jenkins</a> job emails us the results, but a cron job could work equally well.</p>

<p><a href="https://github.com/joeyAghion/releasecop">Releasecop</a> reminds us to deploy ready commits and close the loop on in-progress work. We hope you find it useful. (Pull requests are welcome!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So You Want an SSL Certificate? A Pragmatic Handbook]]></title>
    <link href="http://artsy.github.io/blog/2015/04/09/so-you-want-an-ssl-certificate/"/>
    <updated>2015-04-09T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2015/04/09/so-you-want-an-ssl-certificate</id>
    <content type="html"><![CDATA[<p>Obtaining, reissuing and installing SSL certificates across various pieces of Artsy infrastructure (read about our tech stack <a href="/blog/2015/03/23/artsy-technology-stack-2015/">here</a>) is a mind-numbing excercise dreaded by every platform engineer. Few people really understand what's going on, installing SSL certificates is right up there in the opaque world of user-unfriendliness, along with onboarding a new iOS developer in an organization with Xcode.</p>

<p>Still, it can be done - below is our cookbook.</p>

<p><img src='/images/2015-04-09-so-you-want-an-ssl-certificate/ev.png'>
<img src='/images/2015-04-09-so-you-want-an-ssl-certificate/cert.png'></p>

<!-- more -->


<a name="Buying.an.SSL.Certificate"></a>
<h2>Buying an SSL Certificate</h2>

<p>We buy our SSL certificates from <a href="https://www.rapidsslonline.com">rapidsslonline.com</a>. You'll be immediately overwhelmed and confused by the many brand names, including Symantec, RapidSSL, Thawte and GeoTrust and the mentions of "no extra cost", "cheap" and "quality". We buy two kinds of GeoTrust certificates: <em>GeoTrust True BusinessID with Extended Validation</em> and <em>GeoTrust True BusinessID Wildcard</em>. We typically get those for a at least 2 years, trying to balance the pain of installing them with the time it takes our short collective memory to forget how to obtain and deploy an SSL cert.</p>

<p>When buying extended validation certificates you will need an administrative and a technical contact, a working company phone number and a public entry such as yellow pages. You'll need to begin by making a CSR, which is explained below.</p>

<a name="GeoTrust.SAN.True.BusinessID.with.Extended.Validation"></a>
<h3>GeoTrust SAN True BusinessID with Extended Validation</h3>

<p>This certificate lets us have the green <em>Artsy Inc.</em> pictured above and to list multiple domains - SAN stands for <em>Subject Alternative Names</em>. To obtain it your company must have a public record with the Better Business Bureau or <a href="http://www.yellowpages.com/new-york-ny/mip/art-sy-inc-467372877?lid=467372877">YellowPages.com</a> with a working phone number. You will have to fill out an <a href="https://www.geotrust.com/support/true-businessid/ev-validation-requirements/acknowledgement-agreement.pdf">Acknowledgement Agreement</a>, that will make everything seem more legit. This certificate requires you to list hostnames. You can purchase additional names when needed and reissue the certificate - we typically include <em>www.artsy.net</em>, <em>m.artsy.net</em>, etc.</p>

<a name="GeoTrust.True.BusinessID.Wildcard"></a>
<h3>GeoTrust True BusinessID Wildcard</h3>

<p>This certificate can be installed on <em>anything.example.com</em> which is great for both test and production systems - we use SSL everywhere.</p>

<a name="Obtaining.Certificates"></a>
<h2>Obtaining Certificates</h2>

<a name="Installing.OpenSSL"></a>
<h3>Installing OpenSSL</h3>

<p>Install OpenSSL (typically via <code>brew install openssl</code>).</p>

<a name="Organizing.Files.and.Keeping.it.Safe"></a>
<h3>Organizing Files and Keeping it Safe</h3>

<p>You will want to organize your certificate files into folders, by name, type and date. We typically place everything in a shared Dropbox folder that is only accessible to engineering operations. Ours looks like this:</p>

<p><img src='/images/2015-04-09-so-you-want-an-ssl-certificate/files.png'></p>

<a name="Generating.CSRs"></a>
<h2>Generating CSRs</h2>

<p>For the examples below we'll use an <em>example.com</em> domain.</p>

<p>The first step is to generate a <em>Certificate Signing Request</em> (CSR). The important information in the CSR is your location and the e-mail address.</p>

<a name="Wildcard.Certificates"></a>
<h3>Wildcard Certificates</h3>

<pre><code>$ openssl req -new -newkey rsa:2048 -nodes -keyout example.com.key -out example.com.csr

Generating a 2048 bit RSA private key
....................+++
..............+++
writing new private key to 'example.com.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:New York
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Example, Inc.
Organizational Unit Name (eg, section) []:
Common Name (eg, YOUR name) []:*.example.com
Email Address []:it@example.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>

<p>The above creates two files: <em>example.com.csr</em> (the CSR) and <em>example.com.key</em> (a private key to sign the CSR and the future certificate).</p>

<a name="SAN.Certificates"></a>
<h3>SAN Certificates</h3>

<p>This is slightly different than for a wildcard certificate. From a new folder, copy the OpenSSL configuration file.</p>

<pre><code>$ cp /System/Library/OpenSSL/openssl.cnf .
</code></pre>

<p>Edit the file as follows.</p>

<p>Inside the <em>v3_req</em> section uncomment <em>req_extensions</em>. This will tell OpenSSL to include this section in the CSR.</p>

<pre><code>[req]
req_extensions = v3_req
</code></pre>

<p>Create the <em>v3_req</em> section with the following information along with the DNS names that will be used for the EV certificate. This can be changed later, and additional names can be bought, but will require re-issuing the certificate.</p>

<pre><code>[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = example.com
DNS.2 = www.example.com
DNS.3 = m.example.com
DNS.4 = api.example.com
</code></pre>

<p>Generate the CSR.</p>

<pre><code>$ openssl req -new -out san.example.com.csr -newkey rsa:2048 -nodes -keyout san.example.com.key -config openssl.cnf

Country Name (2 letter code) [US]:US
State or Province Name (full name) [New York]:New York
Locality Name (eg, city) []:New York
Organization Name (eg, company) [Example, Inc.]:Example, Inc.
Organizational Unit Name (eg, section) []:
Common Name (eg, YOUR name) []:example.com
Email Address []:it@example.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
</code></pre>

<p>This creates <em>san.example.com.csr</em> and <em>san.example.com.key</em>. Check that it includes the correct information.</p>

<pre><code>$ openssl req -text -noout -in san.example.com.csr

Subject: C=US, ST=New York, L=New York, O=Example, Inc./emailAddress=it@example.com
Requested Extensions:
  X509v3 Basic Constraints:
    CA:FALSE
  X509v3 Key Usage:
    Digital Signature, Non Repudiation, Key Encipherment
  X509v3 Subject Alternative Name:
    DNS:example.com, DNS:www.example.com, DNS:m.example.com, DNS:api.example.com
</code></pre>

<a name="Buying.the.Certificate"></a>
<h2>Buying the Certificate</h2>

<p>When buying a certificate you will be asked to copy-paste the contents of the CSR generated above. There will be some back-and-forth for the verification process over e-mail and phone. The GeoTrust authenticator will be happy to hear that your yellow pages listing's phone number matches their records.</p>

<a name="Certificate.E-Mail"></a>
<h2>Certificate E-Mail</h2>

<p>Once issued you will receive an e-mail with the certificate. It contains the web server certificate (save it as <em>example.com.crt</em>) and an intermediate certificate (save it as <em>example.com.intermediate.crt</em>).</p>

<p>For RapidSSL you will also need more intermediate CAs, currently obtained from <a href="https://knowledge.rapidssl.com/support/ssl-certificate-support/index?page=content&amp;id=AR1548">here</a>. You can get them as a bundle (we save it as <em>intermediate.crt</em>) or separately (we save these as <em>intermediate-primary.crt</em> and <em>intermediate-secondary.crt</em>).</p>

<a name="Installing.Certificates"></a>
<h2>Installing Certificates</h2>

<a name="Heroku"></a>
<h3>Heroku</h3>

<p>You need the <a href="https://devcenter.heroku.com/articles/ssl-endpoint">SSL endpoint addon</a> to upload the certificate to Heroku. The certificate must be a concatenation of your certificate and all intermediaries. For our RapidSSL certificates this is usually made as follows.</p>

<pre><code>$ cat example.com.crt intermediate.crt &gt; concatenated.crt

$ heroku certs:add concatenated.crt example.com.key --app example-app

Adding SSL endpoint to example-app... done
example-app now served by tokyo-7171.herokussl.com
Certificate details:
    subject: /serialNumber=xyz/OU=GT65834870/OU=See www.rapidssl.com/resources/cps (c)13/OU=Domain Control Validated - RapidSSL(R)/CN=*.example.com
    start date: 2013-01-13 18:21 EST
    expire date: 2014-01-17 01:55 EST
    common name(s): *.example.com, example.com
    issuer: /serialNumber=yz/OU=GT65834870/OU=See www.rapidssl.com/resources/cps (c)13/OU=Domain Control Validated - RapidSSL(R)/CN=*.example.com
    SSL certificate is verified by a root authority.
</code></pre>

<p>If you have a certificate already installed, update it.</p>

<pre><code>$ heroku certs:update concatenated.crt example.com.key --app example-app
</code></pre>

<p>Heroku is known to patch common certificate issues during this process, such as certificates listed out of order.</p>

<a name="OpsWorks"></a>
<h3>OpsWorks</h3>

<p>OpsWorks offers 3 SSL fields in the application configuration (choose <em>Apps</em>, then <em>Edit</em> the app):</p>

<p><img src='/images/2015-04-09-so-you-want-an-ssl-certificate/opsworks.png'></p>

<p>The <em>SSL Certificate</em> should be the same contents of the <em>concatenated.crt</em> we made above.</p>

<p>The <em>SSL Certificate key</em> should be the contents of <em>example.com.key</em>.</p>

<p>The <em>SSL Certificates of Certification Authorities</em> should be left empty.</p>

<p>The OpsWorks application will need to be redeployed for the new certificates to be installed.</p>

<a name="AWS.ELB"></a>
<h3>AWS ELB</h3>

<p>Login to AWS, go to <em>EC2 Instances</em>, click on <em>Load Balancers</em>, find your load-balancer and choose the <em>Listeners</em> tab. You can upload or choose a certificate here.</p>

<p><img src='/images/2015-04-09-so-you-want-an-ssl-certificate/elb.png'></p>

<p>The <em>Private Key</em> should be <em>example.com.key</em>.</p>

<p>The <em>Public Key Certificate</em> should be the contents of <em>example.com.crt</em>.</p>

<p>The <em>Certificate Chain</em> is the most problematic, it needs to list the entire chain, in our case it's a concatenation of <em>example.com.intermediate.crt</em>, then <em>intermediate-primary.crt</em>, and the root certificate for issuer of the latter, which is the Equifax Secure Certificate Authority from <a href="https://www.geotrust.com/resources/root-certificates/">here</a>.</p>

<p>When the chain is incorrect the generic error message is "Unable to validate the certificate chain." It took us a few tries and a bit of help from the <a href="https://forums.aws.amazon.com/thread.jspa?threadID=175691">AWS forums</a>.</p>

<a name="Reissuing.a.Certificate"></a>
<h2>Reissuing a Certificate</h2>

<p>Recently we had to upgrade our certificates from those signed using a SHA-1 hash algorithm to those signed with the SHA-256 algorithm, and had to change DNS names in the SAN certificate.</p>

<p>Find the order on <a href="https://www.rapidsslonline.com/client/orders.aspx">RapidSSLOnline</a> (you will likely have to change the start date of your search), and follow the link to reissue the certificate at the bottom. Create a new CSR, as for any new certificate. No need to choose a specific web server type and make sure to check SHA-256 for the signature method. You will need to go through all the same motions for a reissued certificate as for a new one.</p>

<a name="Verifying..a.Certificate"></a>
<h2>Verifying  a Certificate</h2>

<p>Verify that your certificate is correct and contains all the right intermediaries.</p>

<pre><code>$ openssl s_client -CApath /etc/ssl/certs/ -connect example.com:443

SSL-Session:
    Protocol  : TLSv1
    Cipher    : AES256-SHA
    Session-ID: A746CC85733F16630CA9CBD12FD1A0379CEC22649C1558D12B575529815F8E67
    Session-ID-ctx:
    Master-Key: 09EBFF52D4F673FA0FA5B6BD1151722CF96197711430BCA35B01D6AA2803F8904D834F4EEB151E6354601FEC55CDFDCA
    Key-Arg   : None
    Start Time: 1428507204
    Timeout   : 300 (sec)
    Verify return code: 0 (ok)
</code></pre>

<p>You want the <em>Verify return code: 0 (ok)</em> message at the bottom. Pay attention to other errors, a common one may be <em>verify error:num=19:self signed certificate in certificate chain</em>, which can be ignored and <em>verify error:num=20:unable to get local issuer certificate</em>, which is a real problem and means you're missing an intermediate certificate.</p>

<p>A simpler way to check is to use the <a href="https://ssltools.geotrust.com/checker/views/certCheck.jsp">GeoTrust SSL Checker</a>. The certificate chain can go all the way up to the root, although including the root is not <a href="http://security.stackexchange.com/questions/65332/ssl-root-certificate-optional">technically necessary or recommended</a>.</p>

<p><img src='/images/2015-04-09-so-you-want-an-ssl-certificate/chain-equifax.png'></p>

<p><img src='/images/2015-04-09-so-you-want-an-ssl-certificate/chain-geotrust.png'></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Great Outage Post-Mortems]]></title>
    <link href="http://artsy.github.io/blog/2014/11/19/how-to-write-great-outage-post-mortems/"/>
    <updated>2014-11-19T12:21:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/11/19/how-to-write-great-outage-post-mortems</id>
    <content type="html"><![CDATA[<p>The website is finally back up after crashing hard for 4 hours straight.</p>

<p>Recently AWS decided to <a href="http://aws.amazon.com/blogs/aws/ec2-maintenance-update">reboot a few of your servers for a critical update</a>. It didn't seem like it was going to be a big deal, except that the schedule was only accommodating if you were in the Pacific Northwest. The first reboot took out a secondary replica of our MongoDB database. Unfortunately <a href="https://github.com/mongoid/moped/issues/321">the driver handled that poorly</a> and spent the first 400ms of every subsequent HTTP request trying to reconnect to the missing instance. That server came back up, but failed to find its storage volumes because of a human mistake in a past migration and the alerts were mistakenly silenced by someone monitoring the system. A few hours later the primary was being stepped down and rebooted, sending the driver into panic over <a href="https://github.com/mongoid/moped/issues/323">another bug</a>. The site went down.</p>

<p>None of this was obvious while it was happening as the rate of automated alerts grew. Engineers communicated to the team that they are actively focusing on bringing the systems back up. This helped to fend off a large amount of instant messages, e-mails, texts and phone calls from various people on the team that were in the middle of demoing something to a very important prospective customer on the other side of the planet. It was also the middle of the night in New York.</p>

<p>Now that all the systems are back up, lets write a detailed outage post-mortem.</p>

<!-- more -->


<a name="Whose.Job.is.It."></a>
<h2>Whose Job is It?</h2>

<p>In a small or medium-sized company, the most senior engineering manager, CTO, VP or Head of Engineering should be writing an outage post-mortem. It's their job and responsibility to acknowledge, understand and explain what happened. Focusing attention away from the individual contributors allows the team to learn from the mistakes and address the root causes in time without the unnecessary stress or pressure during a crisis.</p>

<a name="Recipients"></a>
<h2>Recipients</h2>

<p>The post-mortem audience includes customers, direct reports, peers, the company's executive team and often investors. The e-mail may be published on your website, and otherwise goes to the entire team. It's critical to bcc everyone. This is the equivalent of a locked thread, avoiding washing the laundry in public: one of the worst possible things to see is when a senior manager replies back pointing an individual who made a mistake, definitely not an email you want accidentally sent to the entire company.</p>

<p>I usually begin my e-mails with <em>Team (on the bcc), ...</em>.</p>

<p>I also bcc myself and label the e-mail "Outages", to be able to easily find the incident history next time around.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/header.png" alt="header" /></p>

<a name="Outage.Email.Subject"></a>
<h2>Outage Email Subject</h2>

<p>Post-mortem subjects should include a date and a duration. This gets right to the point and offers a summary of the impact.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/subject.png" alt="subject" /></p>

<a name="Outage.Summary"></a>
<h2>Outage Summary</h2>

<p>The outage e-mail begins with a summary, a slightly expanded version of the subject line. Many people won't read the details, so include graphs. These should tell the same story as the description of the outage. I use <a href="http://newrelic.com">NewRelic's</a>.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/summary.png" alt="summary" /></p>

<a name="What.Caused.the.Outage"></a>
<h2>What Caused the Outage</h2>

<p>Explain what caused the outage on a timeline. Every incident begins with a specific trigger at a specific time, which often causes some unexpected behavior. For example, our servers were rebooted and we expected them to come back up intact, which didn't happen. Furthermore, every incident has a root cause: the reboot itself was trigger, however a bug in the driver caused the actual outage. Finally, there're consequences to every incident, the most obvious one is that the site goes down.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/cause.png" alt="cause" /></p>

<a name="How.was.the.Outage.Resolved"></a>
<h2>How was the Outage Resolved</h2>

<p>Now that the timeline of the outage is established, we explain what actions took place to resolve it.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/resolution.png" alt="resolution" /></p>

<a name="The.Post-Mortem"></a>
<h2>The Post-Mortem</h2>

<p>The post-mortem answers the single most important question of what could have prevented the outage.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/post-mortem.png" alt="post-mortem" /></p>

<a name="Outage.History"></a>
<h2>Outage History</h2>

<p>To most humans that encounter bugs, it may seem like your systems have failures all the time. It's important to educate everyone that an outage is much more than a bug and that it hopefully doesn't happen frequently. Provide a history of outages, referencing the last one.</p>

<p><img src="/images/2014-11-19-how-to-write-great-outage-post-mortems/history.png" alt="history" /></p>

<a name="Don.t.Bury.It"></a>
<h2>Don't Bury It</h2>

<p>A few final words. Despite how painful an outage may have been, the worst thing you can do is to bury it and never properly close the incident in a clear and transparent way. Most humans come together in times of crisis and communication around outage post-mortems, in my experience, has always been met with positive energy, understanding comments, constructive suggestions and numerous offers to help.</p>
]]></content>
  </entry>
  
</feed>
