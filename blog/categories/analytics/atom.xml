<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: analytics | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/analytics/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mashing Data, Making Maps]]></title>
    <link href="http://artsy.github.io/blog/2017/01/25/mashing-maps/"/>
    <updated>2017-01-25T14:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2017/01/25/mashing-maps</id>
    <content type="html"><![CDATA[<p>We have a lot of really awesome data. Things worth exploring, and visualizing. We have an entire team devoted to it, <a href="https://www.artsy.net/article/artsy-jobs-data-analyst">looks like they're hiring too</a>. Not all of the output of the data comes from that team though, 2 years ago our Director of Product Engineering, <a href="https://github.com/craigspaeth">Craig Spaeth</a> created a <a href="https://github.com/artsy/partner-map">static-site generator</a> that mapped our partners around the globe. Last week I've been improving it.</p>

<p><img src="/images/mappings/preview.gif" alt="An animated map of galleries" /></p>

<p>Projects like these happen in most companies, quick hacks for one offs that are opened 2 years later by someone completely different to build on top of it. In trying to follow <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">the Boy Scout rule</a>, I've cleaned it up and consolidated some other similar projects. This post is a rough road-map of what making <a href="https://github.com/artsy/partner-map/pull/3">this PR</a> looked like.</p>

<!-- more -->


<p>The aim was to visualise data we had created on when galleries were founded. Then to be able to see how that corresponds with our artwork inquiry data.</p>

<a name="Coming.back.to.an.npm.app.2.years.later"></a>
<h2>Coming back to an npm app 2 years later</h2>

<p>Straight off the bat, nothing worked :D</p>

<p>This isn't too surprising, I'm pretty sure we'd have the same problem with an iOS project too. This was mainly due to dependencies switching between major versions due to zero locking on any of the versions.</p>

<pre><code class="json">{
  ...
  "dependencies": {
    "async": "*",
    "browserify": "*",
    "coffee-script": "*",
    "coffeeify": "*",
    "d3": "*",
    "datamaps": "git://github.com/markmarkoh/datamaps.git",
    "mongojs": "*",
    "topojson": "*",
    "watchify": "*"
  }
}
</code></pre>

<p><a href="/blog/2016/11/14/JS-Glossary/#yarn">Switching to Yarn</a> fixed this by introducing a lock file, this means that the next time someone else comes along they'll get the exact same setup that I've been working against.</p>

<a name="CoffeeScript"></a>
<h2>CoffeeScript</h2>

<p>I have zero experience with <a href="http://coffeescript.org">CoffeeScript</a>. My high-level JavaScript experience only comes from the last 6 months, and it's a different world at the minute. Two years ago CoffeeScript was in it's prime, as the first of the JavaScript transpilers - if this is new to you, I'd strongly recommend watching this talk:</p>

<iframe width="640" height="360" src="https://www.youtube.com/embed/DspYurD75Ns" frameborder="0" allowfullscreen></iframe>


<p>&nbsp;</p>

<p>We have a lot of CoffeeScript in production, here's a few key parts of Artsy's infrastructure:</p>

<ul>
<li><a href="https://github.com/artsy/force">artsy/force</a> - our website</li>
<li><a href="https://github.com/artsy/microgravity">artsy/microgravity</a> - our mobile website</li>
<li><a href="https://github.com/artsy/positron">artsy/positron</a> - our editorial staff's CMS</li>
</ul>


<p><a href="https://github.com/artsy?language=coffeescript">..and there's more</a>. Thus having an understanding of it is pretty essential to writing code across all of Artsy's businesses. The TLDR for CoffeeScript is that it applies a lot of the elegance in Ruby to JavaScript. You should feel comfortable with JavaScript before using it, as it requires understanding what the language facade is doing.</p>

<p>A lot of the best ideas from CoffeeScript have been migrated into <a href="/blog/2016/11/14/JS-Glossary/#es6">modern JavaScript</a>. My favourite is ease in how functions can be created:</p>

<pre><code class="coffee">random = (min, max) -&gt; Math.round(Math.random() * (max - min) + min)
</code></pre>

<p>It also supports my favourite part of <a href="http://danger.systems/guides/a_quick_ruby_overview.html#variables-and-keyword-syntax">Ruby's handling of code-flow</a> using single-line reverse ifs:</p>

<pre><code class="coffee">pgClient.connect (err) -&gt; 
  console.error(err) if err
</code></pre>

<p>Which gets to the crux of CoffeeScript's ideology, I would often start with writing it in JavaScript in my head, then slowly remove syntax. When I got stuck I visited <a href="http://js2.coffee">js.coffee</a> to see how something I know what I want to write would look.</p>

<a name="Databases"></a>
<h2>Databases</h2>

<p>You want to convert all data your companies data into something useful? You better get that data available locally or you're going to spend a long time iterating. As a side-effect of Artsy converting <a href="/blog/2014/05/12/continuous-integration-for-service-oriented-architectures/">to microservices</a> I needed three separate databases to connect all the data I needed. It covers over two types of databases: MongoDB and Postgres.</p>

<a name="MongoDB"></a>
<h3>MongoDB</h3>

<p>MongoDB is a NoSQL document store database, this means it has no formal data-structure. It feels very JavaScript-y because of this. I host it <a href="http://gcollazo.github.io/mongodbapp/">inside an app</a>, and I <a href="https://robomongo.org">use RoboMongo</a> to inspect it.</p>

<p></div></div><a href='/images/mappings/robomongo.png'><img src="/images/mappings/robomongo.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>This works out nicely, I needed to make a local copy of the databases, so I used the answers from this <a href="http://stackoverflow.com/questions/23652402/how-to-copy-a-collection-from-one-mongodb-to-another">stack overflow</a></p>

<pre><code class="sh"># You'll need to figure out how to connect to your database
mongoexport -d gravity_staging -c artworks -o artworks_collection.json

# Then into merge it into your development machine
mongoimport -d gravity_development -c artworks --file artworks_collection.json
</code></pre>

<p>Doing this for the specific collections you're interested in will help get you set up.</p>

<a name="Postgres"></a>
<h3>Postgres</h3>

<p>Other databases I needed access to were Postgres databases, I don't know much about databases but Postgres seems to be <a href="https://blog.heroku.com/postgres-essentials">Heroku's favourite database</a> so I'll take that endorsement as gold. It's an SQL database, which you can do <a href="https://github.com/calebmer/postgraphql">amazing things with</a>. I host it <a href="http://postgresapp.com">inside an app</a> and use <a href="https://eggerapps.at/postico/">Postico</a> to inspect it.</p>

<p></div></div><a href='/images/mappings/postico.png'><img src="/images/mappings/postico.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>I grabbed a <a href="https://devcenter.heroku.com/articles/heroku-postgres-backups">backup</a> of our databases, they come down as a <a href="https://www.commandprompt.com/blog/a_better_backup_with_postgresql_using_pg_dump/">pg_dump file</a> file which you can replicate locally in your postgres using a command like:</p>

<pre><code class="sh">pg_restore --verbose --clean --no-acl --no-owner -h localhost -U [your_name] -d [db_name] [filepath]
</code></pre>

<a name="Database.as.CSV"></a>
<h3>Database as CSV</h3>

<p>This almost gave me all the data necessary to start work. The other part is a good chunk of new data we wanted mapping was not in a database, it was in a collection of spreadsheet files and occasionally hosted on google docs. Meaning it's time to reach for a good parser. Whenever this happens I reach for Ruby, which ships with a great CSV parser/writer. I also open the CSV inside <a href="http://www.apple.com/numbers/">Numbers</a> from Apple, which does a great job of providing visibility ( and letting you make quick changes.)</p>

<p>I have a bunch of scripts like this, one which generate more CSV files - I'm keeping the filenames intact to give you a real sense of how much of a quick hack these are:</p>

<pre><code class="ruby"># Create a new CSV file
CSV.open("/Users/orta/Downloads/end-result.csv", "wb") do |csv|
  # Loop through both derived tables
  tables = ["Partners-Table 1.csv", "Non-Partners-Table 1.csv"]
  tables.each do |t| 
    CSV.foreach("/Users/orta/Documents/Gallery\ Date\ Research/" + t) do |row|
      next unless row[0] # bad data
      next unless row[1] # no dates

      # don't trust the CSV
      query = Regexp.new(row[0], Regexp::IGNORECASE)
      partner = Partner.where(given_name: query).first
      partner ||= Partner.where(display_name: query).first

      start_date = row[1]

      # did we find a partner &amp; a location?
      if partner and partner.location_coordinates and partner.location_coordinates.first
        loc = partner.location_coordinates.first
        csv &lt;&lt; [partner.name, start_date, loc[:lat], loc[:lon]]
      else
        csv &lt;&lt; [row[0], start_date, nil, nil]
        # look up org in burden inside postgres
        # go from org -&gt; lat, long via location's organization_id
      end
    end
  end
end
</code></pre>

<p>Once this was ready I created a new script to pull things from another databasea, in theory this code could have gone inside the previous script, but it felt like a good time to get up and make a tea during a pairing session.</p>

<pre><code class="ruby">require 'CSV'
conn = PG.connect(host: "localhost", dbname: 'burden')

# Write to another end-results
CSV.open("/Users/orta/Downloads/end-result-2.csv", "wb") do |csv|
  CSV.foreach("/Users/orta/Downloads/end-result.csv") do |row|
    # gravity lookups passed, don't need to do anything
    if row &amp;&amp; row[2]
      # put in the normal row
      csv &lt;&lt; row
      next
    end

    # Galleries  have ' in their names, breaking SQL
    name = row[0].gsub(/'/, "\\'")
    result = conn.exec( "SELECT latitude, longitude FROM locations WHERE organization_id in (SELECT id FROM organizations WHERE name = '#{name}') " )

    # If we've found something, set it
    if result.cmd_tuples &gt; 0 and result[0]
      row[2] = result[0]["latitude"]
      row[3] = result[0]["longitude"]
    end
    result.clear

    csv &lt;&lt; row
  end
end
</code></pre>

<p>Then finally with a fully fleshed out CSV, I could convert that into something that's useful for this project, JSON:</p>

<pre><code class="ruby">require 'CSV'
require 'JSON'

data = []
CSV.foreach("/Users/orta/Downloads/end-result-2.csv") do |row|
  created_at = row[1]
  if row[1] &amp;&amp; created_at.strip.length &gt; 0 &amp;&amp; row[2] and row[3]
    data &lt;&lt; { name: row[0], radius: 4, created_at: created_at.to_i, latitude: row[2].to_f, longitude: row[3].to_f }
  end
end

File.open("/Users/orta/dev/js/sites/partner-map/data/jsons/galleries-subset.json","w") { |f| f.write( data.sort_by { |h| h[:created_at] }.to_json) }
</code></pre>

<p>And that gives me the raw data that I can now use with our mapping system.</p>

<a name="D3...Datamaps"></a>
<h2>D3 + Datamaps</h2>

<p>There are concepts that you can just pick up, because they are simple evolutions of something you know. <a href="https://d3js.org">D3 is not one of these</a>. D3 is a system for making data-based graphical documents. Learning how to do D3 properly takes time and a perspective change. Luckily we had a Lunch &amp; Learn <a href="https://twitter.com/orta/status/809451441882628096">2 weeks ago on D3</a> and now I am a total domain expert.</p>

<p>I jest. However, the talk was definitely enough to do the majority of what I wanted to do. Which was take some static data, and animate it over time. In these cases I get out the trusty <code>setTimeout</code> API call in JavaScript which gets the ball rolling.</p>

<p>I had a few thousand datapoints with a <code>date_created</code> attribute, so it was pretty simple to pull that out and  group them according to a time interval. I wanted the freedom to decide how long each animation should last, there probably is a D3 API for this kind of thing but I never spent the time researching. Maybe the next developer can do that.</p>

<p>We use the <em>amazing</em> library <a href="http://datamaps.github.io">Datamaps</a> to show the globe and handle a lot of the lat/long -> pixel mathematics. It is built in a D3 mindset, so with each interval of the animation, I added all of the locations or arcs to it and D3/Datamaps will derive the difference between what it has and what is new and animate those. This makes thinking about the animation simple.</p>

<a name="Too.much.data"></a>
<h2>Too much data</h2>

<p>One problem I kept hitting against was that we were working with a dataset that couldn't fit into memory. Initially a direct port of our algorithm to get all of Artsy's partners and locations would crash node due to memory pressure. Originally we were working with a much smaller data-set, now it's multiple orders of magnitude bigger. These were pretty easy to fix with a bit of understanding about all the asynchronous callbacks and by finding the <code>async.eachOfLimit</code> <a href="http://caolan.github.io/async/docs.html#eachOfLimit">function</a>.</p>

<p>Another issue with the amount of data came through trying to visualise them. It would bring down my computer, in the end after trying a few ideas (looking for averages, grouping similar data-points) I found the simplest option to be the one worth shipping. <code>rand(x, y)</code>.</p>

<pre><code class="coffee">#
# Take a set of arcs, and pick a random 1 in x
# yarn run coffee -- data/inquiries/inquiry-random-subsets.coffee
#

fs = require 'fs'

# Random number between min, max
random = (min, max) -&gt; Math.round(Math.random() * (max - min) + min)

# Take an array or arcs, and reduce it to one in amount, then save to path
derive = (amount, arcs, path) -&gt;
  luckyOnes = arcs.filter (arc) -&gt; random(0, amount) == 23
  console.log "There are #{luckyOnes.length} arcs from #{arcs.length} in #{path}"
  fs.writeFileSync __dirname + '/' + path, JSON.stringify luckyOnes

all_arcs = require '../jsons/every-inquiry-arcs.json'
derive(1500, all_arcs, "../jsons/all-inquiries-random-subset.json")
</code></pre>

<p>This ended up creating a pretty useful representation of the whole data-set, in a way that is actually renderable without killing the browser's process.</p>

<a name="Code.Cleanup...Docs"></a>
<h2>Code Cleanup + Docs</h2>

<p>I spent most of my time inside <a href="https://github.com/artsy/partner-map">artsy/partner-map</a> but we had another repo with very similar code, <a href="https://github.com/artsy/inquiry-map">partner/inquiry-map</a>. So I took the time to merge the two of them, officially deprecating inquiry-map. Now those maps can be generated by partner-map, and there's space for more expansion.</p>

<p>Other than that, I took the time to improve the repo and to do this write-up, so that the next person who comes along can have an idea of some of the scripts and how they all fit together.</p>

<a name="Going.solo"></a>
<h2>Going solo</h2>

<p>For a project like this, I did no code review, no testing or other staples of engineering culture at Artsy. This is fine for a project of this scope and pace.</p>

<p>However, I think it's always worth throwing in an extra 2-3 hours at the end of a hack project to write up some of the tricky parts and cleaning up the codebase for the next person. If you don't write some tests, then writing some docs or do a <a href="http://artsy.github.io/blog/2015/11/05/Emergence-Code-Review/">quick video</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aspect-Oriented Programming and ARAnalytics]]></title>
    <link href="http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics/"/>
    <updated>2014-08-04T14:52:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/08/04/aspect-oriented-programming-and-aranalytics</id>
    <content type="html"><![CDATA[<p>Analytics are common in iOS applications. They help inform our decisions
about products. Since analytics are so common, Artsy developed a library called
<a href="https://github.com/orta/ARAnalytics">ARAnalytics</a>. This library provides a
single interface to many different backend analytics providers, freeing
developers from having to write code for each of the providers that they're
using.</p>

<p>Let's consider a typical view controller on iOS. View controllers on iOS
represent the glue code between models and views. When a model changes, the view
controller updates the appearance of the UI. Similarly, when the UI is
interacted with by the user, the view controller updates the model. This is the
core of any standard iOS application.</p>

<p>So let's say that a button is pressed. We'll handle that interaction in a
method called <code>buttonWasPressed:</code>. We'll want to update our model, but also to
track the analytics event.</p>

<pre><code class="objc">- (void)buttonWasPressed:(id)sender
{
    self.model.hearted = YES;

    [ARAnalytics event:@"hearted"];
}
</code></pre>

<p>Simple enough, but consider that the analytics tracking code doesn't fall within
our definition of a view controller – the button handler just happens to be a
convenient place to put the tracking code. Also consider that <em>every single</em>
button handler is going to have to have similar code implemented.</p>

<a name="There.has.to.be.a.better.way."></a>
<h2>There has to be a better way.</h2>

<!-- more -->


<p><a href="http://twitter.com/steipete">Pete Steinberger</a> and <a href="http://twitter.com/orta">Orta Therox</a>
were talking and the topic of <a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming">Aspect-Oriented Programming</a>,
specifically in the context of analytics. AOP takes a look at the different
<em>conerns</em> of an application – logical, cohesive units of functionality. While
most programming paradigms, including those used with Objective-C, group and
encapsulate these concerns, there are some concerns that are "cross-cutting"
because they are involved through several other concerns.</p>

<p>Analytics is such a cross-cutting concern. That makes it a prime target for
being abstracted away using AOP. Using <a href="http://albertodebortoli.github.io/blog/2014/03/25/an-aspect-oriented-approach-programming-to-ios-analytics/">another blog post</a>  as an example, we set about <a href="https://github.com/orta/ARAnalytics/pull/74">integrating an AOP-like DSL within ARAnalytics</a>
that would allow you to define all of your analytics in one spot.</p>

<p>The interface would be simple. When providing your API keys to the various
backend services you'd like to use with ARAnalytics, you'd also provide a
dictionary specifying the classes you'd like us to "hook into". Whenever a
selector from an instance of the given class was invoked, we'd execute the
analytics event specified in the dictionary.</p>

<p>Since Objective-C has a dynamic runtime, we could have swizzled the instance
methods on the classes you specified in the dictionary. This gets a little
tricky and represents a lot of work for us. We could directly swizzle the
instance methods on the classes in question, but wrapping parameters of variable
types and in various numbers becomes a chore. If we didn't get it done
perfectly, we'd risk introducing bugs into the entire application.</p>

<p>I wrote a proof-of-concept of analytics using AOP with <a href="http://reactivecocoa.io">ReactiveCocoa</a>.
It worked, but was a little hacky since it involved the swizzling of <code>alloc</code>.
ReactiveCocoa is also a large framework to be included just for the sake of
analytics. Additionally, its interface exposed ReactiveCocoa's <code>RACTuple</code> class,
which smells like a leaky abstraction.</p>

<a name="What.could.we.do."></a>
<h2>What could we do?</h2>

<p>Well, about the same time, Pete Steinberger open sourced a new framework just
for AOP called <a href="https://github.com/steipete/Aspects">Aspects</a>. Pete did all the
difficult work of swizzling methods with variable parameter lists, including
wrapping primitive parameters in values.</p>

<p>Pete and I worked together to get Aspects working with ARAnalytics, removing our
dependency on ReactiveCocoa.</p>

<a name="How.to.Use.it"></a>
<h2>How to Use it</h2>

<p>Using ARAnalytics with the new DSL is super-easy. Just add either <code>ARAnalytics</code>
or <code>ARAnalytics/DSL</code> to your podfile, specifying a version of at least 2.6. Run
<code>pod install</code> and you're ready to get started.</p>

<p>Since all of your analytics are going to be specified in one spot, and that spot
is going to get rather large, I'd recommend creating an Objective-C category on
your app delegate to set up all of your analytics. Then you can call this
<code>setupAnalytics</code> method when your app launches.</p>

<pre><code class="objc">
#import "ARAppDelegate.h"

@interface ARAppDelegate (Analytics)

- (void)setupAnalytics;

@end
</code></pre>

<pre><code class="objc">

#import &lt;ARAnalytics/DSL.h&gt;

@implementation ARAppDelegate (Analytics)

- (void)setupAnalytics
{
    [ARAnalytics setupWithAnalytics:@{
        /* keys */
    } configuration:
    @{
        ARAnalyticsTrackedEvents: @[
            @{
                ARAnalyticsClass: MyViewController.class,
                ARAnalyticsDetails: @[
                    @{
                        ARAnalyticsEventName: @"hearted",
                        ARAnalyticsSelectorName: NSStringFromSelector(@selector(buttonWasPressed:)),
                    }
                ]
            }
        ]
    }];
}

@end
</code></pre>

<p>Now our <code>buttonWasPressed:</code> method is <em>very</em> straightforward:</p>

<pre><code class="objc">- (void)buttonWasPressed:(id)sender
{
    self.model.hearted = YES;
}
</code></pre>

<p>The view controller is now <em>only</em> responsible for what it should be responsible
for: mediating interactions between the view and the model. Awesome! Even
cooler, we can provide fine-grain control over which analytics events are
invoked and with what properties they are sent with. Let's take a look.</p>

<pre><code class="objc">[ARAnalytics setupWithAnalytics:@{
    /* keys */
} configuration:
@{
    ARAnalyticsTrackedEvents: @[
        @{
            ARAnalyticsClass: MyViewController.class,
            ARAnalyticsDetails: @[
                @{
                    ARAnalyticsEventName: @"hearted",
                    ARAnalyticsSelectorName: NSStringFromSelector(@selector(buttonWasPressed:)),
                    ARAnalyticsEventProperties: ^NSDictionary *(MyViewController *controller, NSArray *parameters) {
                        UIButton *button = parameters.firstObject;
                        NSString *buttonTitle = [button titleForState:UIControlStateNormal];
                        return @{
                            @"view_title" : controller.title ?: @"",
                            @"button_title" : buttonTitle ?: @"",
                        };
                    },
                    ARAnalyticsShouldFire: ^BOOL(MyViewController *controller, NSArray *parameters) {
                        return /* selective disable firing of analytics */;
                    }
                }
            ]
        }
    ]
}];

@end
</code></pre>

<p>So you see that even though you're defining your analytics once, at application
startup, you're still able to provide dynamic, per-instance behaviour and event
properties.</p>

<p>Finally, we've also written support for page views. In a few lines, you can
have every view controller track its page view with ARAnalytics.</p>

<pre><code class="objc">[ARAnalytics setupWithAnalytics:@{
    /* keys */
} configuration:
@{
    ARAnalyticsTrackedScreens: @[
        @{
            ARAnalyticsClass: UIViewController.class,
            ARAnalyticsDetails: @[ // default selector on iOS is viewDidAppear:
                @{
                    ARAnalyticsPageNameKeyPath: @"title"
                }
            ]
        }
    ]
}];

@end
</code></pre>

<p>This code will track a page view with the title the same as the view
controller's <code>title</code> property, but just like with events you can provide
fine-grained handling.</p>

<a name="Some.Limitations"></a>
<h2>Some Limitations</h2>

<p>There is a <a href="https://github.com/steipete/Aspects/issues/11">limitation</a> on
Aspects that wasn't fully understood until we used the new AOP approach to
analytics in the Artsy app. Selectors can only be "hooked into" once per class
hierarchy. That  means that you cannot create a tracked events for two
difference view controllers, both on the <code>viewWillAppear:</code> selector. This is a
temporary limitation while the Aspects library is being worked on. In the mean
time, you are free to use the <a href="https://github.com/orta/ARAnalytics/tree/ashfurrow-temporary-dsl-fix">original implementation</a>
with ReactiveCocoa, which doesn't have this limitation and which we are using
currently.</p>

<a name="What.we.Learnt"></a>
<h2>What we Learnt</h2>

<p>AOP is a really cool paradigm that can reduce tight coupling in your code and
increase your overall level of cohesion. Its applications extend beyond just
analytics – any time you have a behaviour that's being exhibited in several
abstractions in your code, you should consider if using AOP to replace that
behaviour might make for cleaner code and more cohesive abstractions.</p>

<p>Finally, I got to make my first significant contribution to open source at
Artsy. It was awesome to be able to collaborate with Pete and Orta on this
project, as well as receive feedback from developers who are already using
ARAnalytics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARAnalytics - Analytics for iOS Apps]]></title>
    <link href="http://artsy.github.io/blog/2013/04/10/aranalytics/"/>
    <updated>2013-04-10T17:23:00+00:00</updated>
    <id>http://artsy.github.io/blog/2013/04/10/aranalytics</id>
    <content type="html"><![CDATA[<p>In both my <a href="http://orta.github.com">personal apps</a> and Artsy Folio, I'm always after a deeper understanding of how people use the app. There's three ways to do this: ask users, watch users and track usage. I'd like to talk about the third of these.</p>

<p>We've experimented with quite a lot of analytics tools for the Artsy website, and it seemed fitting to do the same for our mobile app. We wanted the freedom to change the analytics tool without having to change the code, and so <a href="http://github.com/orta/ARAnalytics">ARAnalytics</a> was born.</p>

<!-- more -->


<p>ARAnalytics is the adaption of <a href="https://github.com/jkrall/analytical">Analytical</a> and  <a href="http://segmentio.github.com/analytics.js/">Analytics.js</a> to iOS. By using <a href="http://cocoapods.org">Cocoapods</a> it became possible to set up the entire analytics stack with only a few lines of code in your <code>Podfile</code>.</p>

<pre><code class="ruby">  pod "ARAnalytics/Crashlytics"
  pod "ARAnalytics/Mixpanel"
</code></pre>

<p>The list of supported libraries is pretty vast ( <em>TestFlight, Mixpanel, Localytics, Flurry, Google Analytics, KISSMetrics, Countly, Crittercism, Bugsnag and Crashlytics</em> ) and the API for <code>ARAnalytics</code> tries to bridge any gaps it can find in the implementations.</p>

<p><code>ARAnalytics</code> simplifies the API to two main parts of tracking; user details and events. User details are things like your internal ID for a user, and custom properties like your app's preferences, whilst events are temporal actions that are triggered based off user actions.</p>

<p>There is another tool worth mentioning and that is <a href="http://cocoadocs.org/dosets/Analytics/0.0.5/">Analytics</a> which is a new port of Analytics.js which does a similar <em>simple API to different analytics providers</em> but works by offloading the work to the server. I think there are advantages and disadvantages to both of these approaches, but I think one or the other should cover nearly all use cases!</p>

<p>ARAnalytics is available on Github at <a href="http://github.com/orta/ARAnalytics">orta/ARAnalytics</a> and documented on <a href="http://cocoadocs.org/docsets/ARAnalytics/1.2/">Cocoadocs</a> (which Artsy proudly sponsors!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Small with Big Data and Google Analytics]]></title>
    <link href="http://artsy.github.io/blog/2012/05/01/how-to-start-small-with-big-data-and-google-analytics/"/>
    <updated>2012-05-01T20:52:00+00:00</updated>
    <id>http://artsy.github.io/blog/2012/05/01/how-to-start-small-with-big-data-and-google-analytics</id>
    <content type="html"><![CDATA[<p>Why do so many companies write a homegrown pageviews tracking system? Between Google Analytics, Kissmetrics and many others, isn't that a completely solved problem?</p>

<p>These popular solutions lack domain knowledge. They are easily capable of segmenting users by region or browser, but they fail to recognize rules core to your business. Tracking pageviews with a homegrown system becomes your next sprint's goal.</p>

<p>Implementing a hit counter service is quite tricky. This is a write-heavy, asynchronous problem that must minimize impact on page rendering time, while dealing with rapidly growing amounts of data. Is there a middle ground between using Google Analytics and rolling out our own homegrown implementation? How can we use Google Analytics for data collection and inject domain knowledge into gathered data, incrementally, without writing our own service?</p>

<!--more-->


<p>Let's write a Rake task that pulls data from Google Analytics. We can run it daily. Start with a Ruby gem called <a href="https://github.com/vigetlabs/garb">Garb</a>.</p>

<pre><code class="ruby">gem "garb", "0.9.1"
</code></pre>

<p>Garb requires Google Analytics credentials. Those can go into a YAML configuration file, which will use environment settings in production (it's an ERB template, too). We can hardcode the test account values.</p>

<pre><code class="yaml config/google_analytics.yml">defaults: &amp;defaults

development, test:
  &lt;&lt;: *defaults
  email: "ga@example.com"
  password: "password"
  ua: "UA-12345678-1"

production:
  &lt;&lt;: *defaults
  email: &lt;%= ENV['GOOGLE_ANALYTICS_EMAIL'] %&gt;
  password: &lt;%= ENV['GOOGLE_ANALYTICS_PASSWORD'] %&gt;
  ua: &lt;%= ENV['GOOGLE_ANALYICS_UA'] %&gt;
</code></pre>

<p>Establish a Google Analytics session and fetch the profile corresponding to the Google user account with Garb.</p>

<pre><code class="ruby">config = YAML.load(ERB.new(File.new(Rails.root.join("config/google_analytics.yml")).read).result)[Rails.env].symbolize_keys
Garb::Session.login(config[:email], config[:password])
profile = Garb::Management::Profile.all.detect { |p| p.web_property_id == config[:ua] }
raise "missing profile #{config[:ua]} in #{Garb::Management::Profile.all.map(&amp;:web_property_id)}" unless profile
</code></pre>

<p>Garbs needs a data model to collect pageviews. It extends <code>Garb::Model</code> and defines a set of "metrics" and "dimensions".</p>

<pre><code class="ruby app/models/google_analytics_pageviews.rb">class GoogleAnalyticsPageviews
  extend Garb::Model
  metrics :pageviews
  dimensions :page_path
end
</code></pre>

<p>You can play with the <a href="http://ga-dev-tools.appspot.com/explorer/">Google Analytics Query Explorer</a> to see the many possible metrics (such as pageviews) and dimensions (such as requested page path).</p>

<p>By default, Google Analytics lets clients retrieve 1000 records in a single request. To get all records we can add an iterator, called <code>all</code>, that will keep making requests until the server runs out of data. The code for <em>config/initializers/garb_model.rb</em> is <a href="https://gist.github.com/2265877">in this gist</a> and I made a <a href="https://github.com/vigetlabs/garb/pull/116">pull request</a> into Garb if you'd rather merge that onto your fork.</p>

<p>The majority of our pages are in the form of "/model/id", for example "/artwork/leonardo-mona-lisa". We're interested in all pageviews for a given artwork and in pageviews for a given artist, at a given date. We'll store selected Google Analytics data in a <code>GoogleAnalyticsPageviewsRecord</code> model described further.</p>

<pre><code class="ruby">t = Date.today - 1
GoogleAnalyticsPageviews.all(profile, { :start_date =&gt; t, :end_date =&gt; t }) do |row|
  model = /^\/#\!\/(?&lt;type&gt;[a-z-]+)\/(?&lt;id&gt;[a-z-]+)$/.match(row.page_path)
  next unless (model[:type] == "artwork" || model[:type] == "artist")
  GoogleAnalyticsPageviewsRecord.create!({
    :model_type =&gt; model[:type],
    :model_id =&gt; model[:id],
    :pageviews =&gt; row.pageviews,
    :dt =&gt; t.strftime("%Y-%m-%d")
  })
end
</code></pre>

<p>Each <code>GoogleAnalyticsPageviewsRecord</code> contains the total pageviews for a given model ID at a given date. We now have a record for each artwork and artist. We can rollup existing data into a set of collections, incrementally. For example, <code>google_analytics_artworks_monthly</code> will contain the monthly hits for each artwork.</p>

<pre><code class="ruby">class GoogleAnalyticsPageviewsRecord
  include Mongoid::Document

  field :model_type, type: String
  field :model_id, type: String
  field :pageviews, type: Integer
  field :dt, type: Date

  index [
    [:model_type, Mongo::ASCENDING],
    [:model_id, Mongo::ASCENDING],
    [:dt, Mongo::DESCENDING]
  ], :unique =&gt; true

  after_create :rollup

  def rollup
    Mongoid.master.collection("google_analytics_#{self.model_type}s_total").update(
      { :model_id =&gt; self.model_id },
      { "$inc" =&gt; { "count" =&gt; self.pageviews }}, { :upsert =&gt; true })
    {
      :daily =&gt; self.dt.strftime("%Y-%m-%d"),
      :weekly =&gt; self.dt.beginning_of_week.strftime("%Y-%W"),
      :monthly =&gt; self.dt.beginning_of_month.strftime("%Y-%m"),
      :yearly =&gt; self.dt.beginning_of_year.strftime("%Y")
    }.each_pair do |t, dt|
      Mongoid.master.collection("google_analytics_#{self.model_type}s_#{t}").update(
        { :model_id =&gt; self.model_id, :dt =&gt; dt },
        { "$inc" =&gt; { "count" =&gt; self.pageviews }}, { :upsert =&gt; true })
    end
  end

end
</code></pre>

<p>The rollup lets us query these tables directly. For example, the following query returns a record with the pageviews for the Leonardo's "Mona Lisa" in January 2012.</p>

<pre><code class="ruby">Mongoid.master.collection("google_analytics_artworks_monthly").find_one({
  :model_type =&gt; "artwork", :model_id =&gt; "leonardo-mona-lisa", :dt =&gt; "2012/01"
})
</code></pre>

<p>One of the obvious advantages of pulling Google Analytics data is the low volume of requests and offline processing. We're letting Google Analytics do the hard work of collecting data for us in real time and are consuming its API without the performance or time pressures.</p>
]]></content>
  </entry>
  
</feed>
