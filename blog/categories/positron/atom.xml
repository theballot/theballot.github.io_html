<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: positron | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/positron/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating Redux and Socket.io]]></title>
    <link href="http://artsy.github.io/blog/2018/03/15/integrating-redux-and-socketio/"/>
    <updated>2018-03-15T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/03/15/integrating-redux-and-socketio</id>
    <content type="html"><![CDATA[<p>On the engineering team at Artsy, we've built a CMS for both internal and external editors to write and publish <a href="https://www.artsy.net/article/artsy-editorial-brooklyn-born-sisters-diego-rivera-dubbed-the-greatest-living-women-mural-painters">articles</a>. We have a team of a dozen in-house editors creating new content on a daily basis. As many people starting using the app simultaneously, something became apparent. Editors would unintentionally go and override each otherâ€™s work because there was no way to tell if someone else was currently editing an article. As a workaround, team members would be forced to edit drafts in another editor such as google docs and copy their work over once ready. This made for a lackluster collaborative experience.</p>

<p>So we decided to implement a system that would make our editors more confident in our CMS by ensuring only one editor could go in and edit an article at any given time. I was tasked with coming up with an elegant technical solution for this feature. Here's the approach I took....</p>

<!-- more -->


<p>We decided to resolve this issue building an article locking mechanism. When an editor would start editing an article, all other users in sessions would be notified. One of the requirements for this new feature was for things needed to update without refreshing the page. In order to fulfill this, we needed to implement a system to push events from the server to clients.</p>

<p>Based on the requirements presented, I looked at potential solutions for this. Right away, the HTML5 WebSocket API seemed like the perfect solution to keep all clients synced in realtime, however a few issues arose. For one, many proxies and firewalls block WebSocket connections, so it's not always an available option for clients. I needed to find another option to mitigate that problem. That's where <a href="https://socket.io">socket.io</a> comes in.</p>

<p>Socket.io, a battle tested library for creating real-time bidirectional communication channels, helps mitigate those problems. In a gist socket.io initially establishes a long-polling HTTP connection, and in parallel tries to upgrade it to WebSocket.</p>

<p>By the time this project was proposed, we had already started the process of converting the app from using Coffeescript, Backbone + Jade to a modern javascript stack based on ES6, React for UI components and Redux for managing app state. Naturally, one of the goals was to leverage Redux to manage state for this feature. You've probably at least heard of Redux as it has emerged as the industry standard way of implementing one-way data flows in apps. If you're not familiar with Redux and its architecture, here's an excellent <a href="https://www.smashingmagazine.com/2016/06/an-introduction-to-redux/">intro to redux</a> article to familiarize yourself.</p>

<p> So how do we go about integrating socket.io in the Redux-based state architecture we just designed. I thought the best would be to change as little as possible to the code structures developers familiar with Redux are already used to. Namely, use standard Redux actions creators and simply use a decorator to enhance them.</p>

<p><img src="/images/2018-03-15-integrating-redux-and-socketio/example.gif" alt="/images/2018-03-15-integrating-redux-and-socketio/example.gif" /></p>

<p>Here's a simplified version of the <a href="https://leanpub.com/javascriptallongesix/read#decorators">function decorator</a> which broadcasts redux actions via a socket connection to other connected clients.</p>

<pre><code class="javascript">// From client
import io from 'socket.io-client'
import { messageTypes } from './messageTypes'

let socket = io(rootURL)

// Helper to emit a redux action to our websocket server
const emitAction = (actionCreator) =&gt; {
  return (...args) =&gt; {
    // This return the action object which gets sent to our backend
    // server via the socket connection
    const result = actionCreator.apply(this, args)
    socket.emit(result.key, {
      ...result.payload,
      type: result.type
    })
    return result
  }
}
</code></pre>

<p>To recap the code above, <code>emitAction</code> is a <a href="https://leanpub.com/javascriptallongesix/read#decorators">function decorator</a> that enhances action creators to dispatch actions via the local store and also broadcast that same action to other connected clients. The following code snippet shows how it's being used to wrap a typical redux action creator.</p>

<pre><code class="javascript">// actions.js
import keyMirror from 'client/lib/keyMirror'
import { emitAction } from 'client/apps/websocket/client'
import { messageTypes } from 'client/apps/websocket/messageTypes'

export const actions = keyMirror(
  ...
  'START_EDITING_ARTICLE',
  'STOP_EDITING_ARTICLE',
  ...
)

export const startEditingArticle = emitAction((data) =&gt; {
  return {
    type: actions.START_EDITING_ARTICLE,
    key: messageTypes.userStartedEditing,
    payload: {
      timestamp: new Date().toISOString(),
      ...data
    }
  }
})

...
</code></pre>

<p>On the receiving end, we simply add a reducer to process the event from the action payload which we can then return a new state from.</p>

<pre><code class="javascript">//reducers.js
import { data as sd } from 'sharify'
import { actions } from 'client/actions/editActions'
import u from 'updeep'

export const initialState = {
  articles: sd.ARTICLES,
  articlesInSession: sd.ARTICLES_IN_SESSION || {}
}

export function articlesReducer (state = initialState, action) {
  switch (action.type) {
    ...
    case actions.START_EDITING_ARTICLE: {
      const session = action.payload

      return u({
        articlesInSession: {
          [session.article]: session
        }
      }, state)
    }
    ...
  }
}
</code></pre>

<p>We can now use our <code>emitAction</code> decorator function to enhance any number of action creators. All that's needed is to add a <code>key</code> property to the action object. We can then decide to either process actions
 on a backend service or proxy them directly to other clients. You can find the remainder of the server implementation and our <a href="https://github.com/artsy/positron/blob/master/src/client/apps/websocket/index.js">event handlers</a> in our <a href="https://github.com/artsy/positron">github repo</a> along with instructions on how to run the code.</p>

<a name="Future.improvements"></a>
<h2>Future improvements</h2>

<p>There's an opportunity to extract this module for reuse in other projects and apps. Another logical improvement to this project would be to implement collaborative editing using this architecture. It would also be nice to include helpers for handling events on backend servers.</p>

<a name="Useful.links"></a>
<h2>Useful links</h2>

<ul>
<li><a href="https://redux.js.org/">Redux</a></li>
<li><a href="https://socket.io/docs/">Socket.io</a></li>
<li><a href="https://github.com/substantial/updeep">Updeep</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving Page Speed with GraphQL]]></title>
    <link href="http://artsy.github.io/blog/2016/11/02/improving-page-speed-with-graphql/"/>
    <updated>2016-11-02T14:21:00+00:00</updated>
    <id>http://artsy.github.io/blog/2016/11/02/improving-page-speed-with-graphql</id>
    <content type="html"><![CDATA[<p>This past year, our team started using a GraphQL orchestration layer that connects various APIs with multiple front-end apps including <a href="http://artsy.github.io/blog/2016/06/19/graphql-for-mobile">iOS</a>. It also handles caching and extracts some business logic out of our client apps. This helped us not only to be more consistent with the way we fetch data across apps, but also improved developer happiness and even bridged teams by having our web and iOS developers work with the same API layer. This got me thinking what other problems GraphQL could solve at Artsy.</p>

<p>I work on the Publishing Team at Artsy, and we've recently been focused on page speed as a KPI. With so many ways of measuring speed, it's a daunting task but for this post, I'll focus on the way we handled things on the server-side and how integrating GraphQL on our API improved page speed.</p>

<!-- more -->


<a name="Prior.to.GraphQL"></a>
<h2>Prior to GraphQL</h2>

<p>In our publishing CMS called <a href="http://github.com/artsy/positron">Positron</a>, we serve a separate API, database, and front-end from the rest of the Artsy stack. We're also responsible for the delivery and presentation of the content itself. Over the past year we've focused a lot on how the content appears, and now we've opened up time to focus on speed since in the land of content, every second counts.</p>

<p>Before we went ahead with adding a GraphQL-based endpoint to Positron, I spent about a week and refactoring our current codebase. We refactored our router code to make less fetches, made better use of caching, and moved some below-the-fold rendering into the client side. These are important steps towards a faster page, but it doesn't push our technology in a direction that lets us reimagine things.</p>

<a name="Speed.Issues"></a>
<h2>Speed Issues</h2>

<p>We split the speed problem in two: <code>Server Response Time</code> (server-side) and <code>Document Interactive Time</code> (client-side). We currently use Google Analytics to track these <a href="https://support.google.com/analytics/answer/2383341?hl=en">metrics</a>. There are some inaccuracies with GA such as small sampling, geographic noise (countries with different download speeds), and timeouts being counted as zero, but for our initial testing this will suffice for relative measuring.</p>

<a name="Enter.GraphQL.and.JoiQL"></a>
<h2>Enter GraphQL and JoiQL</h2>

<p>Our very own <a href="https://twitter.com/craigspaeth">Craig Spaeth</a> recently started working on a project called <a href="https://github.com/muraljs/mural">Mural</a>. It's a framework for React and GraphQL. One library that came out of this project is called <a href="http://github.com/muraljs/joiql">JoiQL</a>. It's a The main purpose of JoiQL is to convert <a href="http://github.com/hapijs/joi">Joi</a> schemas into GraphQL schemas.</p>

<p>We already use Joi in Positron so creating a GraphQL-based endpoint was trivial with JoiQL. Note that while JoiQL is currently used in production, it's still a beta project! Below is an example of how the JoiQL setup works.</p>

<pre><code class="javascript">const joiql = require('../')
const { object, string, number, array, date } = require('joi')
const app = require('express')()
const graphqlHTTP = require('express-graphql')

// Given a Joi schema:
const Article = object({
  title: string(),
  body: string(),
  published_at: date()
}).meta({
  args: { id: number().required() }
})

// Define api with JoiQL like this:
const api = joiql({
  query: {
    article: Article
  }
})

// Resolve the request using a Koa 2 style middleware pattern:
api.use((ctx, next) =&gt; {
  return new Promise (resolve, reject) -&gt;
    // Method that fetches an article based on the query
    findArticle(ctx.req.query.article.args), (err, results) -&gt;
      ctx.res.article = results.article
      next()
      resolve()
})

// Finally, mount our schema to express:
app.use('/graphql', graphqlHTTP({
  schema: api.schema,
  graphiql: true
}))
app.listen(3000, () =&gt; console.log('listening on 3000'))
</code></pre>

<p>You can see how simple it becomes to convert apps that already use Joi with JoiQL. Joi provides a nice API for building GraphQL schemas with minimal boilerplate and we also get a nice Koa 2 style middleware pattern that lets us hook into a downstream/upstream flow. This downstream/upstream flow could be useful later on if we were to get really granular with measuring speed. For instance, if we decide to track the speed of the whole lifecycle of a request, we could do something like this:</p>

<pre><code class="javascript">api.use((ctx, next) =&gt; {
  startTIme = Date.now()
  next()
  console.log(Date.now() - startTime)
}

api.use((ctx, next) =&gt; {
  // fetch content here
  next() #we get bumped back up after this
})
</code></pre>

<a name="Results"></a>
<h2>Results</h2>

<p>The two features of GraphQL that have been helpful for reducing page speed are:
1. Reduced payload because you only request the data you need
2. Multiple fetches can be coalesced into a single request</p>

<p>Not surprisingly, decreased payload and coalesced requests are the same two features <a href="http://twitter.com/orta">Orta</a> describes in part of his post on the killer features of <a href="http://artsy.github.io/blog/2016/06/19/graphql-for-mobile">GraphQL for Mobile</a>.</p>

<a name="Reduced.Payload"></a>
<h3>Reduced Payload</h3>

<p>Reduced payload turned out to be one of the biggest factors in reducing speed. Just after October 27 we switched over to using GraphQL on our <a href="http://m.artsy.net/articles">mobile articles landing page</a>.</p>

<p></div></div><a href='/images/2016-11-02-improving-page-speed-with-graphql/download_time.png'><img src="/images/2016-11-02-improving-page-speed-with-graphql/download_time.png"></a><div class='meta-container'><header>&nbsp;</header></div><div class='date-container'>&nbsp;</div><div class='content-container'><div class='entry-content'></p>

<p>Since we were previously getting back collection of articles with all of its content, rendering a simple page with a list of articles meant the payload size was unnecessarily huge. Now, we only request a few things like the title and image without having to do any extra work. This is especially important for mobile devices where we encounter slow network speeds!</p>

<a name="Multiple.fetches"></a>
<h3>Multiple fetches</h3>

<p>Although we haven't made use of this in production yet, I anticipate that the ability to coalesce requests will be significant. For example, to render an article page, there are up to five fetches that can be requested by our front-end app with a normal REST API. Now, we can combine the requests to a single fetch, which moves the responsibility of coalescing requests from aggregating slow HTTP requests to fanning out fast database queries. If we aggregate the request and cache the response using a client like <a href="https://github.com/kadirahq/lokka">Lokka</a>, our future looks bright.</p>

<a name="What.s.next."></a>
<h2>What's next?</h2>

<p>Besides making use of this new endpoint on all the things, I think the next big win with GraphQL is to add <a href="http://graphql.org/learn/queries/#mutations">mutations</a>. By adding support for mutations, we can modify our data with GraphQL just as simply as we can query it.</p>

<p>We currently use a combination of Backbone and React to edit articles on our front-end CMS. After we move our CMS's data platform to GraphQL, we can move away from frameworks like Backbone and towards managing state containers like Redux which are made to work with GraphQL. Features like revision history and undo events would feel natural with state containers like Redux and a joy for our editors!</p>

<p>In the context of speed, some other topics I look forward to exploring are optimizing expensive database queries and client-side asset compression.</p>
]]></content>
  </entry>
  
</feed>
