<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | Artsy Engineering]]></title>
  <link href="http://artsy.github.io/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://artsy.github.io/"/>
  <updated>2018-12-16T10:16:31+00:00</updated>
  <id>http://artsy.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How hard could it be to create an email?]]></title>
    <link href="http://artsy.github.io/blog/2018/11/19/mjml/"/>
    <updated>2018-11-19T00:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2018/11/19/mjml</id>
    <content type="html"><![CDATA[<!-- OUTLINE -->


<p>Let's talk about email HTML.</p>

<p>If you've never worked on emails before, you might think the process works something like this:</p>

<ol>
<li>Write some HTML, but maybe with a few more tables than you usually use since emails like those.</li>
<li>Render it in your browser. Nice! Looking great.</li>
<li>Send yourself a quick test. Just like in your browser! Sweet!</li>
<li>Send that PR and move on to the next thing.</li>
</ol>


<p><img src="/images/2018-11-19-mjml/example.png" alt="/images/2018-11-19-mjml/example.png" /></p>

<p>In reality, it's more like this:</p>

<ol>
<li>Write some HTML with more tables than you think could possibly be necessary. There's no way it'll break with all
these tables, right?</li>
<li>Render it in the browser. Cool, looks fine.</li>
<li>Send yourself a test, and send one to a service like <a href="https://www.litmus.com">Litmus</a> or
<a href="https://www.emailonacid.com">Email on Acid</a> that renders the email in dozens of clients</li>
<li>Looking good in Gmail...good in Apple mail...wait why is it completely broken in Outlook 2007 (and 2010, 2013,
and 2019)? And Yahoo Mail on Internet Explorer? Shoot.</li>
<li>Better add some more tables. That's usually the solution.</li>
<li>Well...that didn't work. Find a post from 2009 in a forum for Netscape enthusiasts that implies you might want
to add an extra Outlook-only table using <code>&lt;!--[if mso | IE]&gt;</code> with
<code>role="presentation" and cellpadding="0" cellspacing="0"</code>. Maybe that'll work.</li>
<li>Outlook 2007 is fixed! Nice! Oh...but now it looks broken on iPhones. Back to the drawing board.</li>
</ol>


<p><img src="/images/2018-11-19-mjml/outlook-2019-broken.png" alt="/images/2018-11-19-mjml/outlook-2019-broken.png" /></p>

<!-- more -->


<p>And after a few hours, you've probably squished most bugs on most clients and are ready to ship it, but also ready
to tear your hair out. Creating emails that render gracefully in clients that were built 15 years ago and in
clients that were built this year isn't easily done. That's where MJML comes in.</p>

<a name="What.is.MJML."></a>
<h2>What is MJML?</h2>

<p><a href="https://mjml.io">MJML</a>, short for Mailjet Markup Language, is a markup language that is written like simplified HTML/CSS
and renders email-friendly, responsive HTML. So instead of having to code a few thousand lines of complex HTML, you
code a couple hundred lines of MJML, and it outputs code that looks good on <em>every single client</em>.</p>

<pre><code class="html">&lt;mjml&gt;
  &lt;mj-head&gt;
    &lt;!-- global styles --&gt;
    &lt;mj-attributes&gt;
      &lt;mj-text
        font-family="HelveticaNeue, Helvetica, Arial, sans-serif"
        font-size="14px"
        line-height="21px"
        padding="0"
      /&gt;
      &lt;mj-section padding="0" /&gt;
    &lt;/mj-attributes&gt;
  &lt;/mj-head&gt;
  &lt;mj-body width="450px" background-color="#fff"&gt;
    &lt;mj-section padding="20px" border="1px solid #e5e5e5"  border-bottom="0"&gt;
      &lt;mj-group&gt;
        &lt;mj-column vertical-align="middle" width="19%"&gt;
          &lt;mj-image width="66px" align="left" padding="0" src="jared-french-prose.png"/&gt;
        &lt;/mj-column&gt;
        &lt;mj-column padding-left="20px" vertical-align="middle" width="81%"&gt;
          &lt;mj-text&gt;Order #B135790&lt;/mj-text&gt;
          &lt;mj-text&gt;Jared French&lt;/mj-text&gt;
          &lt;mj-text&gt;Prose, ca. 1948&lt;/mj-text&gt;
        &lt;/mj-column&gt;
      &lt;/mj-group&gt;
    &lt;/mj-section&gt;
  &lt;/mj-body&gt;
&lt;/mjml&gt;
</code></pre>

<p>Looking good in Outlook 2007:
<img src="/images/2018-11-19-mjml/outlook-2007-fixed.png" alt="/images/2018-11-19-mjml/outlook-2007-fixed.png" /></p>

<p>It feels pretty magical.</p>

<p>When the marketing team was getting ready to revamp our user-facing emails in summer 2017, we found MJML and
thought, "hey, this could make life a lot simpler in the long run." It took some time to get comfortable with it,
but maybe not as much as you'd think due to its similarities with HTML.</p>

<p>It can be tricky figuring out how to accomplish something really, really specific in MJML. Our design team sent
over templates with pretty specific needs—mobile vs. desktop padding, for example, and it took us a while to learn
how to make those types of tricky changes (though still less time than it would have taken in raw HTML, I'm sure).</p>

<a name="Limitations"></a>
<h2>Limitations</h2>

<p>Of course, MJML is still limited by the boundaries of email clients. It can't make gifs render in old versions of
Outlook, or fix the way Lotus Notes ignores stated image widths in favor of actual widths. We've run into issues
with background images that MJML couldn't completely alleviate on all clients (they're pretty poorly supported),
and because lots of mobile clients don't support media queries, we've had to develop in a way that makes sure our
desktop layouts and sizes will look good on small screens.</p>

<p>And it's worth noting that the HTML file output by MJML is going to be large. On our biggest emails, the ones
featuring articles, artists, artworks, events, ads, and more, we've had to deal with clipping by minifying our
output (which comes with its own share of difficulties, since again, things that work fine when minifying for web
will break email clients). If you're curious, we use the <a href="http://kangax.github.io/html-minifier/">Kangax Minifier</a>
with <a href="/images/2018-11-19-mjml/kangax-settings.png">these particular settings</a>.</p>

<p>One thing that's helped tremendously with these issues is MJML's great
<a href="https://slacking-inviter.herokuapp.com/">Slack community</a>. Both the devs of MJML and several avid users (including
both of us) are good about answering questions from new and seasoned users alike.</p>

<a name="Bringing.MJML.to.Engineering"></a>
<h2>Bringing MJML to Engineering</h2>

<p>Part of what the email marketing team appreciated about MJML is that it could be written by someone who just knew
HTML and CSS—you don't have to be an experienced programmer to make it work. The engineering team wasn't much
involved with the development of the Marketing team's emails in MJML, but when they began working on new
transactional emails for <a href="https://www.artsy.net/collect?acquireable=true">Buy Now</a> inventory, Erik (on Engineering)
and Matt (on Marketing) sat down together to see if it could be a good fit for them as well.</p>

<p>Artsy's transactional emails cover everything from internal reporting to messaging for gallery partners, art
collectors and auction bidders. As these emails have evolved and become more complex, our approaches to balancing
beauty with stability have pushed the limits of reasonable human effort. Similar to how frontend frameworks like
<a href="https://getbootstrap.com/">Bootstrap</a> added a level of comfortable abstraction to stylesheets, or the way your
React.js <code>&lt;Button /&gt;</code> component became so much more than a plain old <code>&lt;button /&gt;</code>, MJML's xml 'components' abstract
the messy bits away.</p>

<a name="State.of.the..Email..Union"></a>
<h2>State of the (Email) Union</h2>

<p>Today, we're using MJML for all of our B2C emails, a few of our B2B emails, and our new transactional emails (all
three are generated by different mail services, so it takes some time to bring them all up to date). We've found
that we're able to iterate on designs much faster, and our emails look better in more clients than they ever have
before.</p>

<p>What else have we learned during this process? MJML takes a bit of time to master, especially the idea of
<code>&lt;mj-head&gt;</code> as a kind of global stylesheet and the <code>body --&gt; section --&gt; column</code> flow. Once we got comfortable with
conventions like this, though, life before MJML became hard to imagine. It has offered Artsy the chance to raise
the level of accessibility of design <em>and</em> speed of development in this niche area, a major win for the engineering
team and cross-team collaboration as a whole.</p>

<p>For more information or to get started using MJML, <a href="https://mjml.io">check out their website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Notifications and Personalized Emails Efficiently]]></title>
    <link href="http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently/"/>
    <updated>2014-04-24T16:00:00+00:00</updated>
    <id>http://artsy.github.io/blog/2014/04/24/generating-notifications-and-personalized-emails-efficiently</id>
    <content type="html"><![CDATA[<p>We recently launched a new personalized email here at <a href="https://artsy.net">Artsy</a> that features content that a given user might find interesting. The goal of this post is to describe how we built a backend system that efficiently generates these e-mails for all our users. I'll talk about the first, naive implementation that had performance problems right away, and how the second implementation (currently in production) solved those issues, and whose behavior at scale is well-defined and understood. I won't go into the details of the design and layout of the mail itself and how we render the content - there are several earlier blog posts that deal with those: <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a>, <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a>.</p>

<p><img src="/images/2014-04-24-generating-notifications-and-personalized-emails-efficiently/percy_example.png" alt="Personalized Email Example" /></p>

<!-- more -->


<a name="Deciding.What.Content.to.Include"></a>
<h3>Deciding What Content to Include</h3>

<p>First, we had to decide what types of personalized content we wanted to feature in our mails. Users can follow artists and galleries, and so this seemed like a great place to start. We'd like to let you know about new artworks that have been uploaded by artists that you follow, as well as new shows that have been added by galleries you follow, or that are exhibiting artists you follow. Since we have location data for our galleries and our users (accomplished thru an onboarding flow, or thru geo-locating their IP address), we also want to include new shows that are opening near you. Additionally, we have a recommendations engine that recommends artworks to users based on their preferences and activity on the site, and we'd like to show some of the latest and best of such recommendations.</p>

<a name="Initial.Implementation.Ideas"></a>
<h3>Initial Implementation Ideas</h3>

<p>My first thought was to have an observer (really just some <code>after_save</code> callbacks) that will wait for data to get into a state where a user can be validly notified, and in a background task write these notifications to interested users. Here's how the base setup of our <code>Notification</code> model looked:</p>

<pre><code class="ruby">class Notification
  include Mongoid::Document
  include Mongoid::Timestamps

  belongs_to :user
  belongs_to :notifiable, polymorphic: true, inverse_of: :notifications
end
</code></pre>

<p>It's a simple join of the user and the <code>notifiable</code> (the object/action that a user is being notified about).</p>

<p>Then, a specific notification (such as one for published artworks by artists you follow) can inherit from this and look like:</p>

<pre><code class="ruby">class PublishedArtworkNotification &lt; Notification
  def self.notify!(artwork_id)
    user_ids = FollowArtist.where(artist: artwork.artist).pluck("user_id")
    user_ids.each_slice(100) do |uids|
      PublishedArtworkNotification.delay(queue: :any, priority: 6).create_for_users(artwork_id, uids)
    end
  end

  def self.create_for_users(artwork, uids)
    uids.each do |uid|
      PublishedArtworkNotification.create!(user_id: uid, notifiable_id: artwork_id, notifiable_type: 'Artwork')
    end
  end
end
</code></pre>

<p>Then, the <code>after_save</code> hook on an <code>Artwork</code> model is:</p>

<pre><code class="ruby">def delay_notify
  PublishedArtworkNotification.delay(queue: :any).notify!(self.id) if self.published_changed? &amp;&amp; self.published
end
</code></pre>

<p>So, when an artwork is published, we run <code>notify!</code> in the background for the respective notification. That method will pull all interested users (via following the artist), and then spawn off more background processes to write the notifications in batches of 100. We batched these writes to avoid any one background process taking too long (an artist such as <a href="https://artsy.net/artist/andy-warhol">Andy Warhol</a> has around twelve thousand followers currently), and also ran them at a lower priority to avoid blocking other jobs in our queue.</p>

<p>The other types of notifications were all implemented similarly (via an observer on the model, and a specific <code>Notification</code> class inheriting from the base class). We also added some other logic into the base <code>Notification</code> class such as some uniqueness constraints, as well as an ability to mark notifications as 'sent' or 'invalid'. However, we ran into serious performance/scaling issues fairly quickly, and had to re-implement this scheme.</p>

<a name="Performance.Bottlenecks"></a>
<h3>Performance Bottlenecks</h3>

<p>All of these records were being written to one collection in <a href="https://www.mongodb.org/">MongoDB</a>, and the size of this collection grew quite rapidly. It's size almost immediately dwarfed the size of any of our other collections, and the number of records quickly reached into the tens of millions. This led to problems: writing new notifications started to crawl to a standstill. We had several indices on this collection to aid in querying, and these made the insertion of new notifications very non-performant, and also started to affect overall database performance. Querying against this collection degraded quickly and started to similarly affect database performance. Archiving old records also proved next to impossible. We couldn't simply drop the entire collection, but had to prune records. This similarly was totally non-performant and was adversely affecting database and site performance. We needed to come up with a new implementation for <code>Notification</code>, and addressing these issues was essential.</p>

<a name="Resolving.Performance.Bottlenecks"></a>
<h3>Resolving Performance Bottlenecks</h3>

<p>So, we decided on a scheme where each day would result in a new <code>Notifications</code> collection (name keyed on the date), named <code>notifications_20140101</code>, <code>notifications_20140102</code>, etc. Each of these collections would have an <code>_id</code> field that corresponds to a user_id, and an <code>events</code> array (or 'stack' if you will) that records the id's of notified objects, as well as the type of notification. An example of a record in that collection is:</p>

<pre><code class="json">{"_id"=&gt;"5106b619f56337db300001f8",
 "events"=&gt;[{"t"=&gt;"NearbyShow", "o"=&gt;"533998b1c9dc24c371000041"},
            {"t"=&gt;"NearbyShow", "o"=&gt;"5345774cc9dc246d580003d0"},
            {"t"=&gt;"NearbyShow", "o"=&gt;"5335af4fa09a67145300028c"},
            {"t"=&gt;"NearbyShow", "o"=&gt;"533f1174a09a67298900007b"},
            {"t"=&gt;"ArtworkPublished", "o"=&gt;"5334647b139b2165160000d8"}]
}
</code></pre>

<p>So, here we see all of my notifications for April 22, 2014. On that day, I was notified about 4 shows opening near my location, and one artwork added by an artist I follow. Incidentally, that artwork was a piece by <a href="https://artsy.net/artist/rob-wynne">Rob Wynne</a> entitled <a href="https://artsy.net/artwork/rob-wynne-youre-dreaming">You're Dreaming</a>. The show notifications were for NYC-area shows opening at <a href="https://artsy.net/klein-sun-gallery">Klein Sun Gallery</a>, <a href="https://artsy.net/garis-and-hahn">Garis &amp; Hahn</a>, <a href="https://artsy.net/miyako-yoshinaga-gallery">Miyako Yoshinaga Gallery</a> and <a href="https://artsy.net/dodgegallery">DODGEgallery</a>.</p>

<p>A couple of nice things about this implementation is it limits the size of a collection: any one day's collection will scale directly with the number of users, which seems reasonable. Our earlier implementation scaled with the product of the number of users and amount of content on Artsy, which is clearly problematic. Also, archiving old notifications is as simple as dropping a particular day's collection, which is very performant. However, querying and assembling these notifications is a bit trickier than in the naive implementation, as well as marking which events have already been sent to a user, so as to avoid duplicating any content in between mailings.</p>

<p>Let's see how we rewrite the notification generation in this scheme:</p>

<pre><code class="ruby">module NotificationService

  def self.notify_many!(user_ids, object_id, type)
    events = events_from(object_id, type)
    user_ids.each do |user_id|
      notify_with_events(user_id, events)
    end
  end

  private

  def self.notify_with_events(user_id, events)
    collection.find(_id: user_id).upsert('$push' =&gt; { events: { '$each' =&gt; events } })
  end

  def self.events_from(object_ids, type)
    Array(object_ids).map do |object_id|
      {
        't' =&gt; type,
        'o' =&gt; object_id
      }
    end
  end

  # collection storing notifications for the given day
  def self.collection(date = Date.today)
    Mongoid.default_session.with(safe: false)[collection_name(date)]
  end

  def self.collection_name(date)
    "notifications_#{date.to_s(:number)}"
  end

end
</code></pre>

<p>Here's how the <code>after_save</code> callback looks now:</p>

<pre><code class="ruby">def notify_published
  NotificationService.notify_many!(user_ids, self, 'ArtworkPublished') if self.published_changed? &amp;&amp; self.published
end
</code></pre>

<p>Let's take a look at what's going on here. When an artwork is published, we call <code>notify_many!</code> in the <code>NotificationService</code> module. That will determine the correct collection (keyed by the date) using the <code>collection</code> and <code>collection_name</code> helpers. We build our events stack with the <code>events_from</code> helper, and then do an <code>upsert</code> with a <code>$push</code> to either insert or update that user's events for that day. Due to the fast performance of this scheme, we also no longer have to batch notification creation. As a sample benchmark, writing this type of notification to our <a href="https://artsy.net/artist/andy-warhol">Warhol</a> followers takes under 15 seconds.</p>

<p>Ok, so we seem to have solved some of our issues: namely writing and archiving notifications is performant, and we understand the behavior of these collections as the number of users and content on the site grows. Now let's look at how we can query against this scheme in an efficient manner, and also how we can mark events as 'seen' to avoid emailing out duplicates.</p>

<a name="Marking.Notifications.as.Flushed.and.Retrieving.Notifications"></a>
<h3>Marking Notifications as Flushed and Retrieving Notifications</h3>

<p>We decided to push a <code>flushed</code> event onto the user's stack after we send out notifications, and analogously, when we are querying a user's notifications, we want to throw away notifications that occur before a <code>flushed</code> event. Here's that method, in our <code>NotificationService</code> module:</p>

<pre><code class="ruby"># Mark all events until this point "seen." Pushes a {flushed: &lt;id&gt;}
# hash on to events array.
def self.flush!(user_id, since = Date.today - 7.days)
  flushed = { 'flushed' =&gt; Moped::BSON::ObjectId.new }
  collections_since(since).each do |coll|
    coll.find(_id: user_id).update('$push' =&gt; { events: flushed })
  end
  flushed  # return "id" of flushed marker, in case useful later
end

private

def self.collections_since(date)
  (date..Date.today).map { |d| collection(d) }
end
</code></pre>

<p>Pretty simple. We push the appropriate event onto every collection that was under consideration via the <code>collections_since</code> helper. When we send out a personalized email we accumulate the last 7 day's worth of activity for you, and so after we generate/send a mail for a user, we can simply say <code>NotificationService.flush!(user)</code>. Here's how that day's notifications for me looks after the <code>flushed</code> event:</p>

<pre><code class="json">  {"_id"=&gt;"5106b619f56337db300001f8",
   "events"=&gt;[{"t"=&gt;"NearbyShow", "o"=&gt;"5338504e139b21f2a9000362"},
              {"t"=&gt;"FollowedArtistShow", "o"=&gt;"533ddba3a09a6764f60006b6"}, {"t"=&gt;"NearbyShow", "o"=&gt;"533ddba3a09a6764f60006b6"},
              {"flushed"=&gt;"5352b346b504f5f3690002fe"}]
  }
</code></pre>

<p>For the last piece of the puzzle, let's look at how we query against this scheme and compile together all notifications that are applicable for a given user:</p>

<pre><code class="ruby">module NotificationService
  NOTIFICATION_TYPES = {
    'FollowedArtistShow' =&gt; PartnerShow,
    'FollowedPartnerShow' =&gt; PartnerShow,
    'NearbyShow' =&gt; PartnerShow,
    'ArtworkPublished' =&gt; Artwork,
    'ArtworkSuggested' =&gt; Artwork
  }

  class Notification &lt; Struct.new(:type, :object_id)
    def object
      @object ||= NOTIFICATION_TYPES[type].find(object_id)
    end

    def applicable?
      object.try(:notifiable?) || false
    end
  end

# Return applicable notifications for user since given date.
def self.get(user_id, since = Date.today - 7.days)
  collections_since(since)
    .map { |coll| coll.find(_id: user_id).one }.compact
    .flat_map { |doc| doc['events'].slice_before { |ev| ev['flushed'] }.to_a.last }
    .reject { |ev| ev['flushed'] }.uniq
    .map { |ev| Notification.new(ev['t'], ev['o']) }.select(&amp;:applicable?)
end
</code></pre>

<p>We introduce a lite-weight <code>Notification</code> class that will load the object, as well as perform an additional check. We use the previously introduced <code>collections_since</code> helper to retrieve all the notification collections under consideration. We query each and build up an array of all events from a user's stack. We remove events that occurred prior to a <code>flushed</code> event in a given collection and the <code>flushed</code> events themselves. Then we actually load all the objects and return the ones that are still <code>applicable?</code>. That final <code>applicable?</code> check is to allow us to filter out content at run-time that is no longer valid. For example, if an artwork is published and the correct event is written out to users, but before the user can be notified the artwork is unpublished, this can serve as a run-time check to not include that work. <code>def notifiable?</code> can thus be implemented in the <code>Artwork</code> model like so:</p>

<pre><code class="ruby">def notifiable?
  published?
end
</code></pre>

<p>And...that's basically it! Throughout the week as partners are uploading their shows/fair booths/artworks, these records are being opportunistically written to that day's notification collection, in a performant and scalable fashion. Then when we want to send you a personalized email, we pull all your appropriate notifications via the <code>get</code> routine in our <code>NotificationService</code>, and primarily using the technique described in <a href="http://artsy.github.io/blog/2014/03/18/presenters-and-memoization-moving-logic-out-of-templates/">Presenters and Memoization</a> we make sure we cache/memoize all such data. Using the tips in <a href="http://artsy.github.io/blog/2014/03/17/ruby-helper-to-group-artworks-into-a-pinterest-style-layout-for-email/">Pinterest-style Layouts</a> and <a href="http://artsy.github.io/blog/2014/03/17/some-tips-for-email-layout-and-responsiveness/">Email Layouts and Responsiveness</a> we can render this content and support various devices/email clients. We parallelize and batch the generation/sending of our e-mails as well. This whole system, from notification generation to actually emailing users, is running successfully and smoothly in production.</p>

<a name="Next.Steps"></a>
<h3>Next Steps</h3>

<p>I think this type of infrastructure can easily be adapted to serve as a feed on a front-end or other client app. An API to serve up these notifications (AKA feed items) can be built and different feed items can then be rendered or aggregated at load-time. Simple client-side polling can even be set up to alert a user if something has happened that interests them <em>while</em> they're browsing! I think push notifications and other messaging can be handled by this system as well.</p>

<p>I'd love to hear any feedback and thoughts, and hopefully you've found this post informative and interesting. Please leave any feedback in the comments and <a href="https://github.com/artsy">follow us on Github</a>!</p>
]]></content>
  </entry>
  
</feed>
